{"version":3,"sources":["../../../es6/services/game/los.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAChC,OAAO,CAAC,SAAS,EAAE;;;;AAIlB,SAAS,qBAAqB;;;AAGE;AAC9B,MAAI,cAAc,GAAG;AACnB,UAAM,EAAE,SAAS,aAAa,GAAG;AAC/B,aAAO;AACL,aAAK,EAAE;AACL,iBAAO,EAAE,KAAK;AACd,eAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AACrB,aAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;SACpB;AACD,cAAM,EAAE;AACN,iBAAO,EAAE,KAAK;AACd,eAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AACrB,aAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;SACpB;OACF,CAAC;KACH;AACD,eAAW,EAAE,SAAS,kBAAkB,CAAC,GAAG,EAAE;AAC5C,aAAO,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAC,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;KAC1C;;;;;;;;;;;;;;;;;;;;;;;;;AAyBD,iBAAa,EAAE,SAAS,oBAAoB,CAAC,KAAK,EAAE,GAAG,EAAE;AACvD,UAAI,IAAI,GAAG,CAAC,QAAQ,EAAC,SAAS,CAAC,CAAC;AAChC,SAAG,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;AACjD,WAAK,CAAC,SAAS,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;AACxC,aAAO,GAAG,CAAC;KACZ;AACD,YAAQ,EAAE,SAAS,eAAe,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE;AACzD,aAAO,CAAC,CAAC,IAAI,CACX,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EACf,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAChC,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAC5B,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,EACxB,UAAS,KAAK,EAAE;AACd,aAAK,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;;AAElC,eAAO,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;OACrC,CACF,CAAC,GAAG,CAAC,CAAC;KACR;AACD,aAAS,EAAE,SAAS,gBAAgB,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE;AAC3D,SAAG,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,CAChB,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAC1B,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACb,WAAK,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;;AAElC,SAAG,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI;;;AAGjB,OAAC,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAChC,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAC5B,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CACzB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;AAEd,WAAK,CAAC,SAAS,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;AACxC,aAAO,GAAG,CAAC;KACZ;AACD,mBAAe,EAAE,SAAS,sBAAsB,CAAC,GAAG,EAAE;AACpD,aAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;KACvC;AACD,eAAW,EAAE,SAAS,kBAAkB,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE;AAC1D,SAAG,GAAG,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AAC7C,WAAK,CAAC,SAAS,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;AACxC,aAAO,GAAG,CAAC;KACZ;GACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AA+EF,GAAC,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;AAC/B,SAAO,cAAc,CAAC;CACvB,CACF,CAAC,CAAC","file":"los.js","sourcesContent":["'use strict';\n\nangular.module('clickApp.services')\n  .factory('gameLos', [\n    // 'point',\n    // 'model',\n    // 'gameModels',\n    function gameLosServiceFactory(// pointService\n                                   // modelService,\n                                   // gameModelsService\n                                  ) {\n      var gameLosService = {\n        create: function gameLosCreate() {\n          return {\n            local: {\n              display: false,\n              start: { x: 0, y: 0 },\n              end: { x: 0, y: 0 },\n            },\n            remote: {\n              display: false,\n              start: { x: 0, y: 0 },\n              end: { x: 0, y: 0 },\n            },\n          };\n        },\n        isDisplayed: function gameLosIsDisplayed(los) {\n          return R.path(['remote','display'], los);\n        },\n        // origin: function gameLosOrigin(los) {\n        //   return R.path(['remote', 'origin'], los);\n        // },\n        // setOrigin: function gameLosSetOrigin(origin_model, scope, los) {\n        //   var origin = origin_model.state.stamp;\n        //   var target = gameLosService.target(los);\n        //   target = (target === origin) ? null : target;\n        //   var max_length = modelService.losMaxLength(origin_model);\n        //   return setOriginTarget(origin, target, max_length, scope, los);\n        // },\n        // setOriginResetTarget: function gameLosSetOrigin(origin_model, scope, los) {\n        //   var origin = origin_model.state.stamp;\n        //   var max_length = modelService.losMaxLength(origin_model);\n        //   return setOriginTarget(origin, null, max_length, scope, los);\n        // },\n        // target: function gameLosTarget(los) {\n        //   return R.path(['remote', 'target'], los);\n        // },\n        // setTarget: function gameLosSetTarget(target_model, scope, los) {\n        //   var origin = gameLosService.origin(los);\n        //   var target = target_model.state.stamp;\n        //   origin = (origin === target) ? null : origin;\n        //   return setOriginTarget(origin, target, null, scope, los);\n        // },\n        toggleDisplay: function gameLosToggleDisplay(scope, los) {\n          var path = ['remote','display'];\n          los = R.assocPath(path, !R.path(path, los), los);\n          scope.gameEvent('changeRemoteLos', los);\n          return los;\n        },\n        setLocal: function gameLosSetLocal(start, end, scope, los) {\n          return R.pipe(\n            R.prop('local'),\n            R.assoc('start', R.clone(start)),\n            R.assoc('end', R.clone(end)),\n            R.assoc('display', true),\n            function(local) {\n              scope.gameEvent('changeLocalLos');\n\n              return R.assoc('local', local, los);\n            }\n          )(los);\n        },\n        setRemote: function gameLosSetRemote(start, end, scope, los) {\n          los.local = R.pipe(\n            R.assoc('display', false)\n          )(los.local);          \n          scope.gameEvent('changeLocalLos');\n\n          los.remote = R.pipe(\n            // R.assoc('origin', null),\n            // R.assoc('target', null),\n            R.assoc('start', R.clone(start)),\n            R.assoc('end', R.clone(end)),\n            R.assoc('display', true)\n          )(los.remote);\n\n          scope.gameEvent('changeRemoteLos', los);\n          return los;\n        },\n        saveRemoteState: function gameLosSaveRemoteState(los) {\n          return R.clone(R.prop('remote', los));\n        },\n        resetRemote: function gameLosResetRemote(state, scope, los) {\n          los = R.assoc('remote', R.clone(state), los);\n          scope.gameEvent('changeRemoteLos', los);\n          return los;\n        },\n      };\n      // function setOriginTarget(origin, target, max_length, scope, los) {\n      //   var display = R.exists(origin) && R.exists(target);\n      //   los = R.assoc('remote', R.pipe(\n      //     R.assoc('origin', origin),\n      //     R.assoc('target', target),\n      //     R.assoc('display', display),\n      //     function(remote) {\n      //       if(R.exists(max_length)) {\n      //         return R.assoc('max', max_length, remote);\n      //       }\n      //       return remote;\n      //     }\n      //   )(los.remote), los);\n      //   return setupRemoteLos(scope, los);\n      // }\n      // function setupRemoteLos(scope, los) {\n      //   return R.pipeP(\n      //     function() {\n      //       var origin = R.path(['remote','origin'], los);\n      //       if(R.exists(origin)) {\n      //         return gameModelsService.findStamp(origin, scope.game.models)\n      //           .catch(R.always(null));\n      //       }\n      //       return self.Promise.resolve(null);\n      //     },\n      //     function(origin_model) {\n      //       return R.pipeP(\n      //         function() {\n      //           var target = R.path(['remote','target'], los);\n      //           if(R.exists(target)) {\n      //             return gameModelsService.findStamp(target, scope.game.models)\n      //               .catch(R.always(null));\n      //           }\n      //           return self.Promise.resolve(null);\n      //         },\n      //         function(target_model) {\n      //           if(R.exists(origin_model) &&\n      //              R.exists(target_model)) {\n      //             return modelService.shortestLineTo(scope.factions,\n      //                                                target_model,\n      //                                                origin_model);\n      //           }\n      //           if(R.exists(origin_model)) {\n      //             return {\n      //               start: R.pick(['x','y'], origin_model.state),\n      //               end: R.pick(['x','y'], origin_model.state)\n      //             };\n      //           }\n      //           if(R.exists(target_model)) {\n      //             return {\n      //               start: R.pick(['x','y'], target_model.state),\n      //               end: R.pick(['x','y'], target_model.state)\n      //             };\n      //           }\n      //           return R.pick(['start', 'end'], R.prop('remote', los));\n      //         },\n      //         function(line) {\n      //           var models_dist = pointService.distanceTo(line.end, line.start);\n      //           los = R.assoc('remote', R.pipe(\n      //             R.assoc('start', line.start),\n      //             enforceEndToMaxLength(line.end),\n      //             function(remote) {\n      //               var los_length = pointService.distanceTo(remote.end, remote.start);\n      //               return R.pipe(\n      //                 R.assoc('reached', los_length >= models_dist - 0.1),\n      //                 R.assoc('length', Math.round(los_length * 10) / 100)\n      //               )(remote);\n      //             }\n      //           )(los.remote), los);\n\n      //           scope.gameEvent('changeRemoteLos', los);\n\n      //           return los;\n      //         }\n      //       )();\n      //     }\n      //   )();\n      // }\n      R.curryService(gameLosService);\n      return gameLosService;\n    }\n  ]);\n"]}