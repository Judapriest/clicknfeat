{"version":3,"sources":["../../es6/directives/gameLos.js"],"names":[],"mappings":"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","file":"gameLos.js","sourcesContent":["'use strict';\n\nangular.module('clickApp.directives')\n  .directive('clickGameLos', [\n    function() {\n      return {\n        restrict: 'A',\n        link: function(scope, el/*, attrs*/) {\n          var map = document.getElementById('map');\n          var svgNS = map.namespaceURI;\n\n          var local_element = createLosElement(svgNS, el[0]);\n          var remote_element = createLosElement(svgNS, el[0]);\n          \n          scope.onGameEvent('changeLocalLos', function onChangeLocalLos() {\n            updateLos(map, scope.game.los.local, local_element);\n          }, scope);\n          scope.onGameEvent('changeRemoteLos', function onChangeRemoteLos(event, los) {\n            if(R.isNil(los)) return;\n            \n            updateLos(map, los.remote, remote_element);\n\n            // var display = ( gameLosService.isDisplayed(los) ||\n            //                 'LoS' === modesService.currentModeName(scope.modes)\n            //               );\n            // updateOrigin(scope.factions, scope.game.models,\n            //              los, display,\n            //              remote_element.origin);\n            // updateTarget(scope.factions, scope.game.models,\n            //              los, display,\n            //              remote_element.target);\n          }, scope);\n          // scope.onGameEvent('mapFlipped', function onMapFlippedLos(event) {\n          //   updateLosOnMapFlipped(map, scope.game.los.local, local_element);\n          //   updateLosOnMapFlipped(map, scope.game.los.remote, remote_element);\n          // }, scope);\n        }\n      };\n      function createLosElement(svgNS, parent) {\n        var group = document.createElementNS(svgNS, 'g');\n        parent.appendChild(group);\n\n        var line = document.createElementNS(svgNS, 'line');\n        line.style['marker-start'] = 'url(#los-start)';\n        line.style['marker-end'] = 'url(#los-end)';\n        group.appendChild(line);\n\n        // var label = labelElementService.create(svgNS, group);\n\n        // var origin = document.createElementNS(svgNS, 'circle');\n        // origin.classList.add('los-origin');\n        // origin.setAttribute('cx', '0');\n        // origin.setAttribute('cy', '0');\n        // origin.setAttribute('r', '0');\n        // origin.style.visibility = 'hidden';\n        // parent.appendChild(origin);\n\n        // var target = document.createElementNS(svgNS, 'circle');\n        // target.classList.add('los-target');\n        // target.setAttribute('cx', '0');\n        // target.setAttribute('cy', '0');\n        // target.setAttribute('r', '0');\n        // target.style.visibility = 'hidden';\n        // parent.appendChild(target);\n\n        return { container: group,\n                 line: line,\n                 // label: label,\n                 // origin: origin,\n                 // target: target,\n               };\n      }\n      function updateLos(map, los, element) {\n        // var map_flipped = gameMapService.isFlipped(map);\n        // var zoom_factor = gameMapService.zoomFactor(map);\n        // var label_flip_center = {\n        //   x: (los.end.x - los.start.x) / 2 + los.start.x,\n        //   y: (los.end.y - los.start.y) / 2 + los.start.y,\n        // };\n        // var label_text = los.display ? los.length : '';\n        self.requestAnimationFrame(function _updateLos() {\n          updateLine(los.display, los, element.line);\n          // labelElementService.update(map_flipped,\n          //                            zoom_factor,\n          //                            label_flip_center,\n          //                            label_flip_center,\n          //                            label_text,\n          //                            element.label);\n        });\n      }\n      // function updateLosOnMapFlipped(map, los, element) {\n      //   var label_flip_center = {\n      //     x: (los.end.x - los.start.x) / 2 + los.start.x,\n      //     y: (los.end.y - los.start.y) / 2 + los.start.y,\n      //   };\n      //   labelElementService.updateOnFlipMap(map, label_flip_center, element.label);\n      // }\n      function updateLine(visible, los, line) {\n        line.style['visibility'] = visible ? 'visible' : 'hidden';\n        line.setAttribute('x1', los.start.x+'');\n        line.setAttribute('y1', los.start.y+'');\n        line.setAttribute('x2', los.end.x+'');\n        line.setAttribute('y2', los.end.y+'');\n      }\n      // function updateOrigin(factions, models, los, display, element) {\n      //   var origin = gameLosService.origin(los);\n      //   R.pipeP(\n      //     function(origin) {\n      //       if(R.exists(origin)) {\n      //         return gameModelsService.findStamp(origin, models);\n      //       }\n      //       return self.Promise.resolve(null);\n      //     },\n      //     function(origin_model) {\n      //       if(!display ||\n      //          R.isNil(origin_model)) {\n      //         element.style.visibility = 'hidden';\n      //         return;\n      //       }\n      //       R.pipeP(\n      //         gameFactionsService.getModelInfo$(origin_model.state.info),\n      //         function(info) {\n      //           element.setAttribute('cx', origin_model.state.x+'');\n      //           element.setAttribute('cy', origin_model.state.y+'');\n      //           element.setAttribute('r', info.base_radius+'');\n      //           element.style.visibility = 'visible';\n      //         }\n      //       )(factions);\n      //     }\n      //   )(origin);\n      // }\n      // function updateTarget(factions, models, los, display, element) {\n      //   var target = gameLosService.target(los);\n      //   R.pipeP(\n      //     function(target) {\n      //       if(R.exists(target)) {\n      //         return gameModelsService.findStamp(target, models);\n      //       }\n      //       return self.Promise.resolve(null);\n      //     },\n      //     function(target_model) {\n      //       if(!display ||\n      //          R.isNil(target_model)) {\n      //         element.style.visibility = 'hidden';\n      //         return;\n      //       }\n            \n      //       if(gameLosService.targetReached(los)) {\n      //         element.classList.add('reached');\n      //       }\n      //       else {\n      //         element.classList.remove('reached');\n      //       }\n            \n      //       R.pipeP(\n      //         gameFactionsService.getModelInfo$(target_model.state.info),\n      //         function(info) {\n      //           element.setAttribute('cx', target_model.state.x+'');\n      //           element.setAttribute('cy', target_model.state.y+'');\n      //           element.setAttribute('r', info.base_radius+'');\n      //           element.style.visibility = 'visible';\n      //         }\n      //       )(factions);\n      //     }\n      //   )(target);\n      // }\n    }\n  ]);\n"]}