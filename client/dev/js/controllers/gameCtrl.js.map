{"version":3,"sources":["../../es6/controllers/gameCtrl.js"],"names":[],"mappings":"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","file":"gameCtrl.js","sourcesContent":["angular.module('clickApp.controllers')\n  .controller('gameCtrl', [\n    '$scope',\n    '$stateParams',\n    'modes',\n    function($scope,\n             $stateParams,\n             modesService) {\n      console.log('init gameCtrl', $stateParams);\n\n      let is_online = R.propEq('online', 'online', $stateParams);\n      let is_private = R.propEq('private', 'private', $stateParams);\n      let id = R.prop('id', $stateParams);\n      $scope.stateEvent('Game.load', is_online, is_private, id);\n      $scope.$on('$destroy', () => {\n        $scope.stateEvent('Modes.exit');\n      });\n\n      $scope.digestOnStateChangeEvent('Game.load.success', $scope);\n      $scope.digestOnStateChangeEvent('Game.layers.change', $scope);\n      $scope.digestOnStateChangeEvent('Game.board.change', $scope);\n      $scope.digestOnStateChangeEvent('Game.scenario.change', $scope);\n      $scope.digestOnStateChangeEvent('Game.model.create.enable', $scope);\n      $scope.digestOnStateChangeEvent('Game.template.create.enable', $scope);\n      $scope.digestOnStateChangeEvent('Game.terrain.create.enable', $scope);\n      $scope.onStateChangeEvent('Game.load.error', () => {\n        $scope.goToState('lounge');\n      }, $scope);\n\n      $scope.hints = {};\n      $scope.onStateChangeEvent('Game.chat', (event, msg) => {\n        if(msg.from === $scope.user.state.name) return;\n\n        $scope.hints.go_to_main = !$scope.stateIs('game.main');\n        $scope.$digest();\n      }, $scope);\n      $scope.onStateChangeEvent('User.chat', (event, msg) => {\n        console.log('gameCtrl: userMailHint', event, msg);\n        if(msg.from === $scope.user.state.stamp) return;\n\n        $scope.hints.go_to_online = !$scope.stateIs('game.online');\n        $scope.$digest();\n      }, $scope);\n\n      function updateCurrentModeBindings() {\n        $scope.action_bindings = R.pipe(\n          R.path(['state','modes']),\n          modesService.currentModeBindings,\n          R.clone\n        )($scope);\n        $scope.action_buttons = R.pipe(\n          R.path(['state','modes']),\n          modesService.currentModeButtons,\n          R.clone\n        )($scope);\n        $scope.$digest();\n      }\n      $scope.onStateChangeEvent('Modes.change', updateCurrentModeBindings, $scope);\n      $scope.onStateChangeEvent('Game.loaded', updateCurrentModeBindings, $scope);\n      $scope.currentModeName = () => {\n        return R.pipe(\n          R.pathOr({}, ['state', 'modes']),\n          modesService.currentModeName\n        )($scope);\n      };\n      $scope.currentModeIs = (mode) => {\n        return $scope.currentModeName() === mode;\n      };\n      $scope.show_action_group = null;\n      $scope.doModeAction = (action, ...args) => {\n        $scope.stateEvent('Modes.current.action', action, [...args, {}]);\n      };\n      $scope.doActionButton = ([label, action, group]) => {\n        label = label;\n        if(action === 'toggle') {\n          $scope.show_action_group = ( ($scope.show_action_group === group) ?\n                                       null :\n                                       group\n                                     );\n          return;\n        }\n        $scope.stateEvent('Modes.current.action', action, [{}]);\n      };\n      // function updateGameLosOriginTarget(on) {\n      //   let game_los = {\n      //     stamp: null,\n      //     change: null,\n      //     delete: null\n      //   };\n      //   function cleanupLosListener(origin) {\n      //     if(game_los.stamp === origin) return;\n          \n      //     console.log('unsubscribe Los listeners', on, game_los.stamp);\n      //     if(game_los.change) game_los.change();\n      //     game_los.change = null;\n      //     if(game_los.delete) game_los.delete();\n      //     game_los.delete = null;\n      //     game_los.stamp = null;\n      //   }\n      //   $scope.onGameEvent('changeRemoteLos', (event, los) => {\n      //     let stamp = gameLosService[on](los);\n      //     cleanupLosListener(stamp);\n          \n      //     let display = gameLosService.isDisplayed(los);\n      //     if( !display ||\n      //         R.isNil(stamp) ||\n      //         game_los.stamp === stamp ) return;\n          \n      //     let change_event = 'changeModel-'+stamp;\n      //     game_los.change = pubSubService.subscribe(change_event, () => {\n      //       console.log('update LoS change', on);\n      //       gameLosService.updateOriginTarget($scope, $scope.game, $scope.game.los);\n      //     }, game_event_channel);\n      //     let delete_event = 'deleteModel-'+stamp;\n      //     game_los.delete = pubSubService.subscribe(delete_event, () => {\n      //       console.log('update LoS delete', on);\n      //       let cmd = (on === 'origin' ? 'clearOrigin' : 'clearTarget');\n      //       gameLosService[cmd]($scope, $scope.game, $scope.game.los);\n      //     }, game_event_channel);\n      //     console.log('subscribe Los listener', on, change_event, delete_event);\n      //     game_los.stamp = stamp;\n      //   }, $scope);\n      //   $scope.$on('$destroy', () => {\n      //     cleanupLosListener();\n      //   });\n      // }\n      // updateGameLosOriginTarget('origin');\n      // updateGameLosOriginTarget('target');\n      \n      // function updateGameRulerOriginTarget(on) {\n      //   let game_ruler = {\n      //     stamp: null,\n      //     change: null,\n      //     delete: null\n      //   };\n      //   function cleanupRulerListener(origin) {\n      //     if(game_ruler.stamp === origin) return;\n          \n      //     console.log('unsubscribe Ruler listener', on, game_ruler.stamp);\n      //     if(game_ruler.change) game_ruler.change();\n      //     game_ruler.change = null;\n      //     if(game_ruler.delete) game_ruler.delete();\n      //     game_ruler.delete = null;\n      //     game_ruler.stamp = null;\n      //   }\n      //   $scope.onGameEvent('changeRemoteRuler', (event, ruler) => {\n      //     let stamp = gameRulerService[on](ruler);\n      //     cleanupRulerListener(stamp);\n          \n      //     let display = gameRulerService.isDisplayed(ruler);\n      //     if( !display ||\n      //         R.isNil(stamp) ||\n      //         game_ruler.stamp === stamp ) return;\n          \n      //     let change_event = 'changeModel-'+stamp;\n      //     game_ruler.change = pubSubService.subscribe(change_event, () => {\n      //       console.log('update Ruler change', on);\n      //       gameRulerService.updateOriginTarget($scope, $scope.game.ruler);\n      //     }, game_event_channel);\n      //     let delete_event = 'deleteModel-'+stamp;\n      //     game_ruler.delete = pubSubService.subscribe(delete_event, () => {\n      //       console.log('update Ruler delete', on);\n      //       let cmd = (on === 'origin' ? 'clearOrigin' : 'clearTarget');\n      //       gameRulerService[cmd]($scope, $scope.game.ruler)\n      //         .then((ruler) => {\n      //           $scope.game.ruler = ruler;\n      //         });\n      //     }, game_event_channel);\n      //     console.log('subscribe Ruler listener', on, change_event, delete_event);\n      //     game_ruler.stamp = stamp;\n      //   }, $scope);\n      //   $scope.$on('$destroy', () => {\n      //     cleanupRulerListener();\n      //   });\n      // }\n      // updateGameRulerOriginTarget('origin');\n      // updateGameRulerOriginTarget('target');\n      \n      // function updateGameModelSelection() {\n      //   let game_model = {\n      //     stamp: null,\n      //     unsubscribe: null\n      //   };\n      //   function cleanupModelListener(stamp) {\n      //     if(game_model.stamp === stamp ||\n      //        R.isNil(game_model.unsubscribe)) return;\n          \n      //     console.info('unsubscribe Game Model listener', game_model.stamp);\n      //     game_model.unsubscribe();\n      //     game_model.unsubscribe = null;\n      //     game_model.stamp = null;\n      //   }\n      //   function updateSingleModelSelection(stamp) {\n      //     R.pipePromise(\n      //       (stamp) => {\n      //         if(R.isNil(stamp)) return null;\n\n      //         return gameModelsService\n      //           .findStamp(stamp, $scope.game.models);\n      //       },\n      //       (model) => {\n      //         $scope.gameEvent('updateSingleModelSelection', stamp, model);\n      //       }\n      //     )(stamp);\n      //   }\n      //   $scope.onGameEvent('changeLocalModelSelection', (event, selection) => {\n      //     let stamps = gameModelSelectionService.get('local', selection);\n      //     let stamp = R.length(stamps) === 1 ? R.head(stamps) : null;\n      //     cleanupModelListener(stamp);\n          \n      //     if( R.isNil(stamp) ||\n      //         game_model.stamp === stamp ) return;\n          \n      //     let event_name = 'changeModel-'+stamp;\n      //     console.info('subscribe Game Model listener', event_name);\n      //     game_model.unsubscribe = pubSubService.subscribe(event_name, () => {\n      //       let stamps = gameModelSelectionService.get('local', $scope.game.model_selection);\n      //       let stamp = R.length(stamps) === 1 ? R.head(stamps) : null;\n      //       updateSingleModelSelection(stamp);\n      //     }, game_event_channel);\n      //     game_model.stamp = stamp;\n      //     updateSingleModelSelection(stamp);\n      //   }, $scope);\n      //   $scope.$on('$destroy', () => {\n      //     cleanupModelListener();\n      //   });\n      // }\n      // updateGameModelSelection();\n      \n      // function updateGameTemplateSelection() {\n      //   let game_template = {\n      //     stamp: null,\n      //     unsubscribe: null\n      //   };\n      //   function cleanupTemplateListener(stamp) {\n      //     if(game_template.stamp === stamp ||\n      //        R.isNil(game_template.unsubscribe)) return;\n          \n      //     console.info('unsubscribe Game Template listener', game_template.stamp);\n      //     game_template.unsubscribe();\n      //     game_template.unsubscribe = null;\n      //     game_template.stamp = null;\n      //   }\n      //   function updateSingleTemplateSelection(stamp) {\n      //     R.pipePromise(\n      //       (stamp) => {\n      //         if(R.isNil(stamp)) return null;\n\n      //         return gameTemplatesService\n      //           .findStamp(stamp, $scope.game.templates);\n      //       },\n      //       (template) => {\n      //         if(R.exists(template) &&\n      //            'aoe' !== template.state.type) {\n      //           stamp = null;\n      //           template = null;\n      //         }\n              \n      //         $scope.gameEvent('updateSingleTemplateSelection', stamp, template);\n      //       }\n      //     )(stamp);\n      //   }\n      //   $scope.onGameEvent('changeLocalTemplateSelection', (event, selection) => {\n      //     let stamps = gameTemplateSelectionService.get('local', selection);\n      //     let stamp = R.length(stamps) === 1 ? R.head(stamps) : null;\n      //     cleanupTemplateListener(stamp);\n          \n      //     if( R.isNil(stamp) ||\n      //         game_template.stamp === stamp ) return;\n          \n      //     let event_name = 'changeTemplate-'+stamp;\n      //     console.info('subscribe Game Template listener', event_name);\n      //     game_template.unsubscribe = pubSubService.subscribe(event_name, () => {\n      //       let stamps = gameTemplateSelectionService.get('local', $scope.game.template_selection);\n      //       let stamp = R.length(stamps) === 1 ? R.head(stamps) : null;\n      //       updateSingleTemplateSelection(stamp);\n      //     }, game_event_channel);\n      //     game_template.stamp = stamp;\n      //     updateSingleTemplateSelection(stamp);\n      //   }, $scope);\n      //   $scope.$on('$destroy', () => {\n      //     cleanupTemplateListener();\n      //   });\n      // }\n      // updateGameTemplateSelection();\n    }\n  ]);\n"]}