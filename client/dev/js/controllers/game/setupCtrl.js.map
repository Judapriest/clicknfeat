{"version":3,"sources":["../../../es6/controllers/game/setupCtrl.js"],"names":[],"mappings":"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","file":"setupCtrl.js","sourcesContent":["angular.module('clickApp.controllers')\n  .controller('gameSetupCtrl', [\n    '$scope',\n    'fileImport',\n    'game',\n    'gameBoard',\n    'gameScenario',\n    'gameModels',\n    'gameTerrains',\n    function($scope,\n             fileImportService,\n             gameService,\n             gameBoardService,\n             gameScenarioService,\n             gameModelsService,\n             gameTerrainsService) {\n      console.log('init gameSetupCtrl');\n\n      $scope.onGameLoad.then(() => {\n        $scope.gameEvent('refreshModelScenarioAura');\n      });\n      $scope.$on('$destroy', () => {\n        $scope.gameEvent('refreshModelScenarioAura');\n      });\n      \n      $scope.$watch('game.board.name', (value) => {\n        $scope.board_name = value;\n      });\n      $scope.doSetBoard = () => {\n        var board = gameBoardService.forName($scope.board_name, $scope.boards);\n        $scope.doExecuteCommand('setBoard', board);\n      };\n      $scope.doSetRandomBoard = () => {\n        var board, name = gameBoardService.name($scope.game.board);\n        while(name === gameBoardService.name($scope.game.board)) {\n          board = $scope.boards[R.randomRange(0, $scope.boards.length-1)];\n          name = gameBoardService.name(board);\n        }\n        $scope.board_name = name;\n        $scope.doSetBoard();\n      };\n\n      $scope.$watch('game.scenario.name', (value) => {\n        $scope.scenario_name = value;\n        $scope.scenario_group = gameScenarioService.groupForName($scope.scenario_name,\n                                                                 $scope.scenarios);\n      });\n      $scope.doSetScenario = () => {\n        var scenario = gameScenarioService.forName($scope.scenario_name,\n                                                   $scope.scenario_group);\n        $scope.doExecuteCommand('setScenario', scenario);\n      };\n      $scope.doSetRandomScenario = () => {\n        var group = gameScenarioService.group('SR15', $scope.scenarios);\n        var scenario, name = $scope.scenario_name;\n        while(name === $scope.scenario_name) {\n          scenario = group[1][R.randomRange(0, group[1].length-1)];\n          name = gameScenarioService.name(scenario);\n        }\n        $scope.scenario_group = group;\n        $scope.scenario_name = name;\n        $scope.doSetScenario();\n      };\n      $scope.doGenerateObjectives = () => {\n        R.pipePromise(\n          () => {\n            return gameModelsService.all($scope.game.models);\n          },\n          R.filter(R.pipe(\n            R.path(['state','info']),\n            R.head,\n            R.equals('scenario')\n          )),\n          R.map(R.path(['state','stamp'])),\n          (stamps) => {\n            return gameService\n              .executeCommand('deleteModel', stamps, $scope, $scope.game)\n              .catch(R.always(null));\n          },\n          () => {\n            return gameScenarioService\n              .createObjectives($scope.game.scenario);\n          },\n          (objectives) => {\n            var is_flipped = R.path(['ui_state','flip_map'], $scope);\n            return gameService.executeCommand('createModel', objectives, is_flipped,\n                                              $scope, $scope.game);\n          }\n        )();\n      };\n\n      $scope.doToggleLayer = (l) => {\n        $scope.doExecuteCommand('setLayers', 'toggle', l);\n      };\n\n      $scope.onAmbianceChange = () => {\n        $scope.category = R.head(R.keys($scope.terrains[$scope.ambiance]));\n        $scope.onCategoryChange();\n      };\n      $scope.onCategoryChange = () => {\n        $scope.entry = R.head(R.keys($scope.terrains[$scope.ambiance][$scope.category]));\n        $scope.onEntryChange();\n      };\n      $scope.onEntryChange = () => {\n      };\n      $scope.data_ready.then(() => {\n        $scope.ambiance = R.head(R.keys($scope.terrains));\n        $scope.onAmbianceChange();\n      });\n      function getTerrainPath() {\n        return [ $scope.ambiance,\n                 $scope.category,\n                 $scope.entry\n               ];\n      }\n      $scope.getTerrain = () => {\n        return R.path([\n                 $scope.ambiance,\n                 $scope.category,\n                 $scope.entry\n               ], $scope.terrains);\n      };\n      $scope.doCreateTerrain = () => {\n        var terrain_path = getTerrainPath();\n        $scope.create.terrain = {\n          base: { x: 240, y: 240, r: 0 },\n          terrains: [ {\n            info: terrain_path,\n            x: 0, y: 0, r: 0\n          } ]\n        };\n        console.log('createTerrain', $scope.create.terrain);\n        $scope.doSwitchToMode('CreateTerrain');\n      };\n      $scope.doResetTerrain = () => {\n        return R.pipePromise(\n          () => {\n            return gameTerrainsService.all($scope.game.terrains);\n          },\n          R.pluck('state'),\n          R.pluck('stamp'),\n          (stamps) => {\n            return gameService\n              .executeCommand('deleteTerrain', stamps,\n                              $scope, $scope.game);\n          }\n        )().catch((reason) => {\n          $scope.gameEvent('modeActionError', reason);\n          return self.Promise.reject(reason);\n        });\n      };\n      \n      $scope.doImportBoardFile = (files) => {\n        console.log('doImportBoardFile', files);\n        R.pipeP(\n          fileImportService.read$('json'),\n          (board_info) => {\n            console.log(board_info);\n            return R.pipePromise(\n              () => {\n                if(!board_info.board) return null;\n                return gameService.executeCommand('setBoard', board_info.board,\n                                                  $scope, $scope.game);\n              },\n              () => {\n                if(R.isEmpty(R.pathOr([], ['terrain','terrains'], board_info))) {\n                  return null;\n                }\n                return R.pipeP(\n                  () => {\n                    return $scope.doResetTerrain();\n                  },\n                  () => {\n                    return gameService\n                      .executeCommand('createTerrain', board_info.terrain, false,\n                                      $scope, $scope.game);\n                  }\n                )();\n              }\n            )();\n          }\n        )(files[0]).catch((reason) => {\n          $scope.gameEvent('modeActionError', reason);\n          return self.Promise.reject(reason);\n        });\n      };\n    }\n  ]);\n"]}