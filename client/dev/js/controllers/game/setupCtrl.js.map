{"version":3,"sources":["../../../es6/controllers/game/setupCtrl.js"],"names":[],"mappings":"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","file":"setupCtrl.js","sourcesContent":["'use strict';\n\nangular.module('clickApp.controllers')\n  .controller('gameSetupCtrl', [\n    '$scope',\n    'game',\n    'gameBoard',\n    'gameScenario',\n    'gameModels',\n    function($scope,\n             gameService,\n             gameBoardService,\n             gameScenarioService,\n             gameModelsService) {\n      console.log('init gameSetupCtrl');\n\n      $scope.onGameLoad.then(() => {\n        $scope.gameEvent('refreshModelScenarioAura');\n      });\n      $scope.$on('$destroy', () => {\n        $scope.gameEvent('refreshModelScenarioAura');\n      });\n      \n      $scope.$watch('game.board.name', function(value) {\n        $scope.board_name = value;\n      });\n      $scope.doSetBoard = function doSetBoard() {\n        var board = gameBoardService.forName($scope.board_name, $scope.boards);\n        $scope.doExecuteCommand('setBoard', board);\n      };\n      $scope.doSetRandomBoard = function doSetRandomBoard() {\n        var board, name = gameBoardService.name($scope.game.board);\n        while(name === gameBoardService.name($scope.game.board)) {\n          board = $scope.boards[R.randomRange(0, $scope.boards.length-1)];\n          name = gameBoardService.name(board);\n        }\n        $scope.board_name = name;\n        $scope.doSetBoard();\n      };\n\n      $scope.$watch('game.scenario.name', function(value) {\n        $scope.scenario_name = value;\n        $scope.scenario_group = gameScenarioService.groupForName($scope.scenario_name,\n                                                                 $scope.scenarios);\n      });\n      $scope.doSetScenario = function doSetScenario() {\n        var scenario = gameScenarioService.forName($scope.scenario_name,\n                                                   $scope.scenario_group);\n        $scope.doExecuteCommand('setScenario', scenario);\n      };\n      $scope.doSetRandomScenario = function doSetRandomScenario() {\n        var group = gameScenarioService.group('SR15', $scope.scenarios);\n        var scenario, name = $scope.scenario_name;\n        while(name === $scope.scenario_name) {\n          scenario = group[1][R.randomRange(0, group[1].length-1)];\n          name = gameScenarioService.name(scenario);\n        }\n        $scope.scenario_group = group;\n        $scope.scenario_name = name;\n        $scope.doSetScenario();\n      };\n      $scope.doGenerateObjectives = () => {\n        R.pipePromise(\n          () => {\n            return gameModelsService.all($scope.game.models);\n          },\n          R.filter(R.pipe(\n            R.path(['state','info']),\n            R.head,\n            R.equals('scenario')\n          )),\n          R.map(R.path(['state','stamp'])),\n          (stamps) => {\n            return gameService\n              .executeCommand('deleteModel', stamps, $scope, $scope.game)\n              .catch(R.always(null));\n          },\n          () => {\n            return gameScenarioService\n              .createObjectives($scope.game.scenario);\n          },\n          (objectives) => {\n            var is_flipped = R.path(['ui_state','flip_map'], $scope);\n            return gameService.executeCommand('createModel', objectives, is_flipped,\n                                              $scope, $scope.game);\n          }\n        )();\n      };\n\n      $scope.doToggleLayer = function doToggleLayer(l) {\n        $scope.doExecuteCommand('setLayers', 'toggle', l);\n      };\n    }\n  ]);\n"]}