{"version":3,"sources":["../../../es6/controllers/game/setupCtrl.js"],"names":[],"mappings":"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","file":"setupCtrl.js","sourcesContent":["'use strict';\n\nangular.module('clickApp.controllers')\n  .controller('gameSetupCtrl', [\n    '$scope',\n    'gameBoard',\n    'gameScenario',\n    function($scope,\n             gameBoardService,\n             gameScenarioService) {\n      console.log('init gameSetupCtrl');\n\n      $scope.$watch('game.board.name', function(value) {\n        $scope.board_name = value;\n      });\n      $scope.doSetBoard = function doSetBoard() {\n        var board = gameBoardService.forName($scope.board_name, $scope.boards);\n        $scope.doExecuteCommand('setBoard', board);\n      };\n      $scope.doSetRandomBoard = function doSetRandomBoard() {\n        var board, name = gameBoardService.name($scope.game.board);\n        while(name === gameBoardService.name($scope.game.board)) {\n          board = $scope.boards[R.randomRange(0, $scope.boards.length-1)];\n          name = gameBoardService.name(board);\n        }\n        $scope.board_name = name;\n        $scope.doSetBoard();\n      };\n\n      $scope.$watch('game.scenario.name', function(value) {\n        $scope.scenario_name = value;\n        $scope.scenario_group = gameScenarioService.groupForName($scope.scenario_name,\n                                                                 $scope.scenarios);\n      });\n      $scope.doSetScenario = function doSetScenario() {\n        var scenario = gameScenarioService.forName($scope.scenario_name,\n                                                   $scope.scenario_group);\n        $scope.doExecuteCommand('setScenario', scenario);\n      };\n      $scope.doSetRandomScenario = function doSetRandomScenario() {\n        var group = gameScenarioService.group('SR15', $scope.scenarios);\n        var scenario, name = $scope.scenario_name;\n        while(name === $scope.scenario_name) {\n          scenario = group[1][R.randomRange(0, group[1].length-1)];\n          name = gameScenarioService.name(scenario);\n        }\n        $scope.scenario_group = group;\n        $scope.scenario_name = name;\n        $scope.doSetScenario();\n      };\n      // $scope.doGenerateObjectives = function doGenerateObjectives() {\n      //   var previous = R.pipe(\n      //     gameModelsService.all,\n      //     R.filter(function(m) {\n      //       var info = gameFactionsService.getModelInfo(m.state.info, $scope.factions);\n      //       return ( info.type === 'objective' ||\n      //                info.type === 'flag'\n      //              );\n      //     }),\n      //     R.map(R.path(['state','stamp']))\n      //   )($scope.game.models);\n      //   if(!R.isEmpty(previous)) {\n      //     $scope.doExecuteCommand('deleteModel', previous);\n      //   }\n        \n      //   var objectives = R.map(function(o) {\n      //     return {\n      //       info: R.concat(['scenario','models'], o.path),\n      //       x: o.x, y: o.y\n      //     };\n      //   }, R.defaultTo([], $scope.game.scenario.objectives));\n      //   var flags = R.map(function(o) {\n      //     return {\n      //       info: R.concat(['scenario','models'], o.path),\n      //       x: o.x, y: o.y\n      //     };\n      //   }, R.defaultTo([], $scope.game.scenario.flags));\n      //   var create = {\n      //     base: { x: 0, y: 0 },\n      //     models: R.concat(objectives, flags)\n      //   };\n      //   if(!R.isEmpty(create.models)) {\n      //     $scope.doExecuteCommand('createModel', create);\n      //   }\n      // };\n\n      // $scope.isLayerDisplayed = function isLayerDisplayed(l) {\n      //   return gameLayersService.isDisplayed(l, R.defaultTo({}, $scope.game).layers);\n      // };\n      $scope.doToggleLayer = function doToggleLayer(l) {\n        $scope.doExecuteCommand('setLayers', 'toggle', l);\n      };\n    }\n  ]);\n"]}