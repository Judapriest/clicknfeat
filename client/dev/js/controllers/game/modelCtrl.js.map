{"version":3,"sources":["../../../es6/controllers/game/modelCtrl.js"],"names":[],"mappings":"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","file":"modelCtrl.js","sourcesContent":["angular.module('clickApp.controllers')\n  .controller('gameModelCtrl', [\n    '$scope',\n    'modes',\n    'fileImport',\n    'gameFactions',\n    function($scope,\n             modesService,\n             fileImportService,\n             gameFactionsService) {\n      console.log('init gameModelCtrl');\n\n      $scope.onFactionChange = () => {\n        $scope.section = R.head(R.keys($scope.factions[$scope.faction].models));\n        $scope.onSectionChange();\n      };\n      $scope.onSectionChange = () => {\n        $scope.entry = R.head(R.keys($scope.factions[$scope.faction].models[$scope.section]));\n        $scope.onEntryChange();\n      };\n      $scope.onEntryChange = () => {\n        var entries = $scope.getEntries();\n        if(R.isNil(entries)) {\n          $scope.model = $scope.entry;\n          $scope.onModelChange();\n          return;\n        }\n        $scope.type = R.head(R.keys(entries));\n        $scope.onTypeChange();\n      };\n      $scope.onTypeChange = () => {\n        var entries = $scope.getEntries();\n        $scope.model = R.pipe(\n          R.defaultTo({}),\n          R.prop($scope.type),\n          R.defaultTo({}),\n          R.keys(),\n          R.head()\n        )(entries);\n        $scope.onModelChange();\n      };\n      $scope.onModelChange = () => {\n        $scope.repeat = 1;\n      };\n      $scope.data_ready.then(() => {\n        $scope.faction = R.head(R.keys($scope.factions));\n        $scope.onFactionChange();\n      });\n\n      $scope.getEntries = () => {\n        return R.path([ $scope.faction,\n                        'models',\n                        $scope.section,\n                        $scope.entry,\n                        'entries'\n                      ], $scope.factions);\n      };\n      $scope.getModel = () => {\n        var entries = $scope.getEntries();\n        if(R.isNil(entries)) {\n          return R.path([ $scope.faction,\n                          'models',\n                          $scope.section,\n                          $scope.entry\n                        ], $scope.factions);\n        }\n        else {\n          return R.path([ $scope.type,\n                          $scope.model\n                        ], entries);\n        }\n      };\n      \n      function getModelPath() {\n        var entries = $scope.getEntries();\n        if(R.isNil(entries)) {\n          return [ $scope.faction,\n                   'models',\n                   $scope.section,\n                   $scope.entry\n                 ];\n        }\n        else {\n          return [ $scope.faction,\n                   'models',\n                   $scope.section,\n                   $scope.entry,\n                   'entries',\n                   $scope.type,\n                   $scope.model\n                 ];\n        }\n      }\n      $scope.doCreateModel = () => {\n        var model_path = getModelPath();\n        $scope.create.model = {\n          base: { x: 240, y: 240, r: 0 },\n          models: R.times((i) => {\n            return {\n              info: model_path,\n              user: R.pathOr('Unknown', ['user','state','name'], $scope),\n              x: 20*i, y: 0, r: 0\n            };\n          }, R.defaultTo(1, $scope.repeat))\n        };\n        $scope.doSwitchToMode('CreateModel');\n      };\n\n      $scope.import = {\n        list: null\n      };\n      $scope.doImportList = () => {\n        // TODO : find min unit number for user\n        let user = R.pathOr('Unknown', ['user','state','name'], $scope);\n        $scope.create.model = gameFactionsService\n          .buildModelsList($scope.import.list, user,\n                           $scope.factions_references);\n        console.log('doImportList',\n                    $scope.import.list,\n                    $scope.create.model);\n        $scope.doSwitchToMode('CreateModel');\n      };\n      \n      $scope.doImportModelsFile = (files) => {\n        console.log('doImportModelsFile', files);\n        R.pipeP(\n          fileImportService.read$('json'),\n          (create) => {\n            $scope.create.model = create;\n            $scope.doSwitchToMode('CreateModel');\n          }\n        )(files[0])\n          .catch((reason) => {\n            $scope.gameEvent('modeActionError', reason);\n            return self.Promise.reject(reason);\n          });\n      };\n    }\n  ]);\n"]}