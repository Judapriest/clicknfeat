{"version":3,"sources":["../../../es6/services/modes/model_place.js"],"names":[],"mappings":"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","file":"model_place.js","sourcesContent":["angular.module('clickApp.services')\n  .factory('modelPlaceMode', [\n    'modes',\n    'settings',\n    'modelsMode',\n    'modelBaseMode',\n    'game',\n    'gameModels',\n    'gameModelSelection',\n    function modelPlaceModeServiceFactory(modesService,\n                                          settingsService,\n                                          modelsModeService,\n                                          modelBaseModeService,\n                                          gameService,\n                                          gameModelsService,\n                                          gameModelSelectionService) {\n      let model_actions = Object.create(modelBaseModeService.actions);\n      model_actions.endPlace = (state) => {\n        let stamps = gameModelSelectionService\n              .get('local', state.game.model_selection);\n        return R.pipePromise(\n          function() {\n            return state.event('Game.command.execute',\n                               'onModels', [ 'endPlace', [], stamps]);\n          },\n          function() {\n            return state.event('Modes.switchTo', 'Model');\n          }\n        )();\n      };\n      model_actions.setTargetModel = (state, event) => {\n        let stamps = gameModelSelectionService\n              .get('local', state.game.model_selection);\n        return R.pipeP(\n          gameModelsService.findStamp$(stamps[0]),\n          (model) => {\n            if(model.state.stamp === event['click#'].target.state.stamp) return null;\n            \n            return state.event('Game.command.execute',\n                               'onModels', [ 'setPlaceTarget',\n                                             [state.factions, event['click#'].target],\n                                             stamps\n                                           ]);\n          }\n        )(state.game.models);\n      };\n      model_actions.setOriginModel = (state, event) => {\n        let stamps = gameModelSelectionService\n              .get('local', state.game.model_selection);\n        return R.pipeP(\n          gameModelsService.findStamp$(stamps[0]),\n          (model) => {\n            if(model.state.stamp === event['click#'].target.state.stamp) return null;\n            \n            return state.event('Game.command.execute',\n                               'onModels', [ 'setPlaceOrigin',\n                                             [state.factions, event['click#'].target],\n                                             stamps\n                                           ]);\n          }\n        )(state.game.models);\n      };\n      let moves = [\n        ['moveFront', 'up', 'moveFront'],\n        ['moveBack', 'down', 'moveBack'],\n        ['rotateLeft', 'left', 'rotateLeft'],\n        ['rotateRight', 'right', 'rotateRight'],\n        ['shiftUp', 'ctrl+up', 'shiftDown'],\n        ['shiftDown', 'ctrl+down', 'shiftUp'],\n        ['shiftLeft', 'ctrl+left', 'shiftRight'],\n        ['shiftRight', 'ctrl+right', 'shiftLeft'],\n      ];\n      var buildPlaceMove$ = R.curry((move, flip_move, small, state) => {\n        let stamps = gameModelSelectionService\n              .get('local', state.game.model_selection);\n        let _move = ( R.path(['ui_state','flip_map'], state) ?\n                      flip_move :\n                      move\n                    );\n\n        return state.event('Game.command.execute',\n                           'onModels', [ _move+'Place',\n                                         [state.factions, small],\n                                         stamps\n                                       ]);\n      });\n      R.forEach(([move, keys, flip_move]) => {\n        keys = keys;\n        model_actions[move] = buildPlaceMove$(move, flip_move, false);\n        model_actions[move+'Small'] = buildPlaceMove$(move, flip_move, true);\n      }, moves);\n\n      let model_default_bindings = {\n        'endPlace': 'p',\n        'setTargetModel': 'shift+clickModel',\n        'setOriginModel': 'ctrl+clickModel'\n      };\n      let model_bindings = R.extend(Object.create(modelBaseModeService.bindings),\n                                    model_default_bindings);\n      let model_buttons = modelsModeService.buildButtons({ single: true,\n                                                           end_place: true\n                                                         });\n      let model_mode = {\n        onEnter: () => { },\n        onLeave: () => { },\n        name: 'ModelPlace',\n        actions: model_actions,\n        buttons: model_buttons,\n        bindings: model_bindings\n      };\n      modesService.registerMode(model_mode);\n      settingsService.register('Bindings',\n                               model_mode.name,\n                               model_default_bindings,\n                               (bs) => {\n                                 R.extend(model_mode.bindings, bs);\n                               });\n      return model_mode;\n    }\n  ]);\n"]}