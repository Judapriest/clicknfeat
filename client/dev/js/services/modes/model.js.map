{"version":3,"sources":["../../../es6/services/modes/model.js"],"names":[],"mappings":";;AAAA,OAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAChC,OAAO,CAAC,WAAW,EAAE,CACpB,OAAO,EACP,UAAU,EACV,YAAY,EACZ,eAAe,EACf,OAAO,EACP,MAAM,EACN,YAAY,EACZ,oBAAoB,EACpB,SAAS,uBAAuB,CAAC,YAAY,EACZ,eAAe,EACf,iBAAiB,EACjB,oBAAoB,EACpB,YAAY,EACZ,WAAW,EACX,iBAAiB,EACjB,yBAAyB,EAAE;AAC1D,MAAI,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;AAChE,eAAa,CAAC,WAAW,GAAG,UAAC,KAAK,EAAK;AACrC,QAAI,MAAM,GAAG,yBAAyB,CAC/B,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAChD,WAAO,CAAC,CAAC,WAAW,CAClB,YAAW;AACT,aAAO,KAAK,CAAC,KAAK,CAAC,sBAAsB,EACtB,UAAU,EAAE,CAAC,aAAa,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;KAC7D,EACD,YAAW;AACT,aAAO,KAAK,CAAC,KAAK,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;KACrD,CACF,EAAE,CAAC;GACL,CAAC;AACF,eAAa,CAAC,UAAU,GAAG,UAAC,KAAK,EAAK;AACpC,QAAI,MAAM,GAAG,yBAAyB,CAC/B,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAChD,WAAO,CAAC,CAAC,WAAW,CAClB,YAAW;AACT,aAAO,KAAK,CAAC,KAAK,CAAC,sBAAsB,EACtB,UAAU,EAAE,CAAE,YAAY,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;KAC7D,EACD,YAAW;AACT,aAAO,KAAK,CAAC,KAAK,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;KACpD,CACF,EAAE,CAAC;GACL,CAAC;;AAEF,MAAI,sBAAsB,GAAG;AAC3B,iBAAa,EAAE,GAAG;AAClB,gBAAY,EAAE,GAAG;GAClB,CAAC;AACF,MAAI,cAAc,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAC5C,sBAAsB,CAAC,CAAC;AACtD,MAAI,aAAa,GAAG,iBAAiB,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,IAAI;AACZ,gBAAY,EAAE,IAAI;AAClB,eAAW,EAAE,IAAI;GAClB,CAAC,CAAC;AACtD,MAAI,UAAU,GAAG;AACf,WAAO,EAAE,mBAAM,EAAG;AAClB,WAAO,EAAE,mBAAM,EAAG;AAClB,QAAI,EAAE,OAAO;AACb,WAAO,EAAE,aAAa;AACtB,WAAO,EAAE,aAAa;AACtB,YAAQ,EAAE,cAAc;GACzB,CAAC;AACF,cAAY,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;AACtC,iBAAe,CAAC,QAAQ,CAAC,UAAU,EACV,UAAU,CAAC,IAAI,EACf,sBAAsB,EACtB,UAAC,EAAE,EAAK;AACN,KAAC,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;GACnC,CAAC,CAAC;AAC5B,SAAO,UAAU,CAAC;CACnB,CACF,CAAC,CAAC","file":"model.js","sourcesContent":["angular.module('clickApp.services')\n  .factory('modelMode', [\n    'modes',\n    'settings',\n    'modelsMode',\n    'modelBaseMode',\n    'model',\n    'game',\n    'gameModels',\n    'gameModelSelection',\n    function modelModeServiceFactory(modesService,\n                                     settingsService,\n                                     modelsModeService,\n                                     modelBaseModeService,\n                                     modelService,\n                                     gameService,\n                                     gameModelsService,\n                                     gameModelSelectionService) {\n      let model_actions = Object.create(modelBaseModeService.actions);\n      model_actions.startCharge = (state) => {\n        let stamps = gameModelSelectionService\n              .get('local', state.game.model_selection);\n        return R.pipePromise(\n          function() {\n            return state.event('Game.command.execute',\n                               'onModels', ['startCharge', [], stamps]);\n          },\n          function() {\n            return state.event('Modes.switchTo', 'ModelCharge');\n          }\n        )();\n      };\n      model_actions.startPlace = (state) => {\n        let stamps = gameModelSelectionService\n              .get('local', state.game.model_selection);\n        return R.pipePromise(\n          function() {\n            return state.event('Game.command.execute',\n                               'onModels', [ 'startPlace', [], stamps]);\n          },\n          function() {\n            return state.event('Modes.switchTo', 'ModelPlace');\n          }\n        )();\n      };\n\n      let model_default_bindings = {\n        'startCharge': 'c',\n        'startPlace': 'p'\n      };\n      let model_bindings = R.extend(Object.create(modelBaseModeService.bindings),\n                                    model_default_bindings);\n      let model_buttons = modelsModeService.buildButtons({ single: true,\n                                                           start_charge: true,\n                                                           start_place: true\n                                                         });\n      let model_mode = {\n        onEnter: () => { },\n        onLeave: () => { },\n        name: 'Model',\n        actions: model_actions,\n        buttons: model_buttons,\n        bindings: model_bindings\n      };\n      modesService.registerMode(model_mode);\n      settingsService.register('Bindings',\n                               model_mode.name,\n                               model_default_bindings,\n                               (bs) => {\n                                 R.extend(model_mode.bindings, bs);\n                               });\n      return model_mode;\n    }\n  ]);\n"]}