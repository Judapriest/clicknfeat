{"version":3,"sources":["../../../es6/services/modes/terrain.js"],"names":[],"mappings":"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","file":"terrain.js","sourcesContent":["angular.module('clickApp.services')\n  .factory('terrainMode', [\n    'modes',\n    'settings',\n    'defaultMode',\n    'terrain',\n    'game',\n    'gameTerrains',\n    'gameTerrainSelection',\n    function terrainModeServiceFactory(modesService,\n                                       settingsService,\n                                       defaultModeService,\n                                       terrainService,\n                                       gameService,\n                                       gameTerrainsService,\n                                       gameTerrainSelectionService) {\n      let terrain_actions = Object.create(defaultModeService.actions);\n      function clearTerrainSelection(state) {\n        return state.event('Game.update', R.lensProp('terrain_selection'),\n                           gameTerrainSelectionService.clear$('local', state));\n      }\n      terrain_actions.modeBackToDefault = clearTerrainSelection;\n      terrain_actions.clickMap = clearTerrainSelection;\n      terrain_actions.rightClickMap = clearTerrainSelection;\n      terrain_actions.copySelection = (state) => {\n        let stamps = gameTerrainSelectionService\n              .get('local', state.game.terrain_selection);\n        return R.pipeP(\n          gameTerrainsService.copyStamps$(stamps),\n          (copy) => {\n            state.create.terrain = copy;\n            return state.event('Modes.switchTo','CreateTerrain');\n          }\n        )(state.game.terrains);\n      };\n      terrain_actions.delete = (state) => {\n        let stamps = gameTerrainSelectionService\n              .get('local', state.game.terrain_selection);\n        return state.event('Game.command.execute',\n                           'deleteTerrain', [stamps]);\n      };\n      terrain_actions.toggleLock = (state) => {\n        let stamps = gameTerrainSelectionService\n              .get('local', state.game.terrain_selection);\n        return R.pipeP(\n          () => {\n            return gameTerrainsService\n              .findStamp(stamps[0], state.game.terrains);\n          },\n          (terrain) => {\n            let is_locked = terrainService.isLocked(terrain);\n        \n            return state.event('Game.command.execute',\n                               'lockTerrains', [!is_locked, stamps]);\n          }\n        )();\n      };\n      let moves = [\n        ['moveFront', 'up'],\n        ['moveBack', 'down'],\n        ['rotateLeft', 'left'],\n        ['rotateRight', 'right'],\n      ];\n      R.forEach(([move]) => {\n        terrain_actions[move] = (state) => {\n          let stamps = gameTerrainSelectionService\n                .get('local', state.game.terrain_selection);\n          return state.event('Game.command.execute',\n                             'onTerrains', [ move, [false], stamps ]);\n        };\n        terrain_actions[move+'Small'] = (state) => {\n          let stamps = gameTerrainSelectionService\n                .get('local', state.game.terrain_selection);\n          return state.event('Game.command.execute',\n                             'onTerrains', [ move, [true], stamps ]);\n        };\n      }, moves);\n      let shifts = [\n        ['shiftUp', 'ctrl+up', 'shiftDown'],\n        ['shiftDown', 'ctrl+down', 'shiftUp'],\n        ['shiftLeft', 'ctrl+left', 'shiftRight'],\n        ['shiftRight', 'ctrl+right', 'shiftLeft'],\n      ];\n      R.forEach(([shift, key, flip_shift]) => {\n        key = key;\n        terrain_actions[shift] = (state) => {\n          let stamps = gameTerrainSelectionService\n                .get('local', state.game.terrain_selection);\n          let terrain_shift = ( R.path(['ui_state', 'flip_map'], state) ?\n                                flip_shift :\n                                shift\n                              );\n          return state.event('Game.command.execute',\n                             'onTerrains', [ terrain_shift, [false], stamps ]);\n        };\n        terrain_actions[shift+'Small'] = (state) => {\n          let stamps = gameTerrainSelectionService\n                .get('local', state.game.terrain_selection);\n          let terrain_shift = ( R.path(['ui_state', 'flip_map'], state) ?\n                                flip_shift :\n                                shift\n                              );\n          return state.event('Game.command.execute',\n                             'onTerrains', [ terrain_shift, [true], stamps ]);\n        };\n      }, shifts);\n\n      (() => {\n        let drag_terrain_start_state;\n        function updateStateWithDelta(event, state) {\n          let dx = event.now.x - event.start.x;\n          let dy = event.now.y - event.start.y;\n          state.x = drag_terrain_start_state.x + dx;\n          state.y = drag_terrain_start_state.y + dy;\n        }\n        terrain_actions.dragStartTerrain = (state, event) => {\n          if(terrainService.isLocked(event.target)) {\n            return self.Promise.reject('Terrain is locked');\n          }\n\n          drag_terrain_start_state = R.clone(event.target.state);\n          terrain_actions.dragTerrain(state, event);\n          return state\n            .event('Game.update', R.lensProp('terrain_selection'),\n                   gameTerrainSelectionService.set$('local', [event.target.state.stamp], state));\n        };\n        defaultModeService.actions.dragStartTerrain = terrain_actions.dragStartTerrain;\n        terrain_actions.dragTerrain = (state, event) => {\n          if(terrainService.isLocked(event.target)) {\n            return self.Promise.reject('Terrain is locked');\n          }\n\n          updateStateWithDelta(event, event.target.state);\n          state.changeEvent(`Game.terrain.change.${event.target.state.stamp}`);\n          return null;\n        };\n        terrain_actions.dragEndTerrain = (state, event) => {\n          if(terrainService.isLocked(event.target)) {\n            return self.Promise.reject('Terrain is locked');\n          }\n\n          event.target.state = R.clone(drag_terrain_start_state);\n          let end_state = R.clone(drag_terrain_start_state);\n          updateStateWithDelta(event, end_state);\n          return state.event('Game.command.execute',\n                             'onTerrains', [ 'setPosition',\n                                             [end_state],\n                                             [event.target.state.stamp]\n                                           ]);\n        };\n      })();\n\n      let terrain_default_bindings = {\n        'clickMap': 'clickMap',\n        'rightClickMap': 'rightClickMap',\n        'copySelection': 'ctrl+c',\n        'delete': 'del',\n        'toggleLock': 'l'\n      };\n      R.forEach(([move, keys]) => {\n        terrain_default_bindings[move] = keys;\n        terrain_default_bindings[move+'Small'] = 'shift+'+keys;\n      }, moves);\n      R.forEach(([shift, keys]) => {\n        terrain_default_bindings[shift] = keys;\n        terrain_default_bindings[shift+'Small'] = 'shift+'+keys;\n      }, shifts);\n      let terrain_bindings = R.extend(Object.create(defaultModeService.bindings),\n                                       terrain_default_bindings);\n      let terrain_buttons = [\n        [ 'Delete', 'delete' ],\n        [ 'Lock/Unlock', 'toggleLock' ],\n      ];\n      let terrain_mode = {\n        onEnter: () => { },\n        onLeave: () => { },\n        name: 'Terrain',\n        actions: terrain_actions,\n        buttons: terrain_buttons,\n        bindings: terrain_bindings\n      };\n      modesService.registerMode(terrain_mode);\n      settingsService.register('Bindings',\n                               terrain_mode.name,\n                               terrain_default_bindings,\n                               (bs) => {\n                                 R.extend(terrain_mode.bindings, bs);\n                               });\n      return terrain_mode;\n    }\n  ]);\n"]}