{"version":3,"sources":["../../../es6/services/model/geom.js"],"names":[],"mappings":"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","file":"geom.js","sourcesContent":["angular.module('clickApp.services')\n  .factory('modelGeom', [\n    'point',\n    'gameFactions',\n    function modelGeomServiceFactory(pointService,\n                                     gameFactionsService) {\n      return function(modelService) {\n        var modelGeomService = {\n          isBetweenPoints: function modelIsBetweenPoints(top_left, bottom_right, model) {\n            var x = R.path(['state','x'], model);\n            var y = R.path(['state','y'], model);\n            return ( top_left.x <= x && x <= bottom_right.x &&\n                     top_left.y <= y && y <= bottom_right.y\n                   );\n          },\n          shortestLineTo: function modelShortestLineTo(factions, other, model) {\n            var direction = pointService.directionTo(other.state, model.state);\n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                var start = pointService.translateInDirection(info.base_radius,\n                                                              direction,\n                                                              model.state);\n                return R.pipeP(\n                  gameFactionsService.getModelInfo$(other.state.info),\n                  (other_info) => {\n                    var end = pointService.translateInDirection(other_info.base_radius,\n                                                                direction+180,\n                                                                other.state);\n                    return { start: R.pick(['x','y'], start),\n                             end: R.pick(['x','y'], end)\n                           };\n                  }\n                )(factions);\n              }\n            )(factions);\n          },\n          baseEdgeInDirection: function modelBaseEdgeInDirection(factions, dir, model) {\n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                return R.pipe(\n                  pointService.translateInDirection$(info.base_radius, dir),\n                  R.pick(['x','y'])\n                )(model.state);\n              }\n            )(factions);\n          },\n          distanceTo: function modelDistanceTo(factions, other, model) {\n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                return R.pipeP(\n                  gameFactionsService.getModelInfo$(other.state.info),\n                  (other_info) => {\n                    return ( pointService.distanceTo(other.state, model.state) -\n                             info.base_radius -\n                             other_info.base_radius\n                           );\n                  }\n                )(factions);\n              }\n            )(factions);\n          },\n          distanceToAoE: function modelDistanceToAoE(factions, aoe, model) {\n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                var aoe_size = aoe.state.s;\n                return ( pointService.distanceTo(aoe.state, model.state) -\n                         info.base_radius -\n                         aoe_size\n                       );\n              }\n            )(factions);\n          },\n          setB2B: function modelSetB2B(factions, other, model) {\n            if(modelService.isLocked(model)) {\n              return self.Promise.reject('Model is locked');\n            }\n            var direction = pointService.directionTo(model.state, other.state); \n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                return R.pipeP(\n                  gameFactionsService.getModelInfo$(other.state.info),\n                  (other_info) => {\n                    var distance = info.base_radius + other_info.base_radius;\n                    var position = pointService.translateInDirection(distance, direction,\n                                                                     other.state);\n                    model = R.pipe(\n                      R.assocPath(['state','x'], position.x),\n                      R.assocPath(['state','y'], position.y)\n                    )(model);\n                    return modelService.checkState(factions, null, model);\n                  }\n                )(factions);\n              }\n            )(factions);\n          }\n        };\n        return modelGeomService;\n      };\n    }\n  ]);\n"]}