{"version":3,"sources":["game.es6"],"names":[],"mappings":"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","file":"game.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('appGame', stateGameModelFactory);\n\n  stateGameModelFactory.$inject = [\n    'behaviours',\n    'appAction',\n    'appGames',\n    'appModes',\n    'appState',\n    'appUser',\n    'game',\n    'gameConnection',\n    'games',\n    // 'fileExport',\n    // 'fileImport',\n    // 'appState',\n    // 'state',\n    // 'modes',\n    // 'gameBoard',\n    // 'gameFactions',\n    // 'gameModels',\n    // 'gameModelSelection',\n    // 'gameScenario',\n    // 'gameTerrains',\n    // 'gameTemplates',\n    // 'gameTemplateSelection',\n    // 'gameTerrainSelection',\n    // 'allCommands',\n  ];\n  function stateGameModelFactory(behavioursModel,\n                                 appActionService,\n                                 appGamesService,\n                                 appModesService,\n                                 appStateService,\n                                 appUserService,\n                                 gameModel,\n                                 gameConnectionModel,\n                                 gamesModel\n                                 // fileExportService,\n                                 // fileImportService,\n                                 // appStateService,\n                                 // stateModel,\n                                 // modesModel,\n                                 // gameBoardModel,\n                                 // gameFactionsModel,\n                                 // gameModelsModel,\n                                 // gameModelSelectionModel,\n                                 // gameScenarioModel,\n                                 // gameTerrainsModel,\n                                 // gameTemplatesModel,\n                                 // gameTemplateSelectionModel,\n                                 // gameTerrainSelectionModel\n  ) {\n    const GAME_LENS = R.lensProp('game');\n    const USER_NAME_LENS = R.lensPath(['user','state','name']);\n\n    const game = appStateService.state\n            .map(R.viewOr({}, GAME_LENS));\n    const loading = behavioursModel.signalModel.create();\n    const view = behavioursModel.signalModel.create();\n\n    const appGameService = {\n      game, loading, view,\n      set: actionGameSet,\n      load: actionGameLoad,\n      loadDataReady: actionGameLoadDataReady,\n      loadDataLoaded: actionGameLoadDataLoaded,\n      loadGameLoaded: actionGameLoadGameLoaded,\n      connectionClose: actionGameConnectionClose,\n      // onCommandExecute: stateGameOnCommandExecute,\n      // onCommandUndo: stateGameOnCommandUndo,\n      // onCommandUndoLast: stateGameOnCommandUndoLast,\n      // onCommandReplay: stateGameOnCommandReplay,\n      // onCommandReplayNext: stateGameOnCommandReplayNext,\n      // onCommandReplayBatch: stateGameOnCommandReplayBatch,\n      // onSetCmds: stateGameOnSetCmds,\n      // onSetPlayers: stateGameOnSetPlayers,\n      // onNewChatMsg: stateGameOnNewChatMsg,\n      // onUiStateFlip: stateGameOnUiStateFlip,\n      // onInvitePlayer: stateGameOnInvitePlayer,\n      // onModelCreate: stateGameOnModelCreate,\n      // onModelCopy: stateGameOnModelCopy,\n      // onModelImportList: stateGameOnModelImportList,\n      // onModelImportFile: stateGameOnModelImportFile,\n      // onModelImportFileData: stateGameOnModelImportFileData,\n      // onTemplateCreate: stateGameOnTemplateCreate,\n      // onTerrainCreate: stateGameOnTerrainCreate,\n      // onTerrainReset: stateGameOnTerrainReset,\n      // onBoardSet: stateGameOnBoardSet,\n      // onBoardSetRandom: stateGameOnBoardSetRandom,\n      // onBoardImportFile: stateGameOnBoardImportFile,\n      // onScenarioSet: stateGameOnScenarioSet,\n      // onScenarioSetRandom: stateGameOnScenarioSetRandom,\n      // onScenarioRefresh: stateGameOnScenarioRefresh,\n      // onScenarioGenerateObjectives: stateGameOnScenarioGenerateObjectives,\n      // updateExport: stateGameUpdateExport,\n      // updateBoardExport: stateGameUpdateBoardExport,\n      // updateModelsExport: stateGameUpdateModelsExport,\n      // saveCurrent: stateGameSaveCurrent,\n      // checkMode: stateGameCheckMode,\n      // closeOsd: stateGameCloseOsd\n    };\n    R.curryService(appGameService);\n\n    mount();\n\n    return appGameService;\n\n    function mount() {\n      appActionService\n        // .register('Game.update'              , actionGameUpdate)\n        .register('Game.set'                 , actionGameSet)\n        .register('Game.load'                , actionGameLoad)\n        .register('Game.load.dataReady'      , actionGameLoadDataReady)\n        .register('Game.load.dataLoaded'     , actionGameLoadDataLoaded)\n        .register('Game.load.gameLoaded'     , actionGameLoadGameLoaded)\n        .register('Game.connection.close'    , actionGameConnectionClose)\n        // .register('Game.command.execute'     , actionGameCommandExecute)\n        // .register('Game.command.undo'        , actionGameCommandUndo)\n        // .register('Game.command.replay'      , actionGameCommandReplay)\n        // .register('Game.command.replayBatch' , actionGameCommandReplayBatch)\n        // .register('Game.command.undoLast'    , actionGameCommandUndoLast)\n        // .register('Game.command.replayNext'  , actionGameCommandReplayNext)\n        // .register('Game.invitePlayer'        , actionGameInvitePlayer)\n        // .register('Game.setCmds'             , actionGameSetCmds)\n        // .register('Game.setPlayers'          , actionGameSetPlayers)\n        // .register('Game.newChatMsg'          , actionGameNewChatMsg)\n        // .register('Game.uiState.flip'        , actionGameUiStateFlip)\n        // .register('Game.board.set'           , actionGameBoardSet)\n        // .register('Game.board.setRandom'     , actionGameBoardSetRandom)\n        // .register('Game.scenario.set'        , actionGameScenarioSet)\n        // .register('Game.scenario.setRandom'  , actionGameScenarioSetRandom)\n        // .register('Game.scenario.generateObjectives',\n        //             actionGameScenarioGenerateObjectives)\n        // .register('Game.model.create'        , actionGameModelCreate)\n        // .register('Game.model.copy'          , actionGameModelCopy)\n        // .register('Game.model.importList'    , actionGameModelImportList)\n        // .register('Game.model.importFile'    , actionGameModelImportFile)\n        // .register('Game.model.importFileData', actionGameModelImportFileData)\n        // .register('Game.template.create'     , actionGameTemplateCreate)\n        // .register('Game.terrain.create'      , actionGameTerrainCreate)\n        // .register('Game.terrain.reset'       , actionGameTerrainReset)\n      // .register('Game.board.importFile'    , actionGameBoardImportFile)\n      ;\n        // .addListener('Game.change'             , stateGameModel.saveCurrent)\n        // .addListener('Modes.change',\n        //              stateGameModel.closeOsd)\n        // .addListener('Game.template_selection.local.change',\n        //              stateGameModel.checkMode)\n        // .addListener('Game.terrain_selection.local.change',\n        //              stateGameModel.checkMode)\n        // .addListener('Game.model_selection.local.change',\n        //              stateGameModel.checkMode);\n        // .addReducer('Game.scenario.refresh'    , stateGameModel.onScenarioRefresh)\n\n      // const game_export_cell = appStateService\n      //         .cell('Game.change',\n      //               stateGameModel.updateExport,\n      //               {});\n      // const board_export_cell = appStateService\n      //         .cell([ 'Game.board.change',\n      //                 'Game.terrains.change' ],\n      //               stateGameModel.updateBoardExport,\n      //               {});\n      // const models_export_cell = appStateService\n      //         .cell([ 'Game.models.change',\n      //                 'Game.model_selection.local.change' ],\n      //               stateGameModel.updateModelsExport,\n      //               {});\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.layers.change',\n      //             R.pipe(R.defaultTo({}), R.prop('layers')));\n      // appStateService\n      //   .onChange('AppState.change',\n      //             'Modes.change',\n      //             R.path(['modes','current','name']));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.command.change',\n      //             [ R.prop('commands'),\n      //               R.prop('commands_log'),\n      //               R.prop('undo'),\n      //               R.prop('undo_log')\n      //             ]);\n      // appStateService\n      //   .onChange('AppState.change',\n      //             'Game.view.flipMap',\n      //             R.pipe(R.view(UI_STATE_LENS), R.prop('flipped')));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.dice.change',\n      //             R.prop('dice'));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.board.change',\n      //             R.prop('board'));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.scenario.change',\n      //             R.prop('scenario'));\n      // appStateService\n      //   .onChange('AppState.change',\n      //             'Create.base.change',\n      //             R.path(['create','base']));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.models.change',\n      //             R.prop(['models']));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.model_selection.change',\n      //             R.prop('model_selection'));\n      // appStateService\n      //   .onChange('Game.model_selection.change',\n      //             'Game.model_selection.local.change',\n      //             R.prop('local'));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.templates.change',\n      //             R.prop(['templates']));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.template_selection.change',\n      //             R.prop('template_selection'));\n      // appStateService\n      //   .onChange('Game.template_selection.change',\n      //             'Game.template_selection.local.change',\n      //             R.prop('local'));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.terrains.change',\n      //             R.prop(['terrains']));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.terrain_selection.change',\n      //             R.prop('terrain_selection'));\n      // appStateService\n      //   .onChange('Game.terrain_selection.change',\n      //             'Game.terrain_selection.local.change',\n      //             R.prop('local'));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.ruler.remote.change',\n      //             R.path(['ruler','remote']));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.ruler.local.change',\n      //             R.path(['ruler','local']));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.los.remote.change',\n      //             R.path(['los','remote']));\n      // appStateService\n      //   .onChange('Game.change',\n      //             'Game.los.local.change',\n      //             R.path(['los','local']));\n    }\n    // function stateGameOnUpdate(state, _event_, [fn]) {\n    //   return R.over(GAME_LENS, fn, state);\n    // }\n    function actionGameSet(state, game) {\n      return R.set(GAME_LENS, game, state);\n    }\n    function actionGameLoad(_state_, is_online, is_private, id) {\n      return waitForDataReady().then(() => {\n        return appActionService\n          .do('Game.load.dataReady', is_online, is_private, id);\n      });\n\n      function waitForDataReady() {\n        return R.allP([\n          // state.data_ready,\n          appUserService.ready,\n          appGamesService.ready\n        ]);\n      }\n    }\n    function actionGameLoadDataReady(state, is_online, is_private, id) {\n      return R.threadP()(\n        R.ifElse(\n          () => is_online,\n          () => gamesModel.loadOnlineGameP(is_private, id),\n          () => gamesModel.loadLocalGameP(id, state.local_games)\n        ),\n        (data) => appActionService\n          .do('Game.load.dataLoaded', data)\n      );\n    }\n    function actionGameLoadDataLoaded(state, data) {\n      loading.send(true);\n      R.threadP(data)(\n        gameModel.loadP,\n        (game) => appActionService\n          .do('Game.load.gameLoaded', game)\n      );\n      return appModesService.reset(state);\n    }\n    function actionGameLoadGameLoaded(state, game) {\n      loading.send(false);\n      const user = R.view(USER_NAME_LENS, state);\n      return R.threadP(game)(\n        R.when(\n          gameModel.isOnline,\n          gameConnectionModel.openP$(user)\n        ),\n        (game) => appActionService\n          .do('Game.set', game)\n      );\n    }\n    function actionGameConnectionClose(state) {\n      return R.over(\n        GAME_LENS,\n        gameConnectionModel.cleanup,\n        state\n      );\n    }\n    // function stateGameOnCommandExecute(state, _event_, [cmd, args]) {\n    //   return R.threadP(state.game)(\n    //     gameModel.executeCommandP$(cmd, args),\n    //     (game) => appStateService.reduce('Game.set', game)\n    //   ).catch((error) => appStateService.emit('Game.error', error));\n    // }\n    // function stateGameOnCommandUndo(state, _event_, [cmd]) {\n    //   return R.threadP(state.game)(\n    //     gameModel.undoCommandP$(cmd),\n    //     (game) => appStateService.reduce('Game.set', game)\n    //   ).catch((error) => appStateService.emit('Game.error', error));\n    // }\n    // function stateGameOnCommandUndoLast(state, _event_) {\n    //   return R.threadP(state.game)(\n    //     gameModel.undoLastCommandP,\n    //     (game) => appStateService.reduce('Game.set', game)\n    //   ).catch((error) => appStateService.emit('Game.error', error));\n    // }\n    // function stateGameOnCommandReplay(state, _event_, [cmd]) {\n    //   return R.threadP(state.game)(\n    //     gameModel.replayCommandP$(cmd),\n    //     (game) => appStateService.reduce('Game.set', game)\n    //   ).catch((error) => appStateService.emit('Game.error', error));\n    // }\n    // function stateGameOnCommandReplayBatch(state, _event_, [cmds]) {\n    //   return R.threadP(state.game)(\n    //     gameModel.replayCommandsBatchP$(cmds),\n    //     (game) => appStateService.reduce('Game.set', game)\n    //   ).catch((error) => appStateService.emit('Game.error', error));\n    // }\n    // function stateGameOnCommandReplayNext(state, _event_) {\n    //   return R.threadP(state.game)(\n    //     gameModel.replayNextCommandP,\n    //     (game) => appStateService.reduce('Game.set', game)\n    //   ).catch((error) => appStateService.emit('Game.error', error));\n    // }\n    // function stateGameOnSetCmds(state, _event_, [set]) {\n    //   return R.over(\n    //     GAME_LENS,\n    //     R.assoc(set.where, set.cmds),\n    //     state\n    //   );\n    // }\n    // function stateGameOnSetPlayers(state, _event_, [players]) {\n    //   return R.over(\n    //     GAME_LENS,\n    //     R.assoc('players', players),\n    //     state\n    //   );\n    // }\n    // function stateGameOnNewChatMsg(state, _event_, [msg]) {\n    //   return R.over(\n    //     GAME_LENS,\n    //     R.over(R.lensProp('chat'),\n    //            R.compose(R.append(msg.chat), R.defaultTo([]))),\n    //     state\n    //   );\n    // }\n    // function stateGameOnUiStateFlip(state) {\n    //   return R.over(\n    //     UI_STATE_LENS,\n    //     R.over(R.lensProp('flipped'), R.not),\n    //     state\n    //   );\n    // }\n    // function stateGameOnInvitePlayer(state, _event_, to) {\n    //   const msg = [\n    //     s.capitalize(R.pathOr('Unknown', ['user','state','name'], state)),\n    //     'has invited you to join a game'\n    //   ].join(' ');\n    //   const link = self.window.location.hash;\n    //   console.log('Invite player', to, msg, link);\n\n    //   appStateService\n    //     .chainReduce('User.sendChatMsg',\n    //                  { to: [to], msg: msg, link: link });\n    // }\n    // function stateGameOnModelCreate(state, _event_, [model_path, repeat]) {\n    //   appStateService.chainReduce('Modes.switchTo', 'CreateModel');\n    //   return R.assoc('create', {\n    //     base: { x: 240, y: 240, r: 0 },\n    //     models: R.times((i) => ({\n    //       info: model_path,\n    //       x: 20*i, y: 0, r: 0\n    //     }), R.defaultTo(1, repeat))\n    //   }, state);\n    // }\n    // function stateGameOnModelCopy(state, _event_, [create]) {\n    //   appStateService.chainReduce('Modes.switchTo', 'CreateModel');\n    //   return R.assoc('create', create, state);\n    // }\n    // function stateGameOnModelImportList(state, _event_, [list]) {\n    //   const user = R.pathOr('Unknown', ['user','state','name'], state);\n    //   appStateService.chainReduce('Modes.switchTo', 'CreateModel');\n    //   return R.assoc(\n    //     'create',\n    //     gameFactionsModel.buildModelsList(list, user, state.factions.references),\n    //     state\n    //   );\n    // }\n    // function stateGameOnModelImportFile(_state_, _event_, [file]) {\n    //   return R.threadP(file)(\n    //     fileImportService.readP$('json'),\n    //     (create) => {\n    //       appStateService.reduce('Game.model.importFileData', create);\n    //     }\n    //   ).catch(error => appStateService.emit('Game.error', error));\n    // }\n    // function stateGameOnModelImportFileData(state, _event_, [create]) {\n    //   appStateService.chainReduce('Modes.switchTo', 'CreateModel');\n    //   return R.assoc('create', create, state);\n    // }\n    // // function stateGameOnModelSelectionLocalChange(state, _event_) {\n    // //   // console.warn('onModelSelectionLocalChange', arguments);\n    // //   const local_model_selection = gameModelSelectionModel\n    // //           .get('local', state.game.model_selection);\n    // //   const length = R.length(local_model_selection);\n    // //   const previous_selection = R.path(['_model_selection_listener','stamp'], state);\n    // //   if(length === 1 &&\n    // //      local_model_selection[0] === previous_selection) {\n    // //     return;\n    // //   }\n    // //   cleanupModelSelectionListener(state);\n    // //   if(length === 1) {\n    // //     setupModelSelectionListener(local_model_selection[0], state);\n    // //   }\n    // //   else {\n    // //     appStateService.emit('Game.model.selection.local.updateSingle',\n    // //                             null, null);\n    // //   }\n    // // }\n    // // function setupModelSelectionListener(stamp, state) {\n    // //   // console.warn('setupModelSelectionListener', arguments);\n    // //   state._model_selection_listener = {\n    // //     stamp: stamp,\n    // //     unsubscribe: state\n    // //       .onChangeEvent(`Game.model.change.${stamp}`,\n    // //                      onModelSelectionChange(stamp, state))\n    // //   };\n    // // }\n    // // function onModelSelectionChange(stamp, state) {\n    // //   return () => {\n    // //     // console.warn('onModelSelectionChange', arguments);\n    // //     return R.threadP(state.game)(\n    // //       R.prop('models'),\n    // //       gameModelsModel.findStampP$(stamp),\n    // //       (model) => {\n    // //         appStateService.emit('Game.model.selection.local.updateSingle',\n    // //                                 stamp, model);\n    // //       }\n    // //     );\n    // //   };\n    // // }\n    // // function cleanupModelSelectionListener(state) {\n    // //   // console.warn('cleanupModelSelectionListener', arguments);\n    // //   const unsubscribe = R.thread(state)(\n    // //     R.path(['_model_selection_listener','unsubscribe']),\n    // //     R.defaultTo(() => {})\n    // //   );\n    // //   unsubscribe();\n    // //   state._model_selection_listener = {};\n    // // }\n    // function stateGameOnTemplateCreate(state, _event_, [type]) {\n    //   appStateService.chainReduce('Modes.switchTo', 'CreateTemplate');\n    //   return R.assoc('create', {\n    //     base: { x: 240, y: 240, r: 0 },\n    //     templates: [ { type: type, x: 0, y: 0, r: 0 } ]\n    //   }, state);\n    // }\n    // // function stateGameOnTemplateSelectionLocalChange(state, _event_) {\n    // //   console.warn('onTemplateSelectionLocalChange', arguments);\n    // //   const local_template_selection = gameTemplateSelectionModel\n    // //           .get('local', state.game.template_selection);\n    // //   const length = R.length(local_template_selection);\n    // //   const previous_selection =\n    // //           R.path(['_template_selection_listener','stamp'], state);\n    // //   if(length === 1 &&\n    // //      local_template_selection[0] === previous_selection) {\n    // //     return;\n    // //   }\n    // //   cleanupTemplateSelectionListener(state);\n    // //   if(length === 1) {\n    // //     setupTemplateSelectionListener(local_template_selection[0], state);\n    // //   }\n    // //   else {\n    // //     appStateService.emit('Game.template.selection.local.updateSingle',\n    // //                             null, null);\n    // //   }\n    // // }\n    // // function setupTemplateSelectionListener(stamp, state) {\n    // //   console.warn('setupTemplateSelectionListener', arguments);\n    // //   state._template_selection_listener = {\n    // //     stamp: stamp,\n    // //     unsubscribe: state\n    // //       .onChangeEvent(`Game.template.change.${stamp}`,\n    // //                      onTemplateSelectionChange(stamp, state))\n    // //   };\n    // // }\n    // // function onTemplateSelectionChange(stamp, state) {\n    // //   return () => {\n    // //     console.warn('onTemplateSelectionChange', arguments);\n    // //     return R.threadP(state.game)(\n    // //       R.prop('templates'),\n    // //       gameTemplatesModel.findStampP$(stamp),\n    // //       (template) => {\n    // //         appStateService.emit('Game.template.selection.local.updateSingle',\n    // //                                 stamp, template);\n    // //       }\n    // //     );\n    // //   };\n    // // }\n    // // function cleanupTemplateSelectionListener(state) {\n    // //   console.warn('cleanupTemplateSelectionListener', arguments);\n    // //   const unsubscribe = R.thread(state)(\n    // //     R.path(['_template_selection_listener','unsubscribe']),\n    // //     R.defaultTo(() => {})\n    // //   );\n    // //   unsubscribe();\n    // //   state._template_selection_listener = {};\n    // // }\n    // function stateGameOnTerrainCreate(state, _event_, [path]) {\n    //   appStateService.chainReduce('Modes.switchTo', 'CreateTerrain');\n    //   return R.assoc('create', {\n    //     base: { x: 240, y: 240, r: 0 },\n    //     terrains: [ {\n    //       info: path,\n    //       x: 0, y: 0, r: 0\n    //     } ]\n    //   }, state);\n    // }\n    // function stateGameOnTerrainReset(state) {\n    //   return R.threadP(state)(\n    //     R.view(GAME_LENS),\n    //     R.prop('terrains'),\n    //     gameTerrainsModel.all,\n    //     R.pluck('state'),\n    //     R.pluck('stamp'),\n    //     (stamps) => {\n    //       appStateService.reduce('Game.command.execute',\n    //                              'deleteTerrain', [stamps]);\n    //     }\n    //   ).catch((error) => appStateService.emit('Game.error', error));\n    // }\n    // function stateGameOnBoardSet(state, _event_, [name]) {\n    //   const board = gameBoardModel.forName(name, state.boards);\n    //   self.window.requestAnimationFrame(() => {\n    //     appStateService.reduce('Game.command.execute',\n    //                            'setBoard', [board]);\n    //   });\n    // }\n    // function stateGameOnBoardSetRandom(state, _event_) {\n    //   let board, name = gameBoardModel.name(state.game.board);\n    //   while(name === gameBoardModel.name(state.game.board)) {\n    //     board = state.boards[R.randomRange(0, state.boards.length-1)];\n    //     name = gameBoardModel.name(board);\n    //   }\n    //   self.window.requestAnimationFrame(() => {\n    //     appStateService.reduce('Game.command.execute',\n    //                            'setBoard', [board]);\n    //   });\n    // }\n    // function stateGameOnBoardImportFile(_state_, _event_, [file]) {\n    //   R.threadP(file)(\n    //     fileImportService.readP$('json'),\n    //     R.spyWarn('import'),\n    //     R.tap(R.pipe(\n    //       R.prop('board'),\n    //       R.rejectIfP(R.isNil, 'No board'),\n    //       R.spyWarn('import'),\n    //       (board) => {\n    //         appStateService\n    //           .chainReduce('Game.command.execute',\n    //                        'setBoard', [board]);\n    //       }\n    //     )),\n    //     R.tap((data) => R.thread(data)(\n    //       R.path(['terrain', 'terrains']),\n    //       R.rejectIfP(R.isEmpty, 'No terrain'),\n    //       R.spyWarn('import', data),\n    //       () => {\n    //         appStateService\n    //           .chainReduce('Game.terrain.reset');\n    //         appStateService\n    //           .chainReduce('Game.command.execute',\n    //                        'createTerrain', [data.terrain, false]);\n    //       }\n    //     ))\n    //   ).catch(R.spyAndDiscardError('Import board file'));\n    // }\n    // function stateGameOnScenarioSet(_state_, _event_, [name, group]) {\n    //   const scenario = gameScenarioModel.forName(name, group);\n    //   self.window.requestAnimationFrame(() => {\n    //     appStateService.reduce('Game.command.execute',\n    //                            'setScenario', [scenario]);\n    //   });\n    // }\n    // function stateGameOnScenarioSetRandom(state, _event_) {\n    //   const group = gameScenarioModel.group('SR15', state.scenarios);\n    //   let scenario, name = gameScenarioModel.name(state.game.scenario);\n    //   while(name === gameScenarioModel.name(state.game.scenario)) {\n    //     scenario = group[1][R.randomRange(0, group[1].length-1)];\n    //     name = gameScenarioModel.name(scenario);\n    //   }\n    //   self.window.requestAnimationFrame(() => {\n    //     appStateService.reduce('Game.command.execute',\n    //                            'setScenario', [scenario]);\n    //   });\n    // }\n    // // function stateGameOnScenarioRefresh(state, _event_) {\n    // //   appStateService.emit('Game.scenario.refresh');\n    // // }\n    // function stateGameOnScenarioGenerateObjectives(state, _event_) {\n    //   R.thread(state.game)(\n    //     deleteCurrentObjectives,\n    //     () => gameScenarioModel\n    //       .createObjectives(state.game.scenario),\n    //     (objectives) => {\n    //       const is_flipped = R.path(['ui_state','flip_map'], state);\n    //       return appStateService\n    //         .chainReduce('Game.command.execute',\n    //                      'createModel',\n    //                      [objectives, is_flipped]);\n    //     }\n    //   ).catch(gameModel.actionError$(state));\n\n    //   function deleteCurrentObjectives(game) {\n    //     return R.threadP(game)(\n    //       R.prop('models'),\n    //       gameModelsModel.all,\n    //       R.filter(R.pipe(\n    //         R.path(['state','info']),\n    //         R.head,\n    //         R.equals('scenario')\n    //       )),\n    //       R.map(R.path(['state','stamp'])),\n    //       R.unless(\n    //         R.isEmpty,\n    //         (stamps) => {\n    //           appStateService\n    //             .chainReduce('Game.command.execute',\n    //                          'deleteModel', [stamps]);\n    //         }\n    //       )\n    //     );\n    //   }\n    // }\n    // function stateGameUpdateExport(exp, current_game) {\n    //   fileExportService.cleanup(exp.url);\n    //   return {\n    //     name: 'clicknfeat_game.json',\n    //     url: fileExportService.generate('json', current_game)\n    //   };\n    // }\n    // function stateGameSaveCurrent(_event_, [game]) {\n    //   if(R.isNil(R.prop('local_stamp', R.defaultTo({}, game)))) {\n    //     return;\n    //   }\n    //   self.window.requestAnimationFrame(() => {\n    //     appStateService.reduce('Games.local.update', game);\n    //   });\n    // }\n    // function stateGameUpdateModelsExport(exp) {\n    //   fileExportService.cleanup(exp.url);\n    //   const state = appStateService.current();\n    //   const data = R.thread(state)(\n    //      R.path(['game','model_selection']),\n    //      gameModelSelectionModel.get$('local'),\n    //      gameModelsModel\n    //        .copyStamps$(R.__, R.path(['game', 'models'], state))\n    //   );\n    //   return {\n    //     name: 'clicknfeat_models.json',\n    //     url: fileExportService.generate('json', data)\n    //   };\n    // }\n    // function stateGameUpdateBoardExport(exp) {\n    //   fileExportService.cleanup(exp.url);\n    //   const state = appStateService.current();\n    //   const data = R.thread(state)(\n    //     R.prop('game'),\n    //     (game) => ({\n    //       board: game.board,\n    //       terrain: {\n    //         base: { x: 0, y: 0, r: 0 },\n    //         terrains: R.thread(game.terrains)(\n    //           gameTerrainsModel.all,\n    //           R.pluck('state'),\n    //           R.map(R.pick(['x','y','r','info','lk']))\n    //         )\n    //       }\n    //     })\n    //   );\n    //   return {\n    //     name: 'clicknfeat_board.json',\n    //     url: fileExportService.generate('json', data)\n    //   };\n    // }\n    // function stateGameCheckMode() {\n    //   const state = appStateService.current();\n    //   const game = R.propOr({}, 'game', state);\n    //   const current_mode = modesModel.currentModeName(state.modes);\n    //   const mode = R.thread()(\n    //     () => gameTerrainSelectionModel\n    //       .checkMode(R.propOr({}, 'terrain_selection', game)),\n    //     R.unless(\n    //       R.exists,\n    //       () => gameTemplateSelectionModel\n    //         .checkMode(R.propOr({}, 'template_selection', game))\n    //     ),\n    //     R.unless(\n    //       R.exists,\n    //       () => gameModelSelectionModel\n    //         .checkMode(game.models, R.propOr({}, 'model_selection', game))\n    //     ),\n    //     R.defaultTo('Default')\n    //   );\n    //   if(R.exists(mode) &&\n    //      mode !== current_mode) {\n    //     appStateService.chainReduce('Modes.switchTo', mode);\n    //   }\n    // }\n    // function stateGameCloseOsd() {\n    //   appStateService.emit('Game.selectionDetail.close');\n    //   appStateService.emit('Game.editDamage.close');\n    //   appStateService.emit('Game.editLabel.close');\n    // }\n  }\n})();\n"]}