{"version":3,"sources":["data.es6"],"names":[],"mappings":"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","file":"data.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('appData', appDataServiceFactory);\n\n  appDataServiceFactory.$inject = [\n    'appAction',\n    'appState',\n    // 'fileExport',\n    // 'fileImport',\n    // 'settings',\n    'gameBoard',\n    'gameFactions',\n    'gameScenario',\n    'gameTerrainInfo',\n    // 'appState',\n    // 'state',\n  ];\n  function appDataServiceFactory(appActionService,\n                                 appStateService,\n                                 // fileExportService,\n                                 // fileImportService,\n                                 // settingsModel,\n                                 gameBoardModel,\n                                 gameFactionsModel,\n                                 gameScenarioModel,\n                                 gameTerrainInfoModel) {\n    // appStateService,\n    // stateModel\n                                // ) {\n    const BOARDS_LENS = R.lensProp('boards');\n    const FACTIONS_LENS = R.lensProp('factions');\n    const SCENARIOS_LENS = R.lensProp('scenarios');\n    // const SETTINGS_LENS = R.lensProp('settings');\n    const TERRAINS_LENS = R.lensProp('terrains');\n\n    const boards = appStateService.state\n            .map(R.viewOr([], BOARDS_LENS));\n    const factions = appStateService.state\n            .map(R.viewOr({}, FACTIONS_LENS));\n    const scenarios = appStateService.state\n            .map(R.viewOr({}, SCENARIOS_LENS));\n    const terrains = appStateService.state\n            .map(R.viewOr({}, TERRAINS_LENS));\n\n    const appDataService = {\n      boards, factions, scenarios, terrains,\n      boardsSet: actionDataBoardsSet,\n      factionsSet: actionDataFactionsSet,\n      scenariosSet: actionDataScenariosSet,\n      // onSettingsSet: actionDataSettingsSet,\n      terrainsSet: actionDataTerrainsSet,\n      // onSettingsLoadFile: actionDataSettingsLoadFile,\n      // onSettingsReset: actionDataSettingsReset,\n      // settingsStoreCurrent: stateDataSettingsStoreCurrent,\n      // settingsUpdateExport: stateDataSettingsUpdateExport,\n      // onFactionsLoadDescFile: actionDataFactionsLoadDescFile,\n      // onFactionsClearDesc: actionDataFactionsClearDesc,\n      // onFactionsClearAllDesc: actionDataFactionsClearAllDesc,\n      // onFactionsUpdateDesc: actionDataFactionsUpdateDesc,\n      // factionsStoreDesc: stateDataFactionsStoreDesc\n    };\n    R.curryService(appDataService);\n\n    mount();\n\n    return appDataService;\n\n    function mount() {\n      appActionService\n        .register('Boards.set'               , actionDataBoardsSet)\n        .register('Factions.set'             , actionDataFactionsSet)\n        .register('Scenarios.set'            , actionDataScenariosSet)\n        .register('Terrains.set'             , actionDataTerrainsSet)\n        // .register('Settings.set'             , actionDataSettingsSet)\n        // .register('Settings.loadFile'        , actionDataSettingsLoadFile)\n        // .register('Settings.reset'           , actionDataSettingsReset)\n        // .register('Factions.loadDescFile'    , actionDataFactionsLoadDescFile)\n        // .register('Factions.updateDesc'      , actionDataFactionsUpdateDesc)\n        // .register('Factions.clearDesc'       , actionDataFactionsClearDesc)\n        // .register('Factions.clearAllDesc'    , actionDataFactionsClearAllDesc)\n      ;\n        // .addListener('Factions.desc.change'    , actionDatactionsStoreDesc)\n        // .addListener('Settings.current.change' , actionDatattingsStoreCurrent);\n\n      const boards_ready = gameBoardModel.initP()\n              .then((boards) => appActionService.do('Boards.set', boards));\n      const factions_ready = gameFactionsModel.initP()\n              .then((factions) => appActionService.do('Factions.set', factions));\n      const scenarios_ready = gameScenarioModel.initP()\n              .then((scenarios) => appActionService.do('Scenarios.set', scenarios));\n      const terrains_ready = gameTerrainInfoModel.initP()\n              .then((terrains) => appActionService.do('Terrains.set', terrains));\n      // const settings_ready = settingsModel.initP()\n      //         .then((settings) => appActionService.do('Settings.set', settings));\n\n      appDataService.ready = R.allP([\n        boards_ready,\n        factions_ready,\n        scenarios_ready,\n        // settings_ready,\n        terrains_ready,\n      ]);\n    }\n    function actionDataBoardsSet(state, boards) {\n      return R.set(BOARDS_LENS, boards, state);\n    }\n    function actionDataFactionsSet(state, factions) {\n      return R.set(FACTIONS_LENS, factions, state);\n    }\n    function actionDataScenariosSet(state, scenarios) {\n      return R.set(SCENARIOS_LENS, scenarios, state);\n    }\n    // function actionDataSettingsSet(state, settings) {\n    //   return R.set(SETTINGS_LENS, settings, state);\n    // }\n    function actionDataTerrainsSet(state, terrains) {\n      return R.set(TERRAINS_LENS, terrains, state);\n    }\n    // function actionDataSettingsLoadFile(_state_, file) {\n    //   return R.threadP(file)(\n    //     fileImportService.readP$('json'),\n    //     settingsModel.bind,\n    //     settingsModel.update,\n    //     (settings) => {\n    //       appActionService.do('Settings.set', settings);\n    //       appStateService.emit('Settings.loadFile', 'Settings loaded');\n    //     }\n    //   ).catch((error) => {\n    //     appStateService.emit('Settings.loadFile', error);\n    //   });\n    // }\n    // function actionDataSettingsReset(state, data) {\n    //   return R.thread(data)(\n    //     settingsModel.bind,\n    //     settingsModel.update,\n    //     (settings) => R.set(SETTINGS_LENS, settings, state)\n    //   );\n    // }\n    // function actionDataFactionsLoadDescFile(_state_, faction, file) {\n    //   return R.threadP(file)(\n    //     fileImportService.readP$('json'),\n    //     (desc) => {\n    //       appStateService\n    //         .reduce('Factions.updateDesc', faction, desc);\n    //       appStateService\n    //         .emit('Factions.loadDescFile', 'File loaded');\n    //     }\n    //   ).catch((error) => {\n    //     appStateService.emit('Factions.loadDescFile', error);\n    //   });\n    // }\n    // function actionDataFactionsUpdateDesc(state, faction, desc) {\n    //   return R.over(\n    //     FACTIONS_LENS,\n    //     (factions) => R.thread(factions)(\n    //       R.assocPath(['desc', faction], desc),\n    //       gameFactionsModel.updateDesc\n    //     ),\n    //     state\n    //   );\n    // }\n    // function actionDataFactionsClearDesc(state, faction) {\n    //   return R.over(\n    //     FACTIONS_LENS,\n    //     (factions) => R.thread(factions)(\n    //       R.dissocPath(['desc', faction]),\n    //       gameFactionsModel.updateDesc\n    //     ),\n    //     state\n    //   );\n    // }\n    // function actionDataFactionsClearAllDesc(state) {\n    //   return R.over(\n    //     FACTIONS_LENS,\n    //     (factions) => R.thread(factions)(\n    //       R.assoc('desc', {}),\n    //       gameFactionsModel.updateDesc\n    //     ),\n    //     state\n    //   );\n    // }\n    // function stateDataSettingsStoreCurrent() {\n    //   const settings = R.view(SETTINGS_LENS, appStateService.current());\n    //   return settingsModel.store(settings);\n    // }\n    // function stateDataFactionsStoreDesc(_state_) {\n    //   const factions = R.view(FACTIONS_LENS, appStateService.current());\n    //   return gameFactionsModel.storeDesc(factions);\n    // }\n    // function stateDataSettingsUpdateExport(exp, current_settings) {\n    //   fileExportService.cleanup(exp.url);\n    //   return {\n    //     name: 'clicknfeat_settings.json',\n    //     url: fileExportService.generate('json', current_settings)\n    //   };\n    // }\n  }\n})();\n"]}