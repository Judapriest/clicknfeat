{"version":3,"sources":["modes.es6"],"names":[],"mappings":";;;;AAAA,CAAC,YAAW;AACV,UAAQ,MAAR,CAAe,mBAAf,EACG,OADH,CACW,UADX,EACuB,oBADvB,EADU;;AAIV,uBAAqB,OAArB,GAA+B,CAC7B,WAD6B,EAE7B,UAF6B,EAG7B,UAH6B,EAI7B,OAJ6B,EAK7B,UAL6B,CAA/B,CAJU;AAWV,WAAS,oBAAT,CAA8B,gBAA9B,EAC8B,eAD9B,EAE8B,eAF9B,EAG8B,UAH9B,EAG0C;AACxC,QAAM,aAAa,EAAE,QAAF,CAAW,OAAX,CAAb,CADkC;;AAGxC,QAAM,QAAQ,gBAAgB,KAAhB,CACL,GADK,CACD,EAAE,MAAF,CAAS,EAAT,EAAa,UAAb,CADC,CAAR,CAHkC;AAKxC,QAAM,WAAW,MACR,GADQ,CACJ,yBADI,CAAX,CALkC;;AAQxC,QAAM,kBAAkB;AACtB,kBADsB,EACf,kBADe;AAEtB,gBAAU,mBAAV;AACA,qBAAe,wBAAf;AACA,aAAO,gBAAP;AACA,YAAM,eAAN;KALI,CARkC;AAexC,MAAE,YAAF,CAAe,eAAf,EAfwC;;AAiBxC,YAjBwC;;AAmBxC,WAAO,eAAP,CAnBwC;;AAqBxC,aAAS,KAAT,GAAiB;AACf,uBACG,QADH,CACY,gBADZ,EACqC,mBADrC,EAEG,QAFH,CAEY,sBAFZ,EAEqC,wBAFrC,EAGG,QAHH,CAGY,aAHZ,EAGqC,gBAHrC,EAIG,QAJH,CAIY,YAJZ,EAIqC,eAJrC,EADe;KAAjB;AAOA,aAAS,mBAAT,CAA6B,KAA7B,EAAoC,EAApC,EAAwC;AACtC,aAAO,EAAE,IAAF,CACL,UADK,EAEL,WAAW,aAAX,CAAyB,EAAzB,CAFK,EAGL,KAHK,CAAP,CADsC;KAAxC;AAOA,aAAS,wBAAT,CAAkC,KAAlC,EAAyC,MAAzC,EAAiD,IAAjD,EAAuD;AACrD,UAAM,QAAQ,EAAE,IAAF,CAAO,IAAP,CAAR,CAD+C;AAErD,UAAG,EAAE,MAAF,CAAS,EAAE,IAAF,CAAO,gBAAP,EAAyB,KAAzB,CAAT,CAAH,EAA8C;AAC5C,cAAM,cAAN,GAD4C;OAA9C;;AAIA,aAAO,EAAE,MAAF,CAAS,KAAT,EACL,EAAE,IAAF,CAAO,UAAP,CADK,EAEL,WAAW,mBAAX,CAA+B,MAA/B,GAAwC,iCAAU,MAAlD,CAFK,EAGL,EAAE,IAAF,CACE,UAAC,GAAD;eAAU,cAAc,EAAE,IAAF,CAAO,GAAP,CAAd;OAAV,EACA,UAAC,GAAD;eAAS,EAAE,QAAF,CAAW,GAAX,EACN,KADM,CACA,gBAAgB,IAAhB;OADT,CALG,CAAP,CANqD;KAAvD;AAgBA,aAAS,gBAAT,CAA0B,KAA1B,EAAiC;AAC/B,aAAO,EAAE,GAAF,CAAM,UAAN,EAAkB,WAAW,IAAX,EAAlB,EAAqC,KAArC,CAAP,CAD+B;KAAjC;AAGA,aAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC9B,aAAO,EAAE,IAAF,CAAO,UAAP,EAAmB,WAAW,IAAX,EAAiB,KAApC,CAAP,CAD8B;KAAhC;AAGA,aAAS,yBAAT,CAAmC,KAAnC,EAA0C;AACxC,UAAM,WAAW,EAAE,MAAF,CAAS,KAAT,EACf,WAAW,mBAAX,EACA,EAAE,KAAF,CAFI,CADkC;AAKxC,UAAM,UAAU,EAAE,MAAF,CAAS,KAAT,EACd,WAAW,kBAAX,EACA,EAAE,KAAF,CAFI,CALkC;AASxC,aAAO,EAAE,kBAAF,EAAY,gBAAZ,EAAP,CATwC;KAA1C;GA5DF;CAXD,CAAD","file":"modes.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('appModes', appModesModelFactory);\n\n  appModesModelFactory.$inject = [\n    'appAction',\n    'appError',\n    'appState',\n    'modes',\n    'allModes',\n  ];\n  function appModesModelFactory(appActionService,\n                                appErrorService,\n                                appStateService,\n                                modesModel) {\n    const MODES_LENS = R.lensProp('modes');\n\n    const modes = appStateService.state\n            .map(R.viewOr({}, MODES_LENS));\n    const bindings = modes\n            .map(updateCurrentModeBindings);\n\n    const appModesService = {\n      modes, bindings,\n      switchTo: actionModesSwitchTo,\n      currentAction: actionModesCurrentAction,\n      reset: actionModesReset,\n      exit: actionModesExit\n    };\n    R.curryService(appModesService);\n\n    mount();\n\n    return appModesService;\n\n    function mount() {\n      appActionService\n        .register('Modes.switchTo'       , actionModesSwitchTo)\n        .register('Modes.current.action' , actionModesCurrentAction)\n        .register('Modes.reset'          , actionModesReset)\n        .register('Modes.exit'           , actionModesExit);\n    }\n    function actionModesSwitchTo(state, to) {\n      return R.over(\n        MODES_LENS,\n        modesModel.switchToMode$(to),\n        state\n      );\n    }\n    function actionModesCurrentAction(state, action, args) {\n      const event = R.last(args);\n      if(R.exists(R.prop('preventDefault', event))) {\n        event.preventDefault();\n      }\n\n      return R.thread(state)(\n        R.view(MODES_LENS),\n        modesModel.currentModeActionP$(action, [state, ...args]),\n        R.when(\n          (res) => ('Promise' === R.type(res)),\n          (res) => R.resolveP(res)\n            .catch(appErrorService.emit)\n        )\n      );\n    }\n    function actionModesReset(state) {\n      return R.set(MODES_LENS, modesModel.init(), state);\n    }\n    function actionModesExit(state) {\n      return R.over(MODES_LENS, modesModel.exit, state);\n    }\n    function updateCurrentModeBindings(modes) {\n      const bindings = R.thread(modes)(\n        modesModel.currentModeBindings,\n        R.clone\n      );\n      const buttons = R.thread(modes)(\n        modesModel.currentModeButtons,\n        R.clone\n      );\n      return { bindings, buttons };\n    }\n  }\n})();\n"]}