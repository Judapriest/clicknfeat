{"version":3,"sources":["appState.es6"],"names":[],"mappings":"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","file":"appState.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('appStateOld', appStateServiceFactory);\n\n  appStateServiceFactory.$inject = [\n    'pubSub',\n    'state'\n  ];\n  function appStateServiceFactory(pubSubService,\n                                  stateModel) {\n    let events = pubSubService.create();\n    let current_state = {};\n\n    const appStateService = {\n      init: appStateInit,\n      current: appStateCurrent,\n      addReducer: appStateAddReducer,\n      reduce: appStateReduce,\n      chainReduce: appStateChainReduce,\n      addListener: appStateAddListener,\n      removeListener: appStateRemoveListener,\n      emit: appStateEmit,\n      onChange: appStateOnChange,\n      cell: appStateCell,\n      filterEvent: appStateFilterEvent\n    };\n    self.currentAppState = appStateCurrent;\n    R.curryService(appStateService);\n    return appStateService;\n\n    function appStateInit() {\n      current_state = stateModel.create();\n      return current_state;\n    }\n    function appStateCurrent() {\n      return current_state;\n    }\n    function appStateAddReducer(event, reducer) {\n      events = pubSubService\n        .addReducer(event, reducer, events);\n      return appStateService;\n    }\n    function appStateReduce(event, ...args) {\n      const new_state = pubSubService\n              .reduce(event, args, current_state, events);\n      if(new_state === current_state) return appStateService;\n\n      current_state = new_state;\n      appStateService.emit('AppState.change', current_state);\n\n      return appStateService;\n    }\n    function appStateChainReduce(...args) {\n      self.requestAnimationFrame(() => {\n        appStateService.reduce.apply(appStateService, args);\n      });\n    }\n    function appStateAddListener(event, listener) {\n      events = pubSubService\n        .addListener(event, listener, events);\n      return appStateService;\n    }\n    function appStateRemoveListener(event, listener) {\n      events = pubSubService\n        .removeListener(event, listener, events);\n      return appStateService;\n    }\n    function appStateEmit(event, ...args) {\n      pubSubService.emit(event, args, events);\n      return appStateService;\n    }\n    function appStateOnChange(on_event, emit_event, getValue) {\n      getValue = R.unless(R.isArrayLike, R.of, getValue);\n      let _value = R.map(() => undefined, getValue);\n      const hasChanged = R.thread(getValue)(\n        R.addIndex(R.map)((getter, i) => ((observable) => (_value[i] !== getter(observable)))),\n        R.anyPass\n      );\n      appStateService.addListener(on_event, (_event_, [observable]) => {\n        if(!hasChanged(observable)) return;\n        _value = R.ap(getValue, [observable]);\n        appStateService.emit\n          .apply(appStateService, [emit_event, ..._value]);\n      });\n    }\n    function appStateCell(update_events, update, initial) {\n      update_events = R.unless(R.isArrayLike, R.of, update_events);\n      let events = pubSubService.create();\n      let value = initial;\n      R.forEach((event) => {\n        appStateService.addListener(event, (_event_, [observable]) => {\n          value = update(value, observable);\n          pubSubService.emit('update', [value], events);\n        });\n      }, update_events);\n      return {\n        bind: (listener) => {\n          const _listener = (_event_, [value]) => {\n            listener(value);\n          };\n          listener(value);\n          events = pubSubService.addListener('update', _listener, events);\n          return () => {\n            events = pubSubService.removeListener('update', _listener, events);\n          };\n        }\n      };\n    }\n    function appStateFilterEvent(event_in, event_out, filter) {\n      appStateService.addListener(event_in, (_event_, [observable]) => {\n        if(filter(observable)) {\n          appStateService.emit(event_out, observable);\n        }\n      });\n    }\n  }\n})();\n"]}