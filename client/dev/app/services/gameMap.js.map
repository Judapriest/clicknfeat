{"version":3,"sources":["gameMap.es6"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AACV,UAAQ,MAAR,CAAe,mBAAf,EACG,OADH,CACW,SADX,EACsB,qBADtB,EADU;;AAIV,wBAAsB,OAAtB,GAAgC;;;;GAAhC,CAJU;AASV,WAAS,qBAAT,GAAiC;;;;AAI/B,QAAM,iBAAiB;AACrB,iBAAW,YAAX;AACA,kBAAY,aAAZ;AACA,6BAAuB,4BAAvB;AACA,8BAAwB,6BAAxB;AACA,uBAAiB,sBAAjB;KALI,CAJyB;;AAY/B,MAAE,YAAF,CAAe,cAAf,EAZ+B;AAa/B,WAAO,cAAP,CAb+B;;AAe/B,aAAS,YAAT,CAAsB,GAAtB,EAA2B;AACzB,aAAO,IAAI,SAAJ,CAAc,QAAd,CAAuB,SAAvB,CAAP,CADyB;KAA3B;AAGA,aAAS,aAAT,CAAuB,GAAvB,EAA4B;AAC1B,UAAI,WAAW,IAAI,qBAAJ,EAAX,CADsB;AAE1B,aAAO,SAAS,KAAT,GAAiB,GAAjB,CAFmB;KAA5B;AAIA,aAAS,4BAAT,CAAsC,GAAtC,EAA2C,KAA3C,EAAkD;AAChD,UAAI,cAAc,eAAe,SAAf,CAAyB,GAAzB,CAAd,CAD4C;AAEhD,UAAI,OAAO,IAAI,qBAAJ,EAAP,CAF4C;AAGhD,UAAI,QAAQ,CAAC,MAAM,OAAN,GAAgB,KAAK,IAAL,CAAjB,GAA8B,GAA9B,GAAoC,KAAK,KAAL,CAHA;AAIhD,UAAI,QAAQ,CAAC,MAAM,OAAN,GAAgB,KAAK,GAAL,CAAjB,GAA6B,GAA7B,GAAmC,KAAK,MAAL,CAJC;AAKhD,cAAU,cAAc,MAAM,KAAN,GAAc,KAA5B,CALsC;AAMhD,cAAU,cAAc,MAAM,KAAN,GAAc,KAA5B,CANsC;AAOhD,aAAO,EAAE,GAAG,KAAH,EAAU,GAAG,KAAH,EAAnB,CAPgD;KAAlD;AASA,aAAS,6BAAT,CAAuC,GAAvC,EAA4C,KAA5C,EAAmD;AACjD,UAAI,cAAc,eAAe,SAAf,CAAyB,GAAzB,CAAd,CAD6C;AAEjD,UAAI,OAAO,IAAI,qBAAJ,EAAP,CAF6C;AAGjD,UAAI,IAAK,MAAM,CAAN,GAAU,KAAK,KAAL,GAAa,GAAvB,CAHwC;AAIjD,UAAI,IAAK,MAAM,CAAN,GAAU,KAAK,MAAL,GAAc,GAAxB,CAJwC;AAKjD,UAAG,WAAH,EAAgB;AACd,YAAI,KAAK,KAAL,GAAa,CAAb,CADU;AAEd,YAAI,KAAK,MAAL,GAAc,CAAd,CAFU;OAAhB;AAIA,UAAI,IAAI,KAAK,IAAL,CATyC;AAUjD,UAAI,IAAI,KAAK,GAAL,CAVyC;AAWjD,aAAO,EAAE,GAAG,CAAH,EAAM,GAAG,CAAH,EAAf,CAXiD;KAAnD;AAaA,aAAS,sBAAT,CAAgC,IAAhC,EAAsC,KAAtC,EAA6C;;AAE3C,UAAM,YAAY;AAChB,cAAM,KAAN;AACA,gBAAQ,IAAR;OAFI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFqC,aA0CpC,KAAK,OAAL,CAAa,OAAb,CAAqB,SAArB,CAAP,CA1C2C;KAA7C;GA5CF;CATD,CAAD","file":"gameMap.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('gameMap', gameMapServiceFactory);\n\n  gameMapServiceFactory.$inject = [\n    // 'gameModels',\n    // 'gameTemplates',\n    // 'gameTerrains',\n  ];\n  function gameMapServiceFactory() {\n    // gameModelsModel,\n    //                              gameTemplatesModel,\n                                 // gameTerrainsModel) {\n    const gameMapService = {\n      isFlipped: mapIsFlipped,\n      zoomFactor: mapZoomFactor,\n      eventToMapCoordinates: gameMapEventToMapCoordinates,\n      mapToScreenCoordinates: gameMapMapToScreenCoordinates,\n      findEventTarget: gameMapFindEventTarget\n    };\n\n    R.curryService(gameMapService);\n    return gameMapService;\n\n    function mapIsFlipped(map) {\n      return map.classList.contains('flipped');\n    }\n    function mapZoomFactor(map) {\n      var map_rect = map.getBoundingClientRect();\n      return map_rect.width / 480;\n    }\n    function gameMapEventToMapCoordinates(map, event) {\n      var map_flipped = gameMapService.isFlipped(map);\n      var rect = map.getBoundingClientRect();\n      var map_x = (event.clientX - rect.left) * 480 / rect.width;\n      var map_y = (event.clientY - rect.top) * 480 / rect.height;\n      map_x = ( map_flipped ? 480 - map_x : map_x );\n      map_y = ( map_flipped ? 480 - map_y : map_y );\n      return { x: map_x, y: map_y };\n    }\n    function gameMapMapToScreenCoordinates(map, coord) {\n      var map_flipped = gameMapService.isFlipped(map);\n      var rect = map.getBoundingClientRect();\n      var x = (coord.x * rect.width / 480);\n      var y = (coord.y * rect.height / 480);\n      if(map_flipped) {\n        x = rect.width - x;\n        y = rect.height - y;\n      }\n      x = x + rect.left;\n      y = y + rect.top;\n      return { x: x, y: y };\n    }\n    function gameMapFindEventTarget(game, event) {\n      // var stamp;\n      const not_found = {\n        type: 'Map',\n        target: null\n      };\n      // if(event.target.classList.contains('template') &&\n      //    event.target.hasAttribute('data-stamp')) {\n      //   stamp = event.target.getAttribute('data-stamp');\n      //   return R.pipeP(\n      //     gameTemplatesService.findStamp$(stamp),\n      //     (template) => {\n      //       return { type: 'Template',\n      //                target: template\n      //              };\n      //     }\n      //   )(game.templates).catch(R.always(not_found));\n      // }\n      // if(event.target.classList.contains('model-base') &&\n      //    event.target.hasAttribute('data-stamp')) {\n      //   stamp = event.target.getAttribute('data-stamp');\n      //   return R.pipeP(\n      //     gameModelsService.findStamp$(stamp),\n      //     (model) => {\n      //       return { type: 'Model',\n      //                target: model\n      //              };\n      //     }\n      //   )(game.models).catch(R.always(not_found));\n      // }\n      // if(event.target.classList.contains('terrain-image') &&\n      //    event.target.hasAttribute('data-stamp')) {\n      //   stamp = event.target.getAttribute('data-stamp');\n      //   return R.pipeP(\n      //     gameTerrainsService.findStamp$(stamp),\n      //     (terrain) => {\n      //       return { type: 'Terrain',\n      //                target: terrain\n      //              };\n      //     }\n      //   )(game.terrains).catch(R.always(not_found));\n      // }\n      return self.Promise.resolve(not_found);\n    }\n  }\n})();\n"]}