{"version":3,"sources":["websocket.es6"],"names":[],"mappings":"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","file":"websocket.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('websocket', websocketServiceFactory);\n\n  websocketServiceFactory.$inject = [\n    'jsonParser',\n    'jsonStringifier',\n  ];\n  function websocketServiceFactory(jsonParserService,\n                                   jsonStringifierService) {\n    const websocketService = {\n      createP: websocketCreateP,\n      send: websocketSend,\n      close: websocketClose\n    };\n    R.curryService(websocketService);\n    return websocketService;\n\n    function websocketCreateP(url, name, handlers) {\n      return new self.Promise((resolve, reject) => {\n        name = R.defaultTo(url, name);\n        handlers = R.thread(handlers)(\n          R.over(R.lensProp('error'), R.defaultTo(defaultErrorHandler)),\n          R.over(R.lensProp('close'), R.defaultTo(defaultCloseHandler))\n        );\n\n        const scheme = 'ws://';\n        const uri = scheme + self.document.location.host + url;\n        const socket = new self.WebSocket(uri);\n        let resolved = false;\n        socket.onopen = websocketOnOpen;\n        socket.onerror = websocketOnError;\n        socket.onclose = websocketOnClose;\n        socket.onmessage = websocketOnMessage;\n\n        function websocketOnOpen(event) {\n          console.error('WebSocket open', name, event);\n          resolve(socket);\n          resolved = true;\n        }\n        function websocketOnError(event) {\n          handlers.error('socketError', event);\n        }\n        function websocketOnClose(/* event */) {\n          if(!resolved) {\n            reject('Connection error');\n            resolved = true;\n            return;\n          }\n          handlers.close();\n        }\n        function websocketOnMessage(event) {\n          console.log('WebSocket message', name, event);\n          R.threadP(event.data)(\n            jsonParserService.parseP,\n            (msg) => {\n              if(R.isNil(handlers[msg.type])) {\n                handlers.error('Unknown msg type', msg);\n                return;\n              }\n              handlers[msg.type](msg);\n            }\n          );\n        }\n        function defaultErrorHandler(reason, event) {\n          console.error('WebSocket error', name, reason, event);\n        }\n        function defaultCloseHandler() {\n          console.error('WebSocket close', name);\n        }\n      });\n    }\n    function websocketSend(event, socket) {\n      return R.thread(event)(\n        jsonStringifierService.stringify,\n        (msg) => socket.send(msg),\n        R.always(socket)\n      );\n    }\n    function websocketClose(socket) {\n      socket.close();\n      return socket;\n    }\n  }\n})();\n"]}