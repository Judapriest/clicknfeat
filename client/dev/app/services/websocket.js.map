{"version":3,"sources":["websocket.es6"],"names":[],"mappings":"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","file":"websocket.js","sourcesContent":["angular.module('clickApp.services')\n  .factory('websocket', [\n    '$document',\n    'jsonParser',\n    'jsonStringifier',\n    function websocketServiceFactory($document,\n                                     jsonParserService,\n                                     jsonStringifierService) {\n      return {\n        create: function websocketCreate(url, name, handlers) {\n          return new self.Promise((resolve, reject) => {\n            name = R.defaultTo(url, name);\n            handlers = R.pipe(\n              R.over(R.lensProp('error'), R.defaultTo(defaultErrorHandler)),\n              R.over(R.lensProp('close'), R.defaultTo(defaultCloseHandler))\n            )(handlers);\n\n            var scheme = 'ws://';\n            var uri = scheme + self.document.location.host + url;\n            var socket = new self.WebSocket(uri);\n            var resolved = false;\n            socket.onopen = function websocketOnOpen(event) {\n              console.error('WebSocket open', name, event);\n              resolve(socket);\n              resolved = true;\n            };\n            socket.onerror = function websocketOnError(event) {\n              handlers.error('socketError', event);\n            };\n            socket.onclose = function websocketOnClose(/* event */) {\n              if(!resolved) {\n                reject('Connection error');\n                resolved = true;\n                return;\n              }\n              handlers.close();\n            };\n            socket.onmessage = function websocketOnMessage(event) {\n              console.log('WebSocket message', name, event);\n              R.pipeP(\n                jsonParserService.parse,\n                (msg) => {\n                  if(R.isNil(handlers[msg.type])) {\n                    handlers.error('Unknown msg type', msg);\n                    return;\n                  }\n                  handlers[msg.type](msg);\n                }\n              )(event.data);\n            };\n            function defaultErrorHandler(reason, event) {\n              console.error('WebSocket error', name, reason, event);\n            }\n            function defaultCloseHandler() {\n              console.error('WebSocket close', name);\n            }\n          });\n        },\n        send: function websocketSend(event, socket) {\n          return R.pipeP(\n            jsonStringifierService.stringify,\n            socket.send\n          )(event);\n        },\n        close: function websocketClose(socket) {\n          return new self.Promise((resolve) => {\n            socket.close();\n            resolve();\n          });\n        }\n      };\n    }\n  ]);\n"]}