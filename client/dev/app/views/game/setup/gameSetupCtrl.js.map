{"version":3,"sources":["gameSetupCtrl.es6"],"names":[],"mappings":"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","file":"gameSetupCtrl.js","sourcesContent":["(function() {\n  angular.module('clickApp.controllers')\n    .controller('gameSetupCtrl', gameSetupCtrl);\n\n  gameSetupCtrl.$inject = [\n    '$scope',\n    'appData',\n    'appGame',\n    'gameScenario',\n  ];\n  function gameSetupCtrl($scope,\n                         appDataService,\n                         appGameService,\n                         gameScenarioModel) {\n    const vm = this;\n    console.log('init gameSetupCtrl');\n\n    vm.doSetBoard = doSetBoard;\n    vm.doSetRandomBoard = doSetRandomBoard;\n    vm.doSetScenario = doSetScenario;\n    vm.doSetRandomScenario = doSetRandomScenario;\n    // vm.doGenerateObjectives = doGenerateObjectives;\n    vm.doToggleLayer = doToggleLayer;\n    vm.onAmbianceChange = onAmbianceChange;\n    vm.onCategoryChange = onCategoryChange;\n    vm.onEntryChange = onEntryChange;\n    vm.getTerrain = getTerrain;\n    vm.doCreateTerrain = doCreateTerrain;\n    vm.doResetTerrain = doResetTerrain;\n    vm.doImportBoardFile = doImportBoardFile;\n\n    activate();\n\n    function activate() {\n      $scope.bindCell((game) => {\n        updateBoardName(game);\n        updateScenario(game);\n        updateLayers(game);\n      }, appGameService.game, $scope);\n      $scope.bindCell((terrains) => {\n        vm.ambiance = R.head(R.keys(terrains));\n        vm.onAmbianceChange();\n      }, appDataService.terrains, $scope);\n\n      // $scope.$on('$destroy', () => {\n      //   $scope.stateEvent('Game.scenario.refresh');\n      // });\n      // $scope.stateEvent('Game.scenario.refresh');\n    }\n\n    function updateBoardName(game) {\n      vm.board_name = R.path(['board','name'], game);\n    }\n    function doSetBoard() {\n      $scope.sendAction('Game.board.set', vm.board_name);\n    }\n    function doSetRandomBoard() {\n      $scope.sendAction('Game.board.setRandom');\n    }\n\n    function updateScenario(game) {\n      vm.scenario_name = R.path(['scenario','name'], game);\n      vm.scenario_group = gameScenarioModel\n        .groupForName(vm.scenario_name, $scope.state.scenarios);\n    }\n    function doSetScenario() {\n      if(R.isNil(vm.scenario_name)) return;\n\n      $scope.sendAction('Game.scenario.set',\n                        vm.scenario_name, vm.scenario_group);\n    }\n    function doSetRandomScenario() {\n      $scope.sendAction('Game.scenario.setRandom');\n    }\n    // function doGenerateObjectives() {\n    //   $scope.sendAction('Game.scenario.generateObjectives');\n    // }\n\n    function updateLayers(game) {\n      vm.layers = R.prop('layers', game);\n    }\n    function doToggleLayer(l) {\n      $scope.sendAction('Game.command.execute',\n                        'setLayers', ['toggle', l]);\n    }\n\n    function onAmbianceChange() {\n      vm.category = R.head(R.keys($scope.state.terrains[vm.ambiance]));\n      vm.onCategoryChange();\n    }\n    function onCategoryChange() {\n      vm.entry = R.head(R.keys($scope.state.terrains[vm.ambiance][vm.category]));\n      vm.onEntryChange();\n    }\n    function onEntryChange() {\n    }\n    function getTerrainPath() {\n      return [ vm.ambiance,\n               vm.category,\n               vm.entry\n             ];\n    }\n    function getTerrain() {\n      return R.path(getTerrainPath(), $scope.state.terrains);\n    }\n    function doCreateTerrain() {\n      const terrain_path = getTerrainPath();\n      $scope.sendAction('Game.terrain.create', terrain_path);\n    }\n    function doResetTerrain() {\n      $scope.sendAction('Game.terrains.reset');\n    }\n\n    function doImportBoardFile(files) {\n      $scope.sendAction('Game.board.importFile', files[0]);\n    }\n  }\n})();\n"]}