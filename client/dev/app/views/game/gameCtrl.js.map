{"version":3,"sources":["gameCtrl.es6"],"names":[],"mappings":";;;;AAAA,CAAC,YAAW;AACV,UAAQ,MAAR,CAAe,sBAAf,EACG,UADH,CACc,UADd,EAC0B,QAD1B,EADU;;AAIV,WAAS,OAAT,GAAmB,CACjB,QADiB,EAEjB,cAFiB,EAGjB,OAHiB,CAAnB,CAJU;AASV,WAAS,QAAT,CAAkB,MAAlB,EACkB,YADlB,EAEkB,UAFlB,EAE8B;AAC5B,QAAM,KAAK,IAAL,CADsB;AAE5B,YAAQ,GAAR,CAAY,eAAZ,EAA6B,YAA7B,EAF4B;;AAI5B,QAAM,YAAY,EAAE,MAAF,CAAS,QAAT,EAAmB,QAAnB,EAA6B,YAA7B,CAAZ,CAJsB;AAK5B,QAAM,aAAa,EAAE,MAAF,CAAS,SAAT,EAAoB,SAApB,EAA+B,YAA/B,CAAb,CALsB;AAM5B,QAAM,KAAK,EAAE,IAAF,CAAO,IAAP,EAAa,YAAb,CAAL,CANsB;;AAQ5B,OAAG,eAAH,GAAqB,eAArB,CAR4B;AAS5B,OAAG,aAAH,GAAmB,aAAnB,CAT4B;AAU5B,OAAG,YAAH,GAAkB,YAAlB,CAV4B;AAW5B,OAAG,cAAH,GAAoB,cAApB;;;AAX4B,YAc5B,GAd4B;;AAgB5B,aAAS,QAAT,GAAoB;AAClB,SAAG,iBAAH,GAAuB,IAAvB,CADkB;AAElB,SAAG,aAAH,GAAmB,IAAnB,CAFkB;;AAIlB,aAAO,UAAP,CAAkB,WAAlB,EAA+B,SAA/B,EAA0C,UAA1C,EAAsD,EAAtD;;;;AAJkB,YAQlB,CAAO,wBAAP,CAAgC,oBAAhC,EAAsD,MAAtD;;;;;;;;;AARkB,YAiBlB,CAAO,kBAAP,CAA0B,cAA1B,EAC0B,yBAD1B,EAE0B,MAF1B;;;;;AAjBkB,YAwBlB,CAAO,GAAP,CAAW,UAAX,EAAuB,YAAM;AAC3B,eAAO,UAAP,CAAkB,YAAlB,EAD2B;OAAN,CAAvB,CAxBkB;KAApB;;;;;;AAhB4B,aAiDnB,yBAAT,GAAqC;AACnC,SAAG,eAAH,GAAqB,EAAE,MAAF,CAAS,MAAT,EACnB,EAAE,IAAF,CAAO,CAAC,OAAD,EAAS,OAAT,CAAP,CADmB,EAEnB,WAAW,mBAAX,EACA,EAAE,KAAF,CAHF,CADmC;AAMnC,SAAG,cAAH,GAAoB,EAAE,MAAF,CAAS,MAAT,EAClB,EAAE,IAAF,CAAO,CAAC,OAAD,EAAS,OAAT,CAAP,CADkB,EAElB,WAAW,kBAAX,EACA,EAAE,KAAF,CAHF,CANmC;AAWnC,aAAO,OAAP,GAXmC;KAArC;;AAcA,aAAS,eAAT,GAA2B;AACzB,aAAO,EAAE,MAAF,CAAS,MAAT,EACL,EAAE,MAAF,CAAS,EAAT,EAAa,CAAC,OAAD,EAAU,OAAV,CAAb,CADK,EAEL,WAAW,eAAX,CAFF,CADyB;KAA3B;AAMA,aAAS,aAAT,CAAuB,IAAvB,EAA6B;AAC3B,aAAO,sBAAsB,IAAtB,CADoB;KAA7B;AAGA,aAAS,YAAT,CAAsB,MAAtB,EAAuC;wCAAN;;OAAM;;AACrC,aAAO,UAAP,CAAkB,sBAAlB,EACkB,MADlB,YAC8B,OAAM,IADpC,EADqC;KAAvC;AAIA,aAAS,cAAT,OAAkD;;;UAAzB,mBAAyB;UAAhB,kBAAgB;UAAR,iBAAQ;;AAChD,UAAG,WAAW,QAAX,EAAqB;AACtB,WAAG,iBAAH,GAAyB,GAAG,iBAAH,KAAyB,KAAzB,GACE,IADF,GAEE,KAFF,CADH;AAKtB,eALsB;OAAxB;AAOA,aAAO,UAAP,CAAkB,sBAAlB,EACkB,MADlB,EAC0B,CAAC,EAAD,CAD1B,EARgD;KAAlD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5E4B,GAF9B;CATD,CAAD","file":"gameCtrl.js","sourcesContent":["(function() {\n  angular.module('clickApp.controllers')\n    .controller('gameCtrl', gameCtrl);\n\n  gameCtrl.$inject = [\n    '$scope',\n    '$stateParams',\n    'modes',\n  ];\n  function gameCtrl($scope,\n                    $stateParams,\n                    modesModel) {\n    const vm = this;\n    console.log('init gameCtrl', $stateParams);\n\n    const is_online = R.propEq('online', 'online', $stateParams);\n    const is_private = R.propEq('private', 'private', $stateParams);\n    const id = R.prop('id', $stateParams);\n\n    vm.currentModeName = currentModeName;\n    vm.currentModeIs = currentModeIs;\n    vm.doModeAction = doModeAction;\n    vm.doActionButton = doActionButton;\n    // vm.doInvitePlayer = doInvitePlayer;\n\n    activate();\n\n    function activate() {\n      vm.show_action_group = null;\n      vm.invite_player = null;\n\n      $scope.stateEvent('Game.load', is_online, is_private, id);\n      // $scope.digestOnStateChangeEvent('Game.load.success', $scope);\n      // $scope.onStateChangeEvent('Game.load.error', onGameLoadError, $scope);\n\n      $scope.digestOnStateChangeEvent('Game.layers.change', $scope);\n      // $scope.digestOnStateChangeEvent('Game.board.change', $scope);\n      // $scope.digestOnStateChangeEvent('Game.scenario.change', $scope);\n      // $scope.digestOnStateChangeEvent('Game.model.create.enable', $scope);\n      // $scope.digestOnStateChangeEvent('Game.template.create.enable', $scope);\n      // $scope.digestOnStateChangeEvent('Game.terrain.create.enable', $scope);\n      // $scope.digestOnStateChangeEvent('Game.players.change', $scope);\n      // $scope.digestOnStateChangeEvent('User.change', $scope);\n\n      $scope.onStateChangeEvent('Modes.change',\n                                updateCurrentModeBindings,\n                                $scope);\n      // $scope.onStateChangeEvent('Modes.buttons.update',\n      //                           updateCurrentModeBindings,\n      //                           $scope);\n\n      $scope.$on('$destroy', () => {\n        $scope.stateEvent('Modes.exit');\n      });\n    }\n\n    // function onGameLoadError() {\n    //   $scope.goToState('lounge');\n    // }\n\n    function updateCurrentModeBindings() {\n      vm.action_bindings = R.thread($scope)(\n        R.path(['state','modes']),\n        modesModel.currentModeBindings,\n        R.clone\n      );\n      vm.action_buttons = R.thread($scope)(\n        R.path(['state','modes']),\n        modesModel.currentModeButtons,\n        R.clone\n      );\n      $scope.$digest();\n    }\n\n    function currentModeName() {\n      return R.thread($scope)(\n        R.pathOr({}, ['state', 'modes']),\n        modesModel.currentModeName\n      );\n    }\n    function currentModeIs(mode) {\n      return currentModeName() === mode;\n    }\n    function doModeAction(action, ...args) {\n      $scope.stateEvent('Modes.current.action',\n                        action, [...args, {}]);\n    }\n    function doActionButton([_label_, action, group]) {\n      if(action === 'toggle') {\n        vm.show_action_group = ( vm.show_action_group === group\n                                 ? null\n                                 : group\n                               );\n        return;\n      }\n      $scope.stateEvent('Modes.current.action',\n                        action, [{}]);\n    }\n    // function doInvitePlayer() {\n    //   if(R.isNil(vm.invite_player)) return;\n\n    //   $scope.stateEvent('Game.invitePlayer', vm.invite_player);\n    // }\n\n    ////////////////////////////////////////////////////\n    // function updateGameLosOriginTarget(on) {\n    //   let game_los = {\n    //     stamp: null,\n    //     change: null,\n    //     delete: null\n    //   };\n    //   function cleanupLosListener(origin) {\n    //     if(game_los.stamp === origin) return;\n\n    //     console.log('unsubscribe Los listeners', on, game_los.stamp);\n    //     if(game_los.change) game_los.change();\n    //     game_los.change = null;\n    //     if(game_los.delete) game_los.delete();\n    //     game_los.delete = null;\n    //     game_los.stamp = null;\n    //   }\n    //   $scope.onGameEvent('changeRemoteLos', (event, los) => {\n    //     let stamp = gameLosService[on](los);\n    //     cleanupLosListener(stamp);\n\n    //     let display = gameLosService.isDisplayed(los);\n    //     if( !display ||\n    //         R.isNil(stamp) ||\n    //         game_los.stamp === stamp ) return;\n\n    //     let change_event = 'changeModel-'+stamp;\n    //     game_los.change = pubSubService.subscribe(change_event, () => {\n    //       console.log('update LoS change', on);\n    //       gameLosService.updateOriginTarget($scope, $scope.game, $scope.game.los);\n    //     }, game_event_channel);\n    //     let delete_event = 'deleteModel-'+stamp;\n    //     game_los.delete = pubSubService.subscribe(delete_event, () => {\n    //       console.log('update LoS delete', on);\n    //       let cmd = (on === 'origin' ? 'clearOrigin' : 'clearTarget');\n    //       gameLosService[cmd]($scope, $scope.game, $scope.game.los);\n    //     }, game_event_channel);\n    //     console.log('subscribe Los listener', on, change_event, delete_event);\n    //     game_los.stamp = stamp;\n    //   }, $scope);\n    //   $scope.$on('$destroy', () => {\n    //     cleanupLosListener();\n    //   });\n    // }\n    // updateGameLosOriginTarget('origin');\n    // updateGameLosOriginTarget('target');\n\n    // function updateGameRulerOriginTarget(on) {\n    //   let game_ruler = {\n    //     stamp: null,\n    //     change: null,\n    //     delete: null\n    //   };\n    //   function cleanupRulerListener(origin) {\n    //     if(game_ruler.stamp === origin) return;\n\n    //     console.log('unsubscribe Ruler listener', on, game_ruler.stamp);\n    //     if(game_ruler.change) game_ruler.change();\n    //     game_ruler.change = null;\n    //     if(game_ruler.delete) game_ruler.delete();\n    //     game_ruler.delete = null;\n    //     game_ruler.stamp = null;\n    //   }\n    //   $scope.onGameEvent('changeRemoteRuler', (event, ruler) => {\n    //     let stamp = gameRulerService[on](ruler);\n    //     cleanupRulerListener(stamp);\n\n    //     let display = gameRulerService.isDisplayed(ruler);\n    //     if( !display ||\n    //         R.isNil(stamp) ||\n    //         game_ruler.stamp === stamp ) return;\n\n    //     let change_event = 'changeModel-'+stamp;\n    //     game_ruler.change = pubSubService.subscribe(change_event, () => {\n    //       console.log('update Ruler change', on);\n    //       gameRulerService.updateOriginTarget($scope, $scope.game.ruler);\n    //     }, game_event_channel);\n    //     let delete_event = 'deleteModel-'+stamp;\n    //     game_ruler.delete = pubSubService.subscribe(delete_event, () => {\n    //       console.log('update Ruler delete', on);\n    //       let cmd = (on === 'origin' ? 'clearOrigin' : 'clearTarget');\n    //       gameRulerService[cmd]($scope, $scope.game.ruler)\n    //         .then((ruler) => {\n    //           $scope.game.ruler = ruler;\n    //         });\n    //     }, game_event_channel);\n    //     console.log('subscribe Ruler listener', on, change_event, delete_event);\n    //     game_ruler.stamp = stamp;\n    //   }, $scope);\n    //   $scope.$on('$destroy', () => {\n    //     cleanupRulerListener();\n    //   });\n    // }\n    // updateGameRulerOriginTarget('origin');\n    // updateGameRulerOriginTarget('target');\n  }\n})();\n"]}