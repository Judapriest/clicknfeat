{"version":3,"sources":["gameCtrl.es6"],"names":[],"mappings":"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","file":"gameCtrl.js","sourcesContent":["angular.module('clickApp.controllers')\n  .controller('gameCtrl', [\n    '$scope',\n    '$stateParams',\n    'modes',\n    function($scope,\n             $stateParams,\n             modesService) {\n      console.log('init gameCtrl', $stateParams);\n\n      let is_online = R.propEq('online', 'online', $stateParams);\n      let is_private = R.propEq('private', 'private', $stateParams);\n      let id = R.prop('id', $stateParams);\n      $scope.stateEvent('Game.load', is_online, is_private, id);\n      $scope.$on('$destroy', () => {\n        $scope.stateEvent('Modes.exit');\n      });\n\n      $scope.digestOnStateChangeEvent('Game.load.success', $scope);\n      $scope.digestOnStateChangeEvent('Game.layers.change', $scope);\n      $scope.digestOnStateChangeEvent('Game.board.change', $scope);\n      $scope.digestOnStateChangeEvent('Game.scenario.change', $scope);\n      $scope.digestOnStateChangeEvent('Game.model.create.enable', $scope);\n      $scope.digestOnStateChangeEvent('Game.template.create.enable', $scope);\n      $scope.digestOnStateChangeEvent('Game.terrain.create.enable', $scope);\n      $scope.onStateChangeEvent('Game.load.error', () => {\n        $scope.goToState('lounge');\n      }, $scope);\n\n      $scope.hints = {};\n      $scope.onStateChangeEvent('Game.chat', (event, msg) => {\n        if(msg.from === $scope.user.state.name) return;\n\n        $scope.hints.go_to_main = !$scope.stateIs('game.main');\n        $scope.$digest();\n      }, $scope);\n      $scope.onStateChangeEvent('User.chat', (event, msg) => {\n        console.log('gameCtrl: userMailHint', event, msg);\n        if(msg.from === $scope.user.state.stamp) return;\n\n        $scope.hints.go_to_online = !$scope.stateIs('game.online');\n        $scope.$digest();\n      }, $scope);\n\n      function updateCurrentModeBindings() {\n        $scope.action_bindings = R.pipe(\n          R.path(['state','modes']),\n          modesService.currentModeBindings,\n          R.clone\n        )($scope);\n        $scope.action_buttons = R.pipe(\n          R.path(['state','modes']),\n          modesService.currentModeButtons,\n          R.clone\n        )($scope);\n        $scope.$digest();\n      }\n      $scope.onStateChangeEvent('Modes.change', updateCurrentModeBindings, $scope);\n      $scope.onStateChangeEvent('Game.loaded', updateCurrentModeBindings, $scope);\n      $scope.currentModeName = () => {\n        return R.pipe(\n          R.pathOr({}, ['state', 'modes']),\n          modesService.currentModeName\n        )($scope);\n      };\n      $scope.currentModeIs = (mode) => {\n        return $scope.currentModeName() === mode;\n      };\n      $scope.show_action_group = null;\n      $scope.doModeAction = (action, ...args) => {\n        $scope.stateEvent('Modes.current.action', action, [...args, {}]);\n      };\n      $scope.doActionButton = ([label, action, group]) => {\n        label = label;\n        if(action === 'toggle') {\n          $scope.show_action_group = ( ($scope.show_action_group === group) ?\n                                       null :\n                                       group\n                                     );\n          return;\n        }\n        $scope.stateEvent('Modes.current.action', action, [{}]);\n      };\n      // function updateGameLosOriginTarget(on) {\n      //   let game_los = {\n      //     stamp: null,\n      //     change: null,\n      //     delete: null\n      //   };\n      //   function cleanupLosListener(origin) {\n      //     if(game_los.stamp === origin) return;\n          \n      //     console.log('unsubscribe Los listeners', on, game_los.stamp);\n      //     if(game_los.change) game_los.change();\n      //     game_los.change = null;\n      //     if(game_los.delete) game_los.delete();\n      //     game_los.delete = null;\n      //     game_los.stamp = null;\n      //   }\n      //   $scope.onGameEvent('changeRemoteLos', (event, los) => {\n      //     let stamp = gameLosService[on](los);\n      //     cleanupLosListener(stamp);\n          \n      //     let display = gameLosService.isDisplayed(los);\n      //     if( !display ||\n      //         R.isNil(stamp) ||\n      //         game_los.stamp === stamp ) return;\n          \n      //     let change_event = 'changeModel-'+stamp;\n      //     game_los.change = pubSubService.subscribe(change_event, () => {\n      //       console.log('update LoS change', on);\n      //       gameLosService.updateOriginTarget($scope, $scope.game, $scope.game.los);\n      //     }, game_event_channel);\n      //     let delete_event = 'deleteModel-'+stamp;\n      //     game_los.delete = pubSubService.subscribe(delete_event, () => {\n      //       console.log('update LoS delete', on);\n      //       let cmd = (on === 'origin' ? 'clearOrigin' : 'clearTarget');\n      //       gameLosService[cmd]($scope, $scope.game, $scope.game.los);\n      //     }, game_event_channel);\n      //     console.log('subscribe Los listener', on, change_event, delete_event);\n      //     game_los.stamp = stamp;\n      //   }, $scope);\n      //   $scope.$on('$destroy', () => {\n      //     cleanupLosListener();\n      //   });\n      // }\n      // updateGameLosOriginTarget('origin');\n      // updateGameLosOriginTarget('target');\n      \n      // function updateGameRulerOriginTarget(on) {\n      //   let game_ruler = {\n      //     stamp: null,\n      //     change: null,\n      //     delete: null\n      //   };\n      //   function cleanupRulerListener(origin) {\n      //     if(game_ruler.stamp === origin) return;\n          \n      //     console.log('unsubscribe Ruler listener', on, game_ruler.stamp);\n      //     if(game_ruler.change) game_ruler.change();\n      //     game_ruler.change = null;\n      //     if(game_ruler.delete) game_ruler.delete();\n      //     game_ruler.delete = null;\n      //     game_ruler.stamp = null;\n      //   }\n      //   $scope.onGameEvent('changeRemoteRuler', (event, ruler) => {\n      //     let stamp = gameRulerService[on](ruler);\n      //     cleanupRulerListener(stamp);\n          \n      //     let display = gameRulerService.isDisplayed(ruler);\n      //     if( !display ||\n      //         R.isNil(stamp) ||\n      //         game_ruler.stamp === stamp ) return;\n          \n      //     let change_event = 'changeModel-'+stamp;\n      //     game_ruler.change = pubSubService.subscribe(change_event, () => {\n      //       console.log('update Ruler change', on);\n      //       gameRulerService.updateOriginTarget($scope, $scope.game.ruler);\n      //     }, game_event_channel);\n      //     let delete_event = 'deleteModel-'+stamp;\n      //     game_ruler.delete = pubSubService.subscribe(delete_event, () => {\n      //       console.log('update Ruler delete', on);\n      //       let cmd = (on === 'origin' ? 'clearOrigin' : 'clearTarget');\n      //       gameRulerService[cmd]($scope, $scope.game.ruler)\n      //         .then((ruler) => {\n      //           $scope.game.ruler = ruler;\n      //         });\n      //     }, game_event_channel);\n      //     console.log('subscribe Ruler listener', on, change_event, delete_event);\n      //     game_ruler.stamp = stamp;\n      //   }, $scope);\n      //   $scope.$on('$destroy', () => {\n      //     cleanupRulerListener();\n      //   });\n      // }\n      // updateGameRulerOriginTarget('origin');\n      // updateGameRulerOriginTarget('target');\n      \n      // function updateGameModelSelection() {\n      //   let game_model = {\n      //     stamp: null,\n      //     unsubscribe: null\n      //   };\n      //   function cleanupModelListener(stamp) {\n      //     if(game_model.stamp === stamp ||\n      //        R.isNil(game_model.unsubscribe)) return;\n          \n      //     console.info('unsubscribe Game Model listener', game_model.stamp);\n      //     game_model.unsubscribe();\n      //     game_model.unsubscribe = null;\n      //     game_model.stamp = null;\n      //   }\n      //   function updateSingleModelSelection(stamp) {\n      //     R.pipePromise(\n      //       (stamp) => {\n      //         if(R.isNil(stamp)) return null;\n\n      //         return gameModelsService\n      //           .findStamp(stamp, $scope.game.models);\n      //       },\n      //       (model) => {\n      //         $scope.gameEvent('updateSingleModelSelection', stamp, model);\n      //       }\n      //     )(stamp);\n      //   }\n      //   $scope.onGameEvent('changeLocalModelSelection', (event, selection) => {\n      //     let stamps = gameModelSelectionService.get('local', selection);\n      //     let stamp = R.length(stamps) === 1 ? R.head(stamps) : null;\n      //     cleanupModelListener(stamp);\n          \n      //     if( R.isNil(stamp) ||\n      //         game_model.stamp === stamp ) return;\n          \n      //     let event_name = 'changeModel-'+stamp;\n      //     console.info('subscribe Game Model listener', event_name);\n      //     game_model.unsubscribe = pubSubService.subscribe(event_name, () => {\n      //       let stamps = gameModelSelectionService.get('local', $scope.game.model_selection);\n      //       let stamp = R.length(stamps) === 1 ? R.head(stamps) : null;\n      //       updateSingleModelSelection(stamp);\n      //     }, game_event_channel);\n      //     game_model.stamp = stamp;\n      //     updateSingleModelSelection(stamp);\n      //   }, $scope);\n      //   $scope.$on('$destroy', () => {\n      //     cleanupModelListener();\n      //   });\n      // }\n      // updateGameModelSelection();\n      \n      // function updateGameTemplateSelection() {\n      //   let game_template = {\n      //     stamp: null,\n      //     unsubscribe: null\n      //   };\n      //   function cleanupTemplateListener(stamp) {\n      //     if(game_template.stamp === stamp ||\n      //        R.isNil(game_template.unsubscribe)) return;\n          \n      //     console.info('unsubscribe Game Template listener', game_template.stamp);\n      //     game_template.unsubscribe();\n      //     game_template.unsubscribe = null;\n      //     game_template.stamp = null;\n      //   }\n      //   function updateSingleTemplateSelection(stamp) {\n      //     R.pipePromise(\n      //       (stamp) => {\n      //         if(R.isNil(stamp)) return null;\n\n      //         return gameTemplatesService\n      //           .findStamp(stamp, $scope.game.templates);\n      //       },\n      //       (template) => {\n      //         if(R.exists(template) &&\n      //            'aoe' !== template.state.type) {\n      //           stamp = null;\n      //           template = null;\n      //         }\n              \n      //         $scope.gameEvent('updateSingleTemplateSelection', stamp, template);\n      //       }\n      //     )(stamp);\n      //   }\n      //   $scope.onGameEvent('changeLocalTemplateSelection', (event, selection) => {\n      //     let stamps = gameTemplateSelectionService.get('local', selection);\n      //     let stamp = R.length(stamps) === 1 ? R.head(stamps) : null;\n      //     cleanupTemplateListener(stamp);\n          \n      //     if( R.isNil(stamp) ||\n      //         game_template.stamp === stamp ) return;\n          \n      //     let event_name = 'changeTemplate-'+stamp;\n      //     console.info('subscribe Game Template listener', event_name);\n      //     game_template.unsubscribe = pubSubService.subscribe(event_name, () => {\n      //       let stamps = gameTemplateSelectionService.get('local', $scope.game.template_selection);\n      //       let stamp = R.length(stamps) === 1 ? R.head(stamps) : null;\n      //       updateSingleTemplateSelection(stamp);\n      //     }, game_event_channel);\n      //     game_template.stamp = stamp;\n      //     updateSingleTemplateSelection(stamp);\n      //   }, $scope);\n      //   $scope.$on('$destroy', () => {\n      //     cleanupTemplateListener();\n      //   });\n      // }\n      // updateGameTemplateSelection();\n    }\n  ]);\n"]}