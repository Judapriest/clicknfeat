{"version":3,"sources":["random.es6"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AACV,IAAE,MAAF,GAAW,SAAS,MAAT,GAAkB;AAC3B,WAAO,QAAQ,CAAR,EAAW,UAAX,IAAyB,UAAzB,CADoB;GAAlB,CADD;;AAKV,IAAE,WAAF,GAAgB,SAAS,WAAT,CAAqB,GAArB,EAA0B,GAA1B,EAA+B;AAC7C,WAAQ,GAAE,GAAM,EAAE,MAAF,MAAc,MAAM,GAAN,GAAY,CAAZ,CAAd,GAA+B,CAAvC,CADqC;GAA/B,CALN;;AASV,IAAE,IAAF,GAAS,SAAS,IAAT,GAAgB;AACvB,WAAO,uCACJ,OADI,CACI,OADJ,EACa,UAAS,CAAT,EAAY;AAC5B,UAAI,IAAI,EAAE,MAAF,KAAa,EAAb,GAAkB,CAAlB;UACJ,IAAI,KAAK,GAAL,GAAW,CAAX,GAAgB,IAAI,GAAJ,GAAU,GAAV,CAFI;AAG5B,aAAO,EAAE,QAAF,CAAW,EAAX,CAAP,CAH4B;KAAZ,CADpB,CADuB;GAAhB,CATC;;AAkBV,WAAS,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,EAA2B;AACzB,QAAI,OAAO,CAAP,CADqB;AAEzB,QAAI,QAAQ,MAAM,GAAN,CAFa;;AAIzB,QAAI,cAAc,EAAE,MAAF,CAAS,KAAK,IAAL,CAAT,GAAsB,KAAK,IAAL,CAAU,KAAK,IAAL,CAAU,KAAV,CAAV,CAAtB,GAAoD,EAApD,CAJO;AAKzB,QAAI,cAAc,EAAd,EAAkB;AACpB,YAAM,IAAI,KAAK,SAAL,CAAe,iDAAnB,CAAN,CADoB;KAAtB;AAGA,QAAI,eAAe,KAAK,IAAL,CAAU,cAAc,CAAd,CAAzB,CARqB;AASzB,QAAI,OAAO,KAAK,GAAL,CAAS,CAAT,EAAY,WAAZ,IAA2B,CAA3B;;;;AATc,QAarB,YAAY,IAAI,UAAJ,CAAe,YAAf,CAAZ,CAbqB;AAczB,SAAK,MAAL,CAAY,eAAZ,CAA4B,SAA5B,EAdyB;;AAgBzB,QAAI,IAAI,CAAC,eAAe,CAAf,CAAD,GAAqB,CAArB,CAhBiB;AAiBzB,SAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,YAAJ,EAAkB,GAAlC,EAAuC;AACrC,cAAQ,UAAU,CAAV,IAAe,KAAK,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAf,CAD6B;AAErC,WAAK,CAAL,CAFqC;KAAvC;;;AAjByB,QAuBzB,GAAO,OAAO,IAAP,CAvBkB;;AAyBzB,QAAI,QAAQ,KAAR,EAAe;;AAEjB,aAAO,QAAQ,GAAR,EAAa,GAAb,CAAP,CAFiB;KAAnB;;AAzByB,WA8BlB,MAAM,IAAN,CA9BkB;GAA3B;CAlBD,CAAD","file":"random.js","sourcesContent":["(function() {\n  R.random = function random() {\n    return _random(0, 1000000000) / 1000000000;\n  };\n\n  R.randomRange = function randomRange(min, max) {\n    return (( min + R.random() * (max - min + 1) )|0);\n  };\n\n  R.guid = function guid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'\n      .replace(/[xy]/g, function(c) {\n        var r = R.random() * 16 | 0,\n            v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n      });\n  };\n\n  function _random(min, max) {\n    var rval = 0;\n    var range = max - min;\n\n    var bits_needed = R.exists(Math.log2) ? Math.ceil(Math.log2(range)) : 30;\n    if (bits_needed > 53) {\n      throw new self.Exception('We cannot generate numbers larger than 53 bits.');\n    }\n    var bytes_needed = Math.ceil(bits_needed / 8);\n    var mask = Math.pow(2, bits_needed) - 1;\n    // 7776 -> (2^13 = 8192) -1 == 8191 or 0x00001111 11111111\n\n    // Create byte array and fill with N random numbers\n    var byteArray = new Uint8Array(bytes_needed);\n    self.crypto.getRandomValues(byteArray);\n\n    var p = (bytes_needed - 1) * 8;\n    for (var i = 0; i < bytes_needed; i++) {\n      rval += byteArray[i] * Math.pow(2, p);\n      p -= 8;\n    }\n\n    // Use & to apply the mask and reduce the number of recursive lookups\n    rval = rval & mask;\n\n    if (rval >= range) {\n      // Integer out of acceptable range\n      return _random(min, max);\n    }\n    // Return an integer that falls within the range\n    return min + rval;\n  }\n})();\n"]}