{"version":3,"sources":["appConfig.es6"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AACV,UAAQ,MAAR,CAAe,UAAf,EACG,MADH,CACU,YADV,EAEG,MAFH,CAEU,aAFV,EADU;;AAKV,eAAa,OAAb,GAAuB,CACrB,oBADqB,CAAvB,CALU;AAQV,WAAS,YAAT,CAAsB,kBAAtB,EAA0C;AACxC,uBAAmB,SAAnB,CAA6B,SAA7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADwC,GAA1C;AAwGA,gBAAc,OAAd,GAAwB,CAAE,kBAAF,CAAxB,CAhHU;AAiHV,WAAS,aAAT,CAAuB,gBAAvB,EAAyC;AACvC,qBAAiB,0BAAjB,CAA4C,+BAA5C,EADuC;GAAzC;CAjHD,CAAD","file":"appConfig.js","sourcesContent":["(function() {\n  angular.module('clickApp')\n    .config(defaultRoute)\n    .config(allowBlobUrls);\n\n  defaultRoute.$inject = [\n    '$urlRouterProvider',\n  ];\n  function defaultRoute($urlRouterProvider) {\n    $urlRouterProvider.otherwise('/lounge');\n    // $stateProvider\n      // .state('lounge', {\n      //   url: '/lounge',\n      //   templateUrl: 'partials/lounge.html',\n      //   controller: 'loungeCtrl',\n      //   data: {}\n      // })\n      // .state('user', {\n      //   url: '/user',\n      //   templateUrl: 'partials/user.html',\n      //   controller: 'userCtrl',\n      //   data: {}\n      // })\n      // .state('settings', {\n      //   abstract: true,\n      //   url: '/settings',\n      //   templateUrl: 'partials/settings.html',\n      //   controller: 'settingsCtrl',\n      //   data: {}\n      // })\n      // .state('settings.Main', {\n      //   url: '/main',\n      //   templateUrl: 'partials/settings/main.html',\n      //   controller: 'settingsMainCtrl'\n      // })\n      // .state('settings.Models', {\n      //   url: '/models',\n      //   templateUrl: 'partials/settings/models.html',\n      //   controller: 'settingsModelsCtrl'\n      // })\n      // .state('settings.Bindings', {\n      //   url: '/bindings',\n      //   templateUrl: 'partials/settings/bindings.html',\n      //   controller: 'settingsBindingsCtrl'\n      // })\n      // .state('settings.Moves', {\n      //   url: '/moves',\n      //   templateUrl: 'partials/settings/moves.html',\n      //   controller: 'settingsMovesCtrl'\n      // })\n      // .state('game', {\n      //   abstract: true,\n      //   url: '/game/:online/:private/:id',\n      //   templateUrl: 'partials/game.html',\n      //   controller: 'gameCtrl',\n      //   data: { hide_nav: true }\n      // })\n      // .state('game.main', {\n      //   url: '/main',\n      //   templateUrl: 'partials/game/main.html',\n      //   controller: 'gameMainCtrl',\n      //   data: { hide_nav: true }\n      // })\n      // .state('game.model', {\n      //   url: '/model',\n      //   templateUrl: 'partials/game/model.html',\n      //   controller: 'gameModelCtrl',\n      //   data: { hide_nav: true }\n      // })\n      // .state('game.setup', {\n      //   url: '/setup',\n      //   templateUrl: 'partials/game/setup.html',\n      //   controller: 'gameSetupCtrl',\n      //   data: { hide_nav: true }\n      // })\n      // .state('game.save', {\n      //   url: '/save',\n      //   templateUrl: 'partials/game/save.html',\n      //   controller: 'gameSaveCtrl',\n      //   data: { hide_nav: true }\n      // })\n      // .state('game.help', {\n      //   url: '/help',\n      //   templateUrl: 'partials/game/help.html',\n      //   controller: 'gameHelpCtrl',\n      //   data: { hide_nav: true }\n      // })\n      // .state('game.log', {\n      //   url: '/log',\n      //   templateUrl: 'partials/game/log.html',\n      //   controller: 'gameLogCtrl',\n      //   data: { hide_nav: true }\n      // })\n      // .state('game.online', {\n      //   url: '/online',\n      //   templateUrl: 'partials/game/online.html',\n      //   controller: 'gameOnlineCtrl',\n      //   data: { hide_nav: true }\n      // })\n      // .state('debug', {\n      //   url: '/debug',\n      //   templateUrl: 'partials/debug.html',\n      //   controller: 'debugCtrl'\n      // })\n      // .state('info', {\n      //   url: '/info',\n      //   templateUrl: 'partials/info.html',\n      //   controller: 'infoCtrl',\n      //   data: {}\n      // })\n    // ;\n  }\n  allowBlobUrls.$inject = [ '$compileProvider' ];\n  function allowBlobUrls($compileProvider) {   \n    $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|ftp|mailto|blob):/);\n  }\n})();\n"]}