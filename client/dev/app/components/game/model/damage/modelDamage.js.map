{"version":3,"sources":["modelDamage.es6"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AACV,UAAQ,MAAR,CAAe,qBAAf,EACG,UADH,CACc,0BADd,EAC0C,mBAD1C,EAEG,SAFH,CAEa,sBAFb,EAEqC,+BAFrC,EADU;;AAKV,sBAAoB,OAApB,GAA8B,CAC5B,YAD4B,EAE5B,QAF4B,CAA9B,CALU;;;AAUV,WAAS,mBAAT,CAA6B,UAA7B,EAC6B;;AAD7B,IAG8B;AAC5B,QAAM,KAAK,IAAL,CADsB;AAE5B,YAAQ,GAAR,CAAY,2BAAZ,EAAyC,OAAO,IAAP,EAAa,OAAO,KAAP,CAAtD,CAF4B;AAG5B,QAAM,QAAQ,WAAW,KAAX,CAHc;;AAK5B,OAAG,KAAH,GAAW,KAAX,CAL4B;AAM5B,OAAG,eAAH,GAAqB,eAArB,CAN4B;AAO5B,OAAG,aAAH,GAAmB,aAAnB,CAP4B;AAQ5B,OAAG,YAAH,GAAkB,YAAlB;;;;;;;AAR4B,YAe5B,GAf4B;;AAiB5B,aAAS,QAAT,GAAoB;;;;;KAApB;AAMA,aAAS,KAAT,CAAe,CAAf,EAAkB;AAChB,aAAO,EAAE,KAAF,CAAQ,CAAR,EAAW,CAAX,CAAP,CADgB;KAAlB;AAGA,aAAS,eAAT,CAAyB,CAAzB,EAA4B;AAC1B,UAAG,EAAE,KAAF,CAAQ,GAAG,KAAH,CAAR,IACA,EAAE,KAAF,CAAQ,GAAG,KAAH,CAAS,GAAT,CADR,EACuB,OAAO,EAAP,CAD1B;AAEA,aAAS,GAAG,KAAH,IAAY,GAAG,KAAH,CAAS,GAAT,CAAa,CAAb,GAAiB,CAAjB,GACV,MADF,GAEE,EAFF,CAHiB;KAA5B;AAQA,aAAS,aAAT,CAAuB,GAAvB,EAA4B,IAA5B,EAAkC;AAChC,UAAG,EAAE,KAAF,CAAQ,GAAG,KAAH,CAAR,IACA,EAAE,KAAF,CAAQ,GAAG,KAAH,CAAS,GAAT,CADR,EACuB,OAAO,EAAP,CAD1B;AAEA,aAAS,GAAG,KAAH,IACA,GAAG,KAAH,CAAS,GAAT,CAAa,CAAb,GAAiB,OAAO,GAAG,IAAH,CAAQ,KAAR,GAAc,CAArB,GAAyB,GAAzB,GACf,MAFF,GAGE,EAHF,CAHuB;KAAlC;AASA,aAAS,YAAT,CAAsB,GAAtB,EAA2B,IAA3B,EAAiC;AAC/B,UAAG,EAAE,KAAF,CAAQ,GAAG,KAAH,CAAR,IACA,EAAE,KAAF,CAAQ,GAAG,KAAH,CAAS,GAAT,CADR,EACuB,OAAO,EAAP,CAD1B;AAEA,aAAS,CAAC,GAAG,IAAH,CAAQ,GAAR,EAAa,IAAb,CAAD,GACE,MADF,GAEI,GAAG,KAAH,IAAY,GAAG,KAAH,CAAS,GAAT,CAAa,GAAb,EAAkB,IAAlB,MAA4B,CAA5B,GACV,MADF,GAEE,EAFF,CALkB;KAAjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3C4B,GAH9B;;AAsIA,kCAAgC,OAAhC,GAA0C,EAA1C,CAhJU;AAiJV,WAAS,+BAAT,GAA2C;AACzC,WAAO;AACL,gBAAU,GAAV;AACA,aAAO,EAAP;AACA,kBAAY,0BAAZ;AACA,oBAAc,QAAd;AACA,wBAAkB;AAChB,cAAM,GAAN;AACA,eAAO,GAAP;OAFF;AAIA,mBAAa,oDAAb;AACA,YAAM,IAAN;KAVF,CADyC;AAazC,aAAS,IAAT,CAAc,KAAd,EAAqB;AACnB,cAAQ,GAAR,CAAY,iBAAZ,EAA+B,KAA/B,EADmB;KAArB;GAbF;CAjJD,CAAD","file":"modelDamage.js","sourcesContent":["(function() {\n  angular.module('clickApp.directives')\n    .controller('clickGameModelDamageCtrl', gameModelDamageCtrl)\n    .directive('clickGameModelDamage', gameModelDamageDirectiveFactory);\n\n  gameModelDamageCtrl.$inject = [\n    '$rootScope',\n    '$scope',\n    // 'gameModels',\n  ];\n  function gameModelDamageCtrl($rootScope,\n                               $scope// ,\n                               // gameModelsModel\n                              ) {\n    const vm = this;\n    console.log('init clickModelDamageCtrl', $scope.info, $scope.state);\n    const state = $rootScope.state;\n\n    vm.range = range;\n    vm.warriorBoxClass = warriorBoxClass;\n    vm.fieldBoxClass = fieldBoxClass;\n    vm.gridBoxClass = gridBoxClass;\n    // vm.doResetDamage = doResetDamage;\n    // vm.doWarriorDamage = doWarriorDamage;\n    // vm.doFieldDamage = doFieldDamage;\n    // vm.doGridDamage = doGridDamage;\n    // vm.doGridColDamage = doGridColDamage;\n\n    activate();\n\n    function activate() {\n      // $rootScope\n      //   .onStateChangeEvent('Game.models.change',\n      //                       updateModel,\n      //                       $scope);\n    }\n    function range(n) {\n      return R.range(0, n);\n    }\n    function warriorBoxClass(i) {\n      if(R.isNil(vm.state) ||\n         R.isNil(vm.state.dmg)) return '';\n      return ( vm.state && vm.state.dmg.n > i\n               ? 'mark'\n               : ''\n             );\n    }\n    function fieldBoxClass(col, line) {\n      if(R.isNil(vm.state) ||\n         R.isNil(vm.state.dmg)) return '';\n      return ( vm.state &&\n               vm.state.dmg.f > line * vm.info.field/2 + col\n               ? 'mark'\n               : ''\n             );\n    }\n    function gridBoxClass(col, line) {\n      if(R.isNil(vm.state) ||\n         R.isNil(vm.state.dmg)) return '';\n      return ( !vm.info[col][line]\n               ? 'none'\n               : ( vm.state && vm.state.dmg[col][line] === 1\n                   ? 'mark'\n                   : ''\n                 )\n             );\n    }\n    // function doResetDamage() {\n    //   if(R.isNil(vm.state)) return;\n\n    //   $rootScope\n    //     .stateEvent('Game.command.execute',\n    //                 'onModels', [\n    //                   'resetDamage',\n    //                   [],\n    //                   [vm.state.stamp]\n    //                 ]);\n    // }\n    // function doWarriorDamage(i) {\n    //   if(R.isNil(vm.state)) return;\n\n    //   $rootScope\n    //     .stateEvent('Game.command.execute',\n    //                 'onModels', [\n    //                   'setWarriorDamage',\n    //                   [state.factions, i],\n    //                   [vm.state.stamp]\n    //                 ]);\n    // }\n    // function doFieldDamage(i) {\n    //   if(R.isNil(vm.state)) return;\n\n    //   $rootScope\n    //     .stateEvent('Game.command.execute',\n    //                 'onModels', [\n    //                   'setFieldDamage',\n    //                   [state.factions, i],\n    //                   [vm.state.stamp]\n    //                 ]);\n    // }\n    // function doGridDamage(line, col) {\n    //   if(R.isNil(vm.state)) return;\n    //   if(R.isNil(vm.info[col][line])) return;\n\n    //   $rootScope\n    //     .stateEvent('Game.command.execute',\n    //                 'onModels', [\n    //                   'setGridDamage',\n    //                   [state.factions, line, col],\n    //                   [vm.state.stamp]\n    //                 ]);\n    // }\n    // function doGridColDamage(col) {\n    //   if(R.isNil(vm.state)) return;\n\n    //   $rootScope\n    //     .stateEvent('Game.command.execute',\n    //                 'onModels', [\n    //                   'setGridColDamage',\n    //                   [state.factions, col],\n    //                   [vm.state.stamp]\n    //                 ]);\n    // }\n    // function updateModel() {\n    //   if(R.isNil(vm.state)) return;\n\n    //   R.thread($rootScope.state)(\n    //     R.path(['game','models']),\n    //     gameModelsModel.findStamp$(vm.state.stamp),\n    //     R.ifElse(\n    //       R.exists,\n    //       (model) => {\n    //         vm.state = model.state;\n    //         $scope.$digest();\n    //       },\n    //       () => {\n    //         vm.state = {};\n    //         $scope.$digest();\n    //       }\n    //     )\n    //   );\n    // }\n  }\n\n  gameModelDamageDirectiveFactory.$inject = [];\n  function gameModelDamageDirectiveFactory() {\n    return {\n      restrict: 'E',\n      scope: {},\n      controller: 'clickGameModelDamageCtrl',\n      controllerAs: 'damage',\n      bindToController: {\n        info: '=',\n        state: '='\n      },\n      templateUrl: 'app/components/game/model/damage/model_damage.html',\n      link: link\n    };\n    function link(scope) {\n      console.log('gameModelDamage', scope);\n    }\n  }\n})();\n"]}