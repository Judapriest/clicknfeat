{"version":3,"sources":["gameRuler.es6"],"names":[],"mappings":"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","file":"gameRuler.js","sourcesContent":["(function() {\n  angular.module('clickApp.directives')\n    .directive('clickGameRuler', gameRulerDirectiveFactory);\n\n  gameRulerDirectiveFactory.$inject = [\n    'gameMap',\n    'gameRuler',\n    'gameModels',\n    'gameFactions',\n    'modes',\n  ];\n  function gameRulerDirectiveFactory(gameMapModel,\n                                     gameRulerModel,\n                                     gameModelsModel,\n                                     gameFactionsModel,\n                                     modesModel) {\n    return {\n      restrict: 'A',\n      scope: true,\n      link: link\n    };\n    function link(scope) {\n      scope.onStateChangeEvent('Game.ruler.local.change', updateRuler, scope);\n      scope.onStateChangeEvent('Game.ruler.remote.change', updateRuler, scope);\n      scope.onStateChangeEvent('Game.map.flipped', updateRuler, scope);\n\n      function updateRuler() {\n        const map = document.getElementById('map');\n        const map_flipped = gameMapModel.isFlipped(map);\n        const state = scope.state;\n        const ruler = state.game.ruler;\n        const label_center = {\n          x: (ruler.remote.end.x - ruler.remote.start.x) / 2 + ruler.remote.start.x,\n          y: (ruler.remote.end.y - ruler.remote.start.y) / 2 + ruler.remote.start.y\n        };\n        scope.render = {\n          local: { show: ruler.local.display,\n                   x1: ruler.local.start.x,\n                   y1: ruler.local.start.y,\n                   x2: ruler.local.end.x,\n                   y2: ruler.local.end.y\n                 },\n          remote: { show: ruler.remote.display,\n                    x1: ruler.remote.start.x,\n                    y1: ruler.remote.start.y,\n                    x2: ruler.remote.end.x,\n                    y2: ruler.remote.end.y\n                  },\n          label: renderText({ flipped: map_flipped,\n                              flip_center: label_center,\n                              text_center: label_center\n                            }, ruler.remote.length)\n        };\n        scope.render.label.show = ruler.remote.display;\n        const in_ruler_mode = modesModel.currentModeName(state.modes) === 'Ruler';\n        scope.render.origin =\n          updateOrigin(state.factions, state.game.models, in_ruler_mode, ruler.remote);\n        scope.render.target =\n          updateTarget(state.factions, state.game.models, in_ruler_mode, ruler.remote);\n        scope.$digest();\n      }\n    }\n    function renderText({ rotate = 0,\n                          flipped = false,\n                          flip_center = { x: 240, y: 240 },\n                          text_center = { x: 240, y: 240 },\n                        }, text) {\n      text += '';\n      rotate += (flipped ? 180 : 0);\n      const transform = `rotate(${rotate},${flip_center.x},${flip_center.y})`;\n      const x = text_center.x;\n      const y = text_center.y;\n      const bkg_width = R.length(text) * 5;\n      const bkg_x = text_center.x - bkg_width / 2;\n      const bkg_y = text_center.y - 5;\n      return {\n        text,\n        x, y, transform,\n        bkg_x, bkg_y, bkg_width\n      };\n    }\n    function updateOrigin(factions, models, in_ruler_mode, remote) {\n      if(R.isNil(remote.origin) ||\n         (!remote.display && !in_ruler_mode)) return null;\n\n      const origin_model = gameModelsModel\n              .findStamp(remote.origin, models);\n      if(R.isNil(origin_model)) return null;\n\n      const origin_info = gameFactionsModel\n              .getModelInfo(origin_model.state.info, factions);\n      if(R.isNil(origin_info)) return null;\n\n      return {\n        cx: origin_model.state.x,\n        cy: origin_model.state.y,\n        radius: origin_info.base_radius\n      };\n    }\n    function updateTarget(factions, models, in_ruler_mode, remote) {\n      if(R.isNil(remote.target) ||\n         (!remote.display && !in_ruler_mode)) return null;\n\n      const target_model = gameModelsModel\n              .findStamp(remote.target, models);\n      if(R.isNil(target_model)) return null;\n\n      const target_info = gameFactionsModel\n              .getModelInfo(target_model.state.info, factions);\n      if(R.isNil(target_info)) return null;\n\n      const reached = gameRulerModel.targetReached({ remote });\n\n      return {\n        cx: target_model.state.x,\n        cy: target_model.state.y,\n        radius: target_info.base_radius,\n        reached\n      };\n    }\n  }\n})();\n"]}