{"version":3,"sources":["gameMap.es6"],"names":[],"mappings":";;;;AAAA,CAAC,YAAW;AACV,UAAQ,MAAR,CAAe,qBAAf,EACG,SADH,CACa,cADb,EAC6B,4BAD7B,EADU;;AAIV,+BAA6B,OAA7B,GAAuC,CACrC,SADqC;;AAGrC,cAHqC,CAAvC,CAJU;AASV,WAAS,4BAAT,CAAsC,cAAtC;;AAEsC,iBAFtC,EAEuD;AACrD,QAAM,MAAM;MACF,EAAE,IAAF,CAAO,QAAQ,GAAR,EAAa,OAApB,CADE,GAEF,YAAW,EAAX,CAH2C;AAIrD,WAAO;AACL,gBAAU,GAAV;AACA,YAAM,IAAN;KAFF,CAJqD;;AASrD,aAAS,IAAT,CAAc,KAAd,EAAqB,OAArB,EAA8B;AAC5B,UAAM,WAAW,SAAS,aAAT,CAAuB,WAAvB,CAAX,CADsB;AAE5B,UAAM,MAAM,QAAQ,CAAR,CAAN,CAFsB;AAG5B,UAAM,QAAQ,MAAM,KAAN;;;;;AAHc,UAQtB,aAAa,iBAAb,CARsB;AAS5B,UAAM,eAAe,mBAAf;;;;;AATsB,SAc5B,CAAI,gBAAJ,CAAqB,WAArB,EAAkC,UAAC,KAAD,EAAW;AAC3C,cAAM,cAAN,GAD2C;OAAX,CAAlC;;;;;;AAd4B,WAsB5B,CAAM,kBAAN,CAAyB,kBAAzB,EAA6C,WAAW,EAAX,EAAe,KAA5D,EAtB4B;AAuB5B,YAAM,kBAAN,CAAyB,mBAAzB,EAA8C,WAAW,GAAX,EAAgB,KAA9D,EAvB4B;AAwB5B,YAAM,kBAAN,CAAyB,qBAAzB,EAAgD,WAAW,KAAX,EAAkB,KAAlE,EAxB4B;AAyB5B,YAAM,kBAAN,CAAyB,sBAAzB,EAAiD,aAAa,IAAb,EAAmB,KAApE,EAzB4B;AA0B5B,YAAM,kBAAN,CAAyB,uBAAzB,EAAkD,aAAa,KAAb,EAAoB,KAAtE,EA1B4B;AA2B5B,YAAM,kBAAN,CAAyB,oBAAzB,EAA+C,aAAa,EAAb,EAAiB,KAAhE,EA3B4B;AA4B5B,YAAM,kBAAN,CAAyB,sBAAzB,EAAiD,aAAa,IAAb,EAAmB,KAApE,EA5B4B;;AA8B5B,WAAK,MAAL,CAAY,qBAAZ,CAAkC,WAAW,KAAX,CAAlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9B4B,eAgPnB,eAAT,GAA2B;AACzB,eAAO;AACL,gBAAM,MAAN;AACA,eAAK,OAAL;AACA,iBAAO,SAAP;SAHF,CADyB;;AAOzB,iBAAS,SAAT,GAAqB;AACnB,cAAM,OAAO,SAAS,qBAAT,EAAP,CADa;AAEnB,cAAM,KAAK,KAAK,GAAL,CAAS,KAAK,KAAL,EAAY,KAAK,MAAL,CAA1B,CAFa;AAGnB,2BAAiB,KAAG,EAAH,CAAjB,CAHmB;SAArB;AAKA,iBAAS,MAAT,GAAkB;AAChB,cAAM,cAAc,gBAAgB,QAAhB,GAA2B,UAA3B,CADJ;;oCAEQ,qBAFR;;;;;;cAEV,8BAFU;cAEP,8BAFO;;;;cAEF,+BAFE;cAEC,+BAFD;;AAIhB,cAAM,OAAO,IAAI,qBAAJ,EAAP,CAJU;AAKhB,eAAK,EAAC,GAAK,KAAK,KAAL,GAAc,KAAK,KAAL,GAAa,WAAb,GAA2B,EAA/C,CALW;AAMhB,eAAK,EAAC,GAAK,KAAK,MAAL,GAAe,KAAK,MAAL,GAAc,WAAd,GAA4B,EAAjD,CANW;;AAQhB,2BAAiB,KAAK,KAAL,GAAa,WAAb,CAAjB,CARgB;AAShB,4BAAkB,KAAK,WAAL,EAAkB,KAAK,WAAL,EAAkB,EAAtD,EAA0D,EAA1D,EATgB;SAAlB;AAWA,iBAAS,OAAT,GAAmB;AACjB,cAAM,cAAc,gBAAgB,QAAhB,GAA2B,UAA3B,CADH;;qCAES,qBAFT;;;;;;cAET,8BAFS;cAEN,8BAFM;;;;cAED,+BAFC;cAEE,+BAFF;;AAGjB,cAAM,KAAK,KAAK,GAAL,CAAS,EAAT,EAAa,EAAb,CAAL,CAHW;;AAKjB,cAAM,OAAO,IAAI,qBAAJ,EAAP,CALW;;AAOjB,2BAAiB,KAAK,GAAL,CAAS,KAAG,EAAH,EAAO,KAAK,KAAL,GAAa,WAAb,CAAjC,EAPiB;AAQjB,4BAAkB,KAAK,WAAL,EAAkB,KAAK,WAAL,EAAkB,EAAtD,EAA0D,EAA1D,EARiB;SAAnB;OAvBF;;AAmCA,eAAS,iBAAT,GAA6B;AAC3B,eAAO;AACL,gBAAM,UAAN;AACA,iBAAO,WAAP;AACA,cAAI,QAAJ;AACA,gBAAM,UAAN;SAJF,CAD2B;;AAQ3B,iBAAS,UAAT,GAAsB;AACpB,cAAM,cAAc,gBAAgB,QAAhB,GAA2B,UAA3B,CADA;AAEpB,cAAM,OAAO,SAAS,UAAT,CAFO;AAGpB,eAAK,MAAL,CAAY,qBAAZ,CAAkC,YAAM;AACtC,qBAAS,UAAT,GAAsB,OAAO,WAAP,CADgB;WAAN,CAAlC,CAHoB;SAAtB;AAOA,iBAAS,WAAT,GAAuB;AACrB,cAAM,cAAc,gBAAgB,QAAhB,GAA2B,UAA3B,CADC;AAErB,cAAM,OAAO,SAAS,UAAT,CAFQ;AAGrB,eAAK,MAAL,CAAY,qBAAZ,CAAkC,YAAM;AACtC,qBAAS,UAAT,GAAsB,OAAO,WAAP,CADgB;WAAN,CAAlC,CAHqB;SAAvB;AAOA,iBAAS,QAAT,GAAoB;AAClB,cAAM,cAAc,gBAAgB,QAAhB,GAA2B,UAA3B,CADF;AAElB,cAAM,MAAM,SAAS,SAAT,CAFM;AAGlB,eAAK,MAAL,CAAY,qBAAZ,CAAkC,YAAM;AACtC,qBAAS,SAAT,GAAqB,MAAM,WAAN,CADiB;WAAN,CAAlC,CAHkB;SAApB;AAOA,iBAAS,UAAT,GAAsB;AACpB,cAAM,cAAc,gBAAgB,QAAhB,GAA2B,UAA3B,CADA;AAEpB,cAAM,MAAM,SAAS,SAAT,CAFQ;AAGpB,eAAK,MAAL,CAAY,qBAAZ,CAAkC,YAAM;AACtC,qBAAS,SAAT,GAAqB,MAAM,WAAN,CADiB;WAAN,CAAlC,CAHoB;SAAtB;OA7BF;;AAsCA,eAAS,gBAAT,CAA0B,GAA1B,EAA+B;AAC7B,YAAI,KAAJ,CAAU,KAAV,GAAkB,MAAI,IAAJ,CADW;AAE7B,YAAI,KAAJ,CAAU,MAAV,GAAmB,MAAI,IAAJ,CAFU;OAA/B;AAIA,eAAS,kBAAT,GAA8B;AAC5B,YAAM,OAAO,SAAS,qBAAT,EAAP,CADsB;AAE5B,YAAM,KAAK,KAAK,KAAL,CAFiB;AAG5B,YAAM,KAAK,KAAK,MAAL,CAHiB;;AAK5B,YAAM,KAAK,SAAS,UAAT,GAAsB,KAAG,CAAH,CALL;AAM5B,YAAM,KAAK,SAAS,SAAT,GAAqB,KAAG,CAAH,CANJ;;AAQ5B,eAAO,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,EAAW,CAAC,EAAD,EAAK,EAAL,CAAX,CAAP,CAR4B;OAA9B;AAUA,eAAS,iBAAT,CAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C;AACzC,iBAAS,UAAT,GAAsB,KAAK,KAAG,CAAH,CADc;AAEzC,iBAAS,SAAT,GAAqB,KAAK,KAAG,CAAH,CAFe;OAA3C;KAvUF;GAXF;AAwVA,WAAS,eAAT,CAAyB,CAAzB,EAA4B;AAC1B,QAAM,YAAY,EAAZ,CADoB;;AAG1B,QAAI,EAAE,QAAF,EAAY;AACd,gBAAU,IAAV,CAAe,OAAf,EADc;KAAhB;;AAIA,QAAI,EAAE,MAAF,EAAU;AACZ,gBAAU,IAAV,CAAe,KAAf,EADY;KAAd;;AAIA,QAAI,EAAE,OAAF,EAAW;AACb,gBAAU,IAAV,CAAe,MAAf,EADa;KAAf;;AAIA,QAAI,EAAE,OAAF,EAAW;AACb,gBAAU,IAAV,CAAe,MAAf,EADa;KAAf;;AAIA,WAAO,UAAU,IAAV,EAAP,CAnB0B;GAA5B;CAjWD,CAAD","file":"gameMap.js","sourcesContent":["(function() {\n  angular.module('clickApp.directives')\n    .directive('clickGameMap', clickGameMapDirectiveFactory);\n\n  clickGameMapDirectiveFactory.$inject = [\n    'gameMap',\n    // 'terrain',\n    'commonMode',\n  ];\n  function clickGameMapDirectiveFactory(gameMapService,\n                                        // terrainModel,\n                                        commonModeModel) {\n    const log = true // eslint-disable-line\n            ? R.bind(console.log, console)\n            : function() {};\n    return {\n      restrict: 'A',\n      link: link\n    };\n\n    function link(scope, element) {\n      const viewport = document.querySelector('#viewport');\n      const map = element[0];\n      const state = scope.state;\n\n      // const mouseEvents = buildMouseEvents();\n      // const moveEvents = buildMoveEvents();\n      // const flipMap = buildFlipMap();\n      const zoomEvents = buildZoomEvents();\n      const scrollEvents = buildScrollEvents();\n\n      // map.addEventListener('mouseup', mouseEvents.click);\n      // map.addEventListener('mousedown', mouseEvents.down);\n      // map.addEventListener('mouseleave', mouseEvents.leave);\n      map.addEventListener('dragstart', (event) => {\n        event.preventDefault();\n      });\n      // map.addEventListener('contextmenu', mouseEvents.rightClick);\n\n      // scope.onStateChangeEvent('Game.view.flipMap', flipMap, scope);\n      // scope.onStateChangeEvent('Game.moveMap.enable', moveEvents.enable, scope);\n      // scope.onStateChangeEvent('Game.moveMap.disable', moveEvents.disable, scope);\n      scope.onStateChangeEvent('Game.view.zoomIn', zoomEvents.in, scope);\n      scope.onStateChangeEvent('Game.view.zoomOut', zoomEvents.out, scope);\n      scope.onStateChangeEvent('Game.view.zoomReset', zoomEvents.reset, scope);\n      scope.onStateChangeEvent('Game.view.scrollLeft', scrollEvents.left, scope);\n      scope.onStateChangeEvent('Game.view.scrollRight', scrollEvents.right, scope);\n      scope.onStateChangeEvent('Game.view.scrollUp', scrollEvents.up, scope);\n      scope.onStateChangeEvent('Game.view.scrollDown', scrollEvents.down, scope);\n\n      self.window.requestAnimationFrame(zoomEvents.reset);\n\n      // function buildMouseEvents() {\n      //   const drag = {\n      //     active: false,\n      //     start: null,\n      //     target: null,\n      //     now: null\n      //   };\n\n      //   const dragStart$ = R.curry(dragStart);\n      //   const emitClickEvent$ = R.curry(emitClickEvent);\n\n      //   return {\n      //     down: mouseDownMap,\n      //     drag: dragMap,\n      //     leave: mouseLeaveMap,\n      //     click: clickMap,\n      //     rightClick: rightClickMap,\n      //     move: moveMap\n      //   };\n\n      //   function mouseDownMap(event) {\n      //     log('mouseDownMap', event, map.getBoundingClientRect());\n      //     blurInputs();\n      //     event.preventDefault();\n      //     if(event.which !== 1) return;\n\n      //     map.addEventListener('mousemove', dragMap);\n      //     const start = gameMapService.eventToMapCoordinates(map, event);\n      //     gameMapService.findEventTarget(state.game, event)\n      //       .then(dragStart$(start));\n\n      //   }\n\n      //   function dragMap(event) {\n      //     log('dragMap', event);\n      //     event.preventDefault();\n      //     if(event.which !== 1) return;\n\n      //     drag.now = gameMapService.eventToMapCoordinates(map, event);\n      //     if(!drag.active &&\n      //        currentDragIsBellowThreshold()) {\n      //       return;\n      //     }\n      //     const emit = drag.active ? 'drag' : 'dragStart';\n      //     drag.active = true;\n\n      //     if('Terrain' === drag.target.type &&\n      //        terrainService.isLocked(drag.target.target)) {\n      //       drag.target = { type: 'Map',\n      //                       target: null\n      //                     };\n      //     }\n      //     scope.stateEvent('Modes.current.action',\n      //                      emit+drag.target.type,\n      //                      [ { target: drag.target.target,\n      //                          start: drag.start,\n      //                          now: drag.now\n      //                        },\n      //                        event\n      //                      ]);\n\n      //   }\n\n      //   function mouseLeaveMap(event) {\n      //     log('mouseLeaveMap', event);\n      //     event.preventDefault();\n\n      //     map.removeEventListener('mousemove', dragMap);\n      //     if(drag.active) dragEnd(event);\n      //   }\n\n      //   function clickMap(event) {\n      //     log('clickMap', event);\n      //     event.preventDefault();\n      //     if(event.which !== 1) return;\n\n      //     map.removeEventListener('mousemove', dragMap);\n\n      //     const now = gameMapService.eventToMapCoordinates(map, event);\n      //     if(drag.active) {\n      //       drag.now = now;\n      //       dragEnd(event);\n      //     }\n      //     else {\n      //       gameMapService.findEventTarget(state.game, event)\n      //         .then(emitClickEvent$('click', event, now));\n      //     }\n      //   }\n\n      //   function rightClickMap(event) {\n      //     log('rightClickMap', event);\n      //     event.preventDefault();\n\n      //     const now = gameMapService.eventToMapCoordinates(map, event);\n      //     gameMapService.findEventTarget(state.game, event)\n      //       .then(emitClickEvent$('rightClick', event, now));\n      //   }\n\n      //   function moveMap(event) {\n      //     log('moveMap', event);\n      //     event.preventDefault();\n\n      //     const now = gameMapService.eventToMapCoordinates(map, event);\n      //     scope.stateEvent('Modes.current.action',\n      //                      'moveMap', [now, event]);\n      //   }\n\n      //   function blurInputs() {\n      //     const inputs = [\n      //         ...document.querySelectorAll('input'),\n      //         ...document.querySelectorAll('select'),\n      //         ...document.querySelectorAll('textarea'),\n      //     ];\n      //     R.forEach((e) => { e.blur(); }, inputs);\n      //   }\n      //   function emitClickEvent(type, event, now, target) {\n      //     const event_name = R.thread(event)(\n      //       _eventModifiers,\n      //       R.append( + target.type),\n      //       R.join('+')\n      //     );\n      //     event['click#'] = {\n      //       target: target.target,\n      //       x: now.x,\n      //       y: now.y\n      //     };\n      //     state.queueChangeEventP('Game.selectionDetail.close');\n      //     state.queueChangeEventP('Game.editLabel.close');\n      //     state.queueChangeEventP('Game.editDamage.close');\n      //     Mousetrap.trigger(event_name, undefined, event);\n      //   }\n\n      //   function dragStart(start, target) {\n      //     drag = {\n      //       active: false,\n      //       start: start,\n      //       target: target,\n      //       now: null\n      //     };\n      //   }\n      //   function dragEnd(event) {\n      //     drag.active = false;\n      //     scope.stateEvent('Modes.current.action',\n      //                      'dragEnd'+drag.target.type,\n      //                      [ { target: drag.target.target,\n      //                          start: drag.start,\n      //                          now: drag.now\n      //                        },\n      //                        event\n      //                      ]);\n      //   }\n      // function currentDragIsBellowThreshold() {\n      //   const epsilon = commonModeService.moves().DragEpsilon;\n      //   return ( Math.abs(drag.now.x - drag.start.x) < epsilon &&\n      //            Math.abs(drag.now.y - drag.start.y) < epsilon\n      //          );\n      // }\n      // }\n\n      // function buildMoveEvents() {\n      //   const move_enabled = false;\n      //   return {\n      //     enable: onEnableMove,\n      //     disable: onDisableMove\n      //   };\n\n      //   function onEnableMove() {\n      //     if(move_enabled) return;\n      //     map.addEventListener('mousemove', mouseEvents.move);\n      //     move_enabled = true;\n      //   }\n\n      //   function onDisableMove() {\n      //     if(!move_enabled) return;\n      //     map.removeEventListener('mousemove', mouseEvents.move);\n      //     move_enabled = false;\n      //   }\n      // }\n\n      // function buildFlipMap() {\n      //   let deploiement_labels;\n      //   init();\n      //   return onFlipMap;\n\n      //   function init() {\n      //     state.ui_state = R.thread(state)(\n      //       R.propOr({}, 'ui_state'),\n      //       R.assoc('flip_map', false)\n      //     );\n      //     map.classList.remove('flipped');\n      //   }\n\n      //   function onFlipMap() {\n      //     deploiement_labels = document.querySelector('#deploiement-labels');\n      //     state.ui_state.flip_map = !map.classList.contains('flipped');\n      //     map.classList.toggle('flipped');\n      //     if(state.ui_state.flip_map) {\n      //       deploiement_labels\n      //         .setAttribute('transform','rotate(180,240,240)');\n      //     }\n      //     else {\n      //       deploiement_labels\n      //         .setAttribute('transform','');\n      //     }\n      //     state.changeEvent('Game.map.flipped');\n      //   };\n      // }\n\n      function buildZoomEvents() {\n        return {\n          'in': zoomIn,\n          out: zoomOut,\n          reset: zoomReset\n        };\n\n        function zoomReset() {\n          const rect = viewport.getBoundingClientRect();\n          const hw = Math.min(rect.width, rect.height);\n          setMapDimensions(hw-15);\n        }\n        function zoomIn() {\n          const zoom_factor = commonModeModel.settings().ZoomFactor;\n          let [[cx,cy],[vw,vh]] = findViewportCenter();\n\n          const rect = map.getBoundingClientRect();\n          cx = (vw > rect.width) ? rect.width / zoom_factor : cx;\n          cy = (vh > rect.height) ? rect.height / zoom_factor : cy;\n\n          setMapDimensions(rect.width * zoom_factor);\n          setViewportCenter(cx * zoom_factor, cy * zoom_factor, vw, vh);\n        }\n        function zoomOut() {\n          const zoom_factor = commonModeModel.settings().ZoomFactor;\n          const [[cx,cy],[vw,vh]] = findViewportCenter();\n          const hw = Math.min(vw, vh);\n\n          const rect = map.getBoundingClientRect();\n\n          setMapDimensions(Math.max(hw-15, rect.width / zoom_factor));\n          setViewportCenter(cx / zoom_factor, cy / zoom_factor, vw, vh);\n        }\n      }\n\n      function buildScrollEvents() {\n        return {\n          left: scrollLeft,\n          right: scrollRight,\n          up: scrollUp,\n          down: scrollDown\n        };\n\n        function scrollLeft() {\n          const scroll_step = commonModeModel.settings().ScrollStep;\n          const left = viewport.scrollLeft;\n          self.window.requestAnimationFrame(() => {\n            viewport.scrollLeft = left - scroll_step;\n          });\n        }\n        function scrollRight() {\n          const scroll_step = commonModeModel.settings().ScrollStep;\n          const left = viewport.scrollLeft;\n          self.window.requestAnimationFrame(() => {\n            viewport.scrollLeft = left + scroll_step;\n          });\n        }\n        function scrollUp() {\n          const scroll_step = commonModeModel.settings().ScrollStep;\n          const top = viewport.scrollTop;\n          self.window.requestAnimationFrame(() => {\n            viewport.scrollTop = top - scroll_step;\n          });\n        }\n        function scrollDown() {\n          const scroll_step = commonModeModel.settings().ScrollStep;\n          const top = viewport.scrollTop;\n          self.window.requestAnimationFrame(() => {\n            viewport.scrollTop = top + scroll_step;\n          });\n        }\n      }\n\n      function setMapDimensions(dim) {\n        map.style.width = dim+'px';\n        map.style.height = dim+'px';\n      }\n      function findViewportCenter() {\n        const rect = viewport.getBoundingClientRect();\n        const vw = rect.width;\n        const vh = rect.height;\n\n        const cx = viewport.scrollLeft + vw/2;\n        const cy = viewport.scrollTop + vh/2;\n\n        return [[cx, cy], [vw, vh]];\n      }\n      function setViewportCenter(cx, cy, vw, vh) {\n        viewport.scrollLeft = cx - vw/2;\n        viewport.scrollTop = cy - vh/2;\n      }\n    }\n  }\n  function _eventModifiers(e) {\n    const modifiers = [];\n\n    if (e.shiftKey) {\n      modifiers.push('shift');\n    }\n\n    if (e.altKey) {\n      modifiers.push('alt');\n    }\n\n    if (e.ctrlKey) {\n      modifiers.push('ctrl');\n    }\n\n    if (e.metaKey) {\n      modifiers.push('meta');\n    }\n\n    return modifiers.sort();\n  }\n})();\n"]}