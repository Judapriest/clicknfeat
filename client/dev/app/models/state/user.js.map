{"version":3,"sources":["user.es6"],"names":[],"mappings":"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","file":"user.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('stateUser', stateUserServiceFactory);\n\n  const KEEP_ALIVE_INTERVAL_SECONDS = 60;\n  stateUserServiceFactory.$inject = [\n    'user',\n    'userConnection',\n    'http',\n    'prompt',\n    'appState',\n    'state',\n  ];\n  function stateUserServiceFactory(userModel,\n                                   userConnectionModel,\n                                   httpService,\n                                   promptService,\n                                   appStateService,\n                                   stateModel) {\n    const USER_LENS = R.lensProp('user');\n\n    const stateUserModel = {\n      create: stateUserCreate,\n      watch: stateUserWatch,\n      onUserSet: stateUserOnSet,\n      onUserUpdate: stateUserOnUpdate,\n      onUserToggleOnline: stateOnUserToggleOnline,\n      onUserSendChatMsg: stateOnUserSendChatMsg,\n      onUserConnectionClose: stateOnUserConnectionClose,\n      onUserSetOnlineUsers: stateOnUserSetOnlineUsers,\n      onUserSetOnlineGames: stateOnUserSetOnlineGames,\n      onUserNewChatMsg: stateOnUserNewChatMsg,\n      onUserStateChange: stateUserOnChange,\n      onUserIsValid: stateUserOnIsValid,\n      updateOnlineKeepAlive: stateUserUpdateOnlineKeepAlive,\n      filterChatReceived: stateUserFilterChatReceived\n    };\n    R.curryService(stateUserModel);\n    stateModel.register(stateUserModel);\n    return stateUserModel;\n\n    function stateUserCreate(state) {\n      console.log('create stateUser');\n\n      appStateService\n        .addReducer('User.set'              , stateUserModel.onUserSet)\n        .addReducer('User.update'           , stateUserModel.onUserUpdate)\n        .addReducer('User.toggleOnline'     , stateUserModel.onUserToggleOnline)\n        .addReducer('User.sendChatMsg'      , stateUserModel.onUserSendChatMsg)\n        .addReducer('User.connection.close' , stateUserModel.onUserConnectionClose)\n        .addReducer('User.setOnlineUsers'   , stateUserModel.onUserSetOnlineUsers)\n        .addReducer('User.setOnlineGames'   , stateUserModel.onUserSetOnlineGames)\n        .addReducer('User.newChatMsg'       , stateUserModel.onUserNewChatMsg)\n        .addListener('User.state.change'    , stateUserModel.onUserStateChange)\n        .addListener('User.isValid'         , stateUserModel.onUserIsValid);\n\n      appStateService\n        .onChange('AppState.change',\n                  'User.state.change',\n                  R.compose(R.prop('state'), R.view(USER_LENS)));\n      appStateService\n        .onChange('AppState.change',\n                  'User.connection.change',\n                  R.compose(R.prop('connection'), R.view(USER_LENS)));\n      appStateService\n        .onChange('AppState.change',\n                  'User.isValid',\n                  R.compose(userModel.isValid, R.view(USER_LENS)));\n      appStateService\n        .onChange('AppState.change',\n                  'User.isOnline',\n                  R.compose(userModel.online, R.view(USER_LENS)));\n      appStateService\n        .onChange('AppState.change',\n                  'User.chat.new',\n                  R.pipe(\n                    R.view(USER_LENS),\n                    R.pathOr([], ['connection', 'chat']),\n                    R.last\n                  ));\n      appStateService\n        .filterEvent('User.chat.new',\n                     'User.chat.receive',\n                     stateUserModel.filterChatReceived);\n      appStateService\n        .cell('User.isOnline',\n              stateUserModel.updateOnlineKeepAlive,\n              null);\n\n      const user_ready = R.threadP()(\n        userModel.initP,\n        (user) => appStateService.reduce('User.set', user)\n      );\n      return R.thread(state)(\n        R.set(USER_LENS, { init: false }),\n        R.assoc('user_ready', user_ready)\n      );\n    }\n    let _user;\n    function stateUserWatch(state) {\n      const user = R.view(USER_LENS, state);\n      if(user === _user) return;\n      _user = user;\n      appStateService.emit('User.change', user);\n    }\n    function stateUserOnSet(state, _event_, [user]) {\n      return R.set(USER_LENS, user, state);\n    }\n    function stateUserOnUpdate(state, _event_, [user_state]) {\n      return R.over(\n        USER_LENS,\n        R.assoc('state', user_state),\n        state\n      );\n    }\n    function stateOnUserToggleOnline(state) {\n      R.threadP(state)(\n        R.view(USER_LENS),\n        userModel.toggleOnlineP,\n        (user) => appStateService.reduce('User.set', user)\n      );\n    }\n    function stateOnUserSendChatMsg(state, _event_, [chat]) {\n      R.threadP(state)(\n        R.view(USER_LENS),\n        userConnectionModel.sendChatP$(chat)\n      );\n    }\n    function stateOnUserConnectionClose(state) {\n      return R.threadP(state)(\n        R.view(USER_LENS),\n        R.rejectIfP(R.complement(userModel.online),\n                    'User not online when connection close'),\n        () => promptService\n          .promptP('alert','Server connection lost.')\n          .catch(R.always(null)),\n        () => {\n          const state = appStateService.current();\n          return userModel.toggleOnlineP(R.view(USER_LENS, state));\n        },\n        (user) => appStateService.reduce('User.set', user)\n      );\n    }\n    function stateOnUserSetOnlineUsers(state, _event_, [users]) {\n      return R.over(\n        USER_LENS,\n        R.assocPath(['connection','users'], users),\n        state\n      );\n    }\n    function stateOnUserSetOnlineGames(state, _event_, [games]) {\n      return R.over(\n        USER_LENS,\n        R.assocPath(['connection','games'], games),\n        state\n      );\n    }\n    function stateOnUserNewChatMsg(state, _event_, [msg]) {\n      return R.over(\n        USER_LENS,\n        R.over(R.lensPath(['connection','chat']), R.pipe(\n          R.defaultTo([]),\n          R.append(msg)\n        )),\n        state\n      );\n    }\n    function stateUserOnChange() {\n      const user = R.view(USER_LENS, appStateService.current());\n      userModel.save(user);\n    }\n    function stateUserOnIsValid(_event_, [is_valid]) {\n      if(!is_valid) {\n        appStateService.emit('User.becomesInvalid');\n      }\n      else {\n        appStateService.emit('User.becomesValid');\n      }\n    }\n    function stateUserUpdateOnlineKeepAlive(interval, is_online) {\n      if(is_online) {\n        const user = R.view(USER_LENS, appStateService.current());\n        return registerKeepAliveInterval(interval, user);\n      }\n      else {\n        return clearKeepAliveInterval(interval);\n      }\n    }\n    function registerKeepAliveInterval(interval, user) {\n      if(R.exists(interval)) return interval;\n\n      return self.window\n        .setInterval(keepAliveRequest(user),\n                     KEEP_ALIVE_INTERVAL_SECONDS * 1000);\n    }\n    function clearKeepAliveInterval(interval) {\n      if(R.isNil(interval)) return null;\n\n      self.window.clearInterval(interval);\n      return null;\n    }\n    function keepAliveRequest(user) {\n      return () => {\n        httpService\n          .getP(`/api/users/${user.state.stamp}`)\n          .then(R.spyInfo('** keepAlive'));\n      };\n    }\n    function stateUserFilterChatReceived(chat) {\n      const user = R.view(USER_LENS, appStateService.current());\n      return ( R.exists(chat) &&\n               R.exists(chat.from) &&\n               chat.from !== user.state.stamp\n             );\n    }\n  }\n})();\n"]}