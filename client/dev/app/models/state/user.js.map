{"version":3,"sources":["user.es6"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AACV,UAAQ,MAAR,CAAe,mBAAf,EACG,OADH,CACW,WADX,EACwB,uBADxB,EADU;;AAIV,0BAAwB,OAAxB,GAAkC,CAChC,MADgC,CAAlC,CAJU;;;;AASV,WAAS,uBAAT,CAAiC,SAAjC,EAA4C;;;AAG1C,QAAM,mBAAmB;AACvB,YAAM,aAAN;AACA,YAAM,aAAN;AACA,mBAAa,oBAAb;AACA,iBAAW,cAAX;KAJI,CAHoC;;;;;;;AAe1C,QAAM,WAAW,EAAE,KAAF,CAAQ,OAAR,CAAX,CAfoC;AAgB1C,MAAE,YAAF,CAAe,gBAAf,EAhB0C;AAiB1C,WAAO,gBAAP,CAjB0C;;AAmB1C,aAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC5B,YAAM,IAAN,GAAa,EAAb,CAD4B;AAE5B,YAAM,UAAN,GAAmB,IAAI,KAAK,OAAL,CAAa,UAAC,OAAD,EAAa;AAC/C,cAAM,OAAN,CAAc,YAAd,EACc,iBAAiB,YAAjB,CAA8B,KAA9B,EAAqC,OAArC,CADd,EAD+C;OAAb,CAApC,CAF4B;;AAO5B,YAAM,OAAN,CAAc,UAAd,EACc,iBAAiB,UAAjB,CAA4B,KAA5B,CADd;;;;;;;;;;;;;;AAP4B,aAsBrB,KAAP,CAtB4B;KAA9B;AAwBA,aAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC5B,UAAG,MAAM,KAAN,KAAgB,MAAM,IAAN,EAAY,OAAO,IAAP,CAA/B;AACA,YAAM,KAAN,GAAc,MAAM,IAAN,CAFc;AAG5B,aAAO,UAAU,IAAV,CAAe,MAAM,IAAN,CAAtB,CAH4B;KAA9B;AAKA,aAAS,oBAAT,CAA8B,KAA9B,EAAqC,KAArC,EAA4C,KAA5C,EAAmD;AACjD,cAAQ,KAAR,CADiD;AAEjD,aAAO,EAAE,KAAF,CACL,UAAU,IAAV,EACA,SAAS,KAAT,CAFK,EAGL,YAAM;AAAE,cAAM,UAAN,CAAiB,SAAjB,GAA6B,IAA7B,CAAF;OAAN,EACA,KAJK,EAKL,KALK,CAAP,CAFiD;KAAnD;AASA,aAAS,cAAT,CAAwB,KAAxB,EAA+B,KAA/B,EAAsC,UAAtC,EAAkD;AAChD,aAAO,EAAE,WAAF,CACL,EAAE,KAAF,CAAQ,OAAR,EAAiB,UAAjB,CADK;;AAGL,eAAS,KAAT,CAHK,EAIL,MAAM,IAAN,CAJF,CADgD;KAAlD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzD0C,aAoHjC,OAAT,CAAiB,KAAjB,EAAwB,IAAxB,EAA8B;AAC5B,YAAM,IAAN,GAAa,IAAb,CAD4B;AAE5B,cAAQ,GAAR,CAAY,cAAZ,EAA4B,MAAM,IAAN,CAA5B,CAF4B;AAG5B,YAAM,gBAAN,CAAuB,aAAvB,EAH4B;KAA9B;GApHF;CATD,CAAD","file":"user.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('stateUser', stateUserServiceFactory);\n\n  stateUserServiceFactory.$inject = [\n    'user',\n    // 'userConnection',\n    // 'prompt',\n  ];\n  function stateUserServiceFactory(userModel) {\n                                   // userConnectionService,\n                                   // promptService) {\n    const stateUserService = {\n      init: stateUserInit,\n      save: stateUserSave,\n      onStateInit: stateUserOnStateInit,\n      onUserSet: stateUserOnSet,\n      // onUserToggleOnline: stateOnUserToggleOnline,\n      // onUserSendChatMsg: stateOnUserSendChatMsg,\n      // onUserConnectionClose: stateOnUserConnectionClose,\n      // onUserSetOnlineUsers: stateOnUserSetOnlineUsers,\n      // onUserSetOnlineGames: stateOnUserSetOnlineGames,\n      // onUserNewChatMsg: stateOnUserNewChatMsg\n    };\n    const setUser$ = R.curry(setUser);\n    R.curryService(stateUserService);\n    return stateUserService;\n\n    function stateUserInit(state) {\n      state.user = {};\n      state.user_ready = new self.Promise((resolve) => {\n        state.onEvent('State.init',\n                      stateUserService.onStateInit$(state, resolve));\n      });\n\n      state.onEvent('User.set',\n                    stateUserService.onUserSet$(state));\n      // state.onEvent('User.toggleOnline',\n      //               stateUserService.onUserToggleOnline$(state));\n      // state.onEvent('User.sendChatMsg',\n      //               stateUserService.onUserSendChatMsg$(state));\n      // state.onEvent('User.connection.close',\n      //               stateUserService.onUserConnectionClose$(state));\n      // state.onEvent('User.setOnlineUsers',\n      //               stateUserService.onUserSetOnlineUsers$(state));\n      // state.onEvent('User.setOnlineGames',\n      //               stateUserService.onUserSetOnlineGames$(state));\n      // state.onEvent('User.newChatMsg',\n      //               stateUserService.onUserNewChatMsg$(state));\n\n      return state;\n    }\n    function stateUserSave(state) {\n      if(state._user === state.user) return null;\n      state._user = state.user;\n      return userModel.save(state.user);\n    }\n    function stateUserOnStateInit(state, ready, event) {\n      event = event;\n      return R.pipeP(\n        userModel.init,\n        setUser$(state),\n        () => { state.user_ready.fulfilled = true; },\n        ready\n      )(state);\n    }\n    function stateUserOnSet(state, event, user_state) {\n      return R.pipePromise(\n        R.assoc('state', user_state),\n        // userService.checkOnline$(state),\n        setUser$(state)\n      )(state.user);\n    }\n    // function stateOnUserToggleOnline(state, event) {\n    //   event = event;\n    //   return R.pipePromise(\n    //     userService.toggleOnline$(state),\n    //     setUser$(state)\n    //   )(state.user);\n    // }\n    // function stateOnUserSendChatMsg(state, event, chat) {\n    //   return userConnectionService\n    //     .sendChat$(chat, state.user);\n    // }\n    // function stateOnUserConnectionClose(state, event) {\n    //   event = event;\n    //   return R.pipePromise(\n    //     userService.online,\n    //     (online) => {\n    //       if(!online) {\n    //         return self.Promise\n    //           .reject('User not online when connection close');\n    //       }\n\n    //       return promptService\n    //         .prompt('alert','Server connection lost.')\n    //         .catch(R.always(null));\n    //     },\n    //     R.always(state.user),\n    //     userService.toggleOnline$(state),\n    //     setUser$(state)\n    //   )(state.user);\n    // }\n    // function stateOnUserSetOnlineUsers(state, event, users) {\n    //   return R.pipePromise(\n    //     R.assocPath(['connection','users'], users),\n    //     setUser$(state)\n    //   )(state.user);\n    // }\n    // function stateOnUserSetOnlineGames(state, event, games) {\n    //   return R.pipePromise(\n    //     R.assocPath(['connection','games'], games),\n    //     setUser$(state)\n    //   )(state.user);\n    // }\n    // function stateOnUserNewChatMsg(state, event, msg) {\n    //   state.changeEvent('User.chat', msg);\n    //   return R.pipePromise(\n    //     R.assocPath(['connection','chat'], R.pipe(\n    //       R.pathOr([], ['connection','chat']),\n    //       R.append(msg)\n    //     )(state.user)),\n    //     setUser$(state)\n    //   )(state.user);\n    // }\n    function setUser(state, user) {\n      state.user = user;\n      console.log('stateSetUser', state.user);\n      state.queueChangeEvent('User.change');\n    }\n  }\n})();\n"]}