{"version":3,"sources":["data.es6"],"names":[],"mappings":"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","file":"data.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('stateData', stateDataModelFactory);\n\n  stateDataModelFactory.$inject = [\n    'stateExports',\n    'fileImport',\n    'settings',\n    'gameBoard',\n    'gameTerrainInfo',\n    'gameFactions',\n    'gameScenario',\n  ];\n  function stateDataModelFactory(stateExportsService,\n                                 fileImportService,\n                                 settingsModel,\n                                 gameBoardModel,\n                                 gameTerrainInfoModel,\n                                 gameFactionsModel,\n                                 gameScenarioModel) {\n    const stateDataModel = {\n      create: stateDataCreate,\n      save: stateDataSave,\n      onStateInit: stateDataOnInit,\n      onSettingsLoadFile: stateDataOnSettingsLoadFile,\n      onSettingsReset: stateDataOnSettingsReset,\n      onFactionsLoadDescFile: stateDataOnFactionsLoadDescFile,\n      onFactionsClearDesc: stateDataOnFactionsClearDesc,\n      onFactionsClearAllDesc: stateDataOnFactionsClearAllDesc\n    };\n    const setSettings$ = R.curry(setSettings);\n    const setFactions$ = R.curry(setFactions);\n    const exportCurrentSettings = stateExportsService\n          .exportP$('settings', R.path(['settings','current']));\n\n    R.curryService(stateDataModel);\n    return stateDataModel;\n\n    function stateDataCreate(state) {\n      state.data_ready = new self.Promise((resolve) => {\n        state.onEvent('State.init',\n                      stateDataModel.onStateInit$(state, resolve));\n      });\n\n      state.onEvent('Settings.loadFile',\n                    stateDataModel.onSettingsLoadFile$(state));\n      state.onEvent('Settings.reset',\n                    stateDataModel.onSettingsReset$(state));\n      state.onEvent('Factions.loadDescFile',\n                    stateDataModel.onFactionsLoadDescFile$(state));\n      state.onEvent('Factions.clearDesc',\n                    stateDataModel.onFactionsClearDesc$(state));\n      state.onEvent('Factions.clearAllDesc',\n                    stateDataModel.onFactionsClearAllDesc$(state));\n      // state.onEvent('Factions.reload',\n      //               stateDataModel.onReloadFactions$(state));\n\n      return state;\n    }\n    function stateDataOnInit(state, resolve, event) {\n      event = event;\n      const boards_ready = gameBoardModel.initP()\n              .then((boards) => {\n                state.boards = boards;\n                console.info('board', boards);\n              });\n      const terrains_ready = gameTerrainInfoModel.initP()\n              .then((terrains) => {\n                state.terrains = terrains;\n                console.log('terrains', terrains);\n              });\n      const factions_ready = gameFactionsModel.initP()\n              .then((factions) => {\n                state.factions = factions;\n              });\n      const scenario_ready = gameScenarioModel.initP()\n              .then((scenarios) => {\n                state.scenarios = scenarios;\n                console.log('scenarios', scenarios);\n              });\n      const settings_ready = settingsModel.initP()\n              .then((settings) => {\n                state.settings = settings;\n              });\n      self.Promise.all([\n        boards_ready,\n        terrains_ready,\n        factions_ready,\n        scenario_ready,\n        settings_ready,\n      ]).then(() => {\n        console.log('data ready');\n        resolve();\n      });\n    }\n    function stateDataSave(state) {\n      return R.threadP()(\n        () => exportCurrentSettings(state),\n        () => storeCurrentSettings(state),\n        () => storeCurrentFactions(state)\n      );\n    }\n    function stateDataOnSettingsLoadFile(state, event, file) {\n      return R.threadP(file)(\n        fileImportService.readP$('json'),\n        settingsModel.bind,\n        settingsModel.update,\n        setSettings$(state),\n        () => {\n          state.queueChangeEventP('Settings.loadFile', 'Settings loaded');\n        }\n      ).catch((error) => {\n        state.queueChangeEventP('Settings.loadFile', error);\n      });\n    }\n    function stateDataOnSettingsReset(state, event, data) {\n      return R.threadP(data)(\n        settingsModel.bind,\n        settingsModel.update,\n        setSettings$(state)\n      );\n    }\n    function stateDataOnFactionsLoadDescFile(state, event, faction, file) {\n      return R.threadP(file)(\n        fileImportService.readP$('json'),\n        (faction_desc) => {\n          return R.assocPath(['desc', faction], faction_desc, state.factions);\n        },\n        gameFactionsModel.updateDesc,\n        setFactions$(state),\n        () => state.queueChangeEventP('Factions.loadDescFile', 'File loaded')\n      ).catch((error) => {\n        state.queueChangeEventP('Factions.loadDescFile', error);\n      });\n    }\n    function stateDataOnFactionsClearDesc(state, event, faction) {\n      return R.threadP(state.factions)(\n        R.dissocPath(['desc', faction]),\n        gameFactionsModel.updateDesc,\n        setFactions$(state)\n      );\n    }\n    function stateDataOnFactionsClearAllDesc(state, event) {\n      return R.threadP(state.factions)(\n        R.assoc('desc', {}),\n        gameFactionsModel.updateDesc,\n        setFactions$(state)\n      );\n    }\n    function setSettings(state, settings) {\n      state.settings = settings;\n      state.queueChangeEventP('Settings.change');\n    }\n    function setFactions(state, factions) {\n      state.factions = factions;\n      state.queueChangeEventP('Factions.change');\n    }\n    function storeCurrentSettings(state) {\n      if(state._settings === state.settings) return null;\n      state._settings = state.settings;\n      return settingsModel.store(state.settings);\n    }\n    function storeCurrentFactions(state) {\n      if(state._factions === state.factions) return null;\n      state._factions = state.factions;\n      return gameFactionsModel.storeDesc(state.factions);\n    }\n  }\n})();\n"]}