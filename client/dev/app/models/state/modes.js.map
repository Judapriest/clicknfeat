{"version":3,"sources":["modes.es6"],"names":[],"mappings":";;;;AAAA,QAAQ,MAAR,CAAe,mBAAf,EACG,OADH,CACW,YADX,EACyB,CACrB,OADqB,EAErB,UAFqB,EAGrB,SAAS,wBAAT,CAAkC,YAAlC,EAAgD;AAC9C,MAAI,oBAAoB;AACtB,UAAM,SAAS,cAAT,CAAwB,KAAxB,EAA+B;AACnC,YAAM,KAAN,GAAc,EAAd,CADmC;;AAGnC,YAAM,OAAN,CAAc,gBAAd,EACc,kBAAkB,gBAAlB,CAAmC,KAAnC,CADd,EAHmC;AAKnC,YAAM,OAAN,CAAc,sBAAd,EACc,kBAAkB,qBAAlB,CAAwC,KAAxC,CADd,EALmC;AAOnC,YAAM,OAAN,CAAc,aAAd,EACc,kBAAkB,aAAlB,CAAgC,KAAhC,CADd,EAPmC;AASnC,YAAM,OAAN,CAAc,YAAd,EACc,kBAAkB,YAAlB,CAA+B,KAA/B,CADd,EATmC;AAWnC,aAAO,KAAP,CAXmC;KAA/B;AAaN,UAAM,SAAS,cAAT,CAAwB,KAAxB,EAA+B;AACnC,aAAO,KAAP,CADmC;KAA/B;AAGN,qBAAiB,SAAS,oBAAT,CAA8B,KAA9B,EAAqC,KAArC,EAA4C,EAA5C,EAAgD;AAC/D,aAAO,EAAE,WAAF,CACL,aAAa,aAAb,CAA2B,EAA3B,EAA+B,KAA/B,CADK,EAEL,UAAU,KAAV,CAFK,EAGL,MAAM,KAAN,CAHK,CAGQ,KAHR,CAGc,iBAAiB,KAAjB,CAHd,CAAP,CAD+D;KAAhD;AAMjB,0BAAsB,SAAS,yBAAT,CAAmC,KAAnC,EAA0C,CAA1C,EAA6C,MAA7C,EAAqD,IAArD,EAA2D;AAC/E,UAAI,MAAM,aACH,iBADG,CACe,MADf,GACwB,iCAAU,MADlC,EACyC,MAAM,KAAN,CAD/C,CAD2E;AAG/E,UAAI,QAAQ,EAAE,IAAF,CAAO,IAAP,CAAR,CAH2E;AAI/E,UAAG,EAAE,MAAF,CAAS,EAAE,IAAF,CAAO,gBAAP,EAAyB,KAAzB,CAAT,CAAH,EAA8C,MAAM,cAAN,GAA9C;;AAEA,aAAO,KAAK,OAAL,CAAa,OAAb,CAAqB,GAArB,EACJ,KADI,CACE,iBAAiB,KAAjB,CADF,CAAP,CAN+E;KAA3D;AAStB,kBAAc,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,KAAlC,EAAyC;AACrD,cAAQ,KAAR,CADqD;AAErD,aAAO,EAAE,WAAF,CACL,aAAa,IAAb,EACA,UAAU,KAAV,CAFK,EAGL,KAHK,CAAP,CAFqD;KAAzC;AAOd,iBAAa,SAAS,gBAAT,CAA0B,KAA1B,EAAiC,KAAjC,EAAwC;AACnD,cAAQ,KAAR,CADmD;AAEnD,aAAO,EAAE,WAAF,CACL,aAAa,KAAb,CAAmB,KAAnB,CADK,EAEL,UAAU,KAAV,CAFK,EAGL,MAAM,KAAN,CAHF,CAFmD;KAAxC;GAvCX,CAD0C;AAgD9C,MAAI,YAAY,EAAE,KAAF,CAAQ,UAAC,KAAD,EAAQ,KAAR,EAAkB;AACxC,UAAM,KAAN,GAAc,KAAd,CADwC;AAExC,UAAM,WAAN,CAAkB,cAAlB,EAFwC;GAAlB,CAApB,CAhD0C;AAoD9C,MAAI,mBAAmB,EAAE,KAAF,CAAQ,UAAC,KAAD,EAAQ,KAAR,EAAkB;AAC/C,UAAM,WAAN,CAAkB,mBAAlB,EAAuC,KAAvC,EAD+C;AAE/C,WAAO,IAAP;;AAF+C,GAAlB,CAA3B,CApD0C;AAyD9C,IAAE,YAAF,CAAe,iBAAf,EAzD8C;AA0D9C,SAAO,iBAAP,CA1D8C;CAAhD,CAJJ","file":"modes.js","sourcesContent":["angular.module('clickApp.services')\n  .factory('stateModes', [\n    'modes',\n    'allModes',\n    function stateModesServiceFactory(modesService) {\n      var stateModesService = {\n        init: function stateModesInit(state) {\n          state.modes = {};\n\n          state.onEvent('Modes.switchTo',\n                        stateModesService.onModesSwitchTo$(state));\n          state.onEvent('Modes.current.action',\n                        stateModesService.onModesCurrentAction$(state));\n          state.onEvent('Modes.reset',\n                        stateModesService.onModesReset$(state));\n          state.onEvent('Modes.exit',\n                        stateModesService.onModesExit$(state));\n          return state;\n        },\n        save: function stateModesSave(state) {\n          return state;\n        },\n        onModesSwitchTo: function stateModesOnSwitchTo(state, event, to) {\n          return R.pipePromise(\n            modesService.switchToMode$(to, state),\n            setModes$(state)\n          )(state.modes).catch(gameActionError$(state));\n        },\n        onModesCurrentAction: function stateModesOnCurrentAction(state, e, action, args) {\n          let res = modesService\n                .currentModeAction(action, [state, ...args], state.modes);\n          let event = R.last(args);\n          if(R.exists(R.prop('preventDefault', event))) event.preventDefault();\n\n          return self.Promise.resolve(res)\n            .catch(gameActionError$(state));\n        },\n        onModesReset: function stateModesOnReset(state, event) {\n          event = event;\n          return R.pipePromise(\n            modesService.init,\n            setModes$(state)\n          )(state);\n        },\n        onModesExit: function stateModesOnExit(state, event) {\n          event = event;\n          return R.pipePromise(\n            modesService.exit$(state),\n            setModes$(state)\n          )(state.modes);\n        }\n      };\n      var setModes$ = R.curry((state, modes) => {\n        state.modes = modes;\n        state.changeEvent('Modes.change');\n      });\n      var gameActionError$ = R.curry((state, error) => {\n        state.changeEvent('Game.action.error', error);\n        return null;\n        // return self.Promise.reject(error);\n      });\n      R.curryService(stateModesService);\n      return stateModesService;\n    }\n  ]);\n"]}