{"version":3,"sources":["modes.es6"],"names":[],"mappings":";;;;AAAA,CAAC,YAAW;AACV,UAAQ,MAAR,CAAe,mBAAf,EACG,OADH,CACW,YADX,EACyB,sBADzB,EADU;;AAIV,yBAAuB,OAAvB,GAAiC,CAC/B,OAD+B,EAE/B,MAF+B,EAG/B,UAH+B,CAAjC,CAJU;AASV,WAAS,sBAAT,CAAgC,UAAhC,EACgC,SADhC,EAC2C;AACzC,QAAM,kBAAkB;AACtB,cAAQ,gBAAR;AACA,YAAM,cAAN;AACA,uBAAiB,oBAAjB;AACA,4BAAsB,yBAAtB;AACA,oBAAc,iBAAd;AACA,mBAAa,gBAAb;KANI,CADmC;;AAUzC,QAAM,YAAY,EAAE,KAAF,CAAQ,QAAR,CAAZ,CAVmC;;AAYzC,MAAE,YAAF,CAAe,eAAf,EAZyC;AAazC,WAAO,eAAP,CAbyC;;AAezC,aAAS,gBAAT,CAA0B,KAA1B,EAAiC;AAC/B,YAAM,KAAN,GAAc,EAAd,CAD+B;;AAG/B,YAAM,OAAN,CAAc,gBAAd,EACc,gBAAgB,gBAAhB,CAAiC,KAAjC,CADd,EAH+B;AAK/B,YAAM,OAAN,CAAc,sBAAd,EACc,gBAAgB,qBAAhB,CAAsC,KAAtC,CADd,EAL+B;AAO/B,YAAM,OAAN,CAAc,aAAd,EACc,gBAAgB,aAAhB,CAA8B,KAA9B,CADd,EAP+B;AAS/B,YAAM,OAAN,CAAc,YAAd,EACc,gBAAgB,YAAhB,CAA6B,KAA7B,CADd,EAT+B;AAW/B,aAAO,KAAP,CAX+B;KAAjC;AAaA,aAAS,cAAT,CAAwB,KAAxB,EAA+B;AAC7B,aAAO,KAAP,CAD6B;KAA/B;AAGA,aAAS,oBAAT,CAA8B,KAA9B,EAAqC,KAArC,EAA4C,EAA5C,EAAgD;AAC9C,aAAO,EAAE,OAAF,CAAU,MAAM,KAAN,CAAV,CACL,WAAW,cAAX,CAA0B,EAA1B,EAA8B,KAA9B,CADK,EAEL,UAAU,KAAV,CAFK,EAGL,KAHK,CAGC,UAAU,YAAV,CAAuB,KAAvB,CAHD,CAAP,CAD8C;KAAhD;AAMA,aAAS,yBAAT,CAAmC,KAAnC,EAA0C,CAA1C,EAA6C,MAA7C,EAAqD,IAArD,EAA2D;AACzD,UAAM,MAAM,WACH,kBADG,CACgB,MADhB,GACyB,iCAAU,MADnC,EAC0C,MAAM,KAAN,CADhD,CADmD;AAGzD,UAAM,QAAQ,EAAE,IAAF,CAAO,IAAP,CAAR,CAHmD;AAIzD,UAAG,EAAE,MAAF,CAAS,EAAE,IAAF,CAAO,gBAAP,EAAyB,KAAzB,CAAT,CAAH,EAA8C;AAC5C,cAAM,cAAN,GAD4C;OAA9C;;AAIA,aAAO,KAAK,OAAL,CAAa,OAAb,CAAqB,GAArB,EACJ,KADI,CACE,UAAU,YAAV,CAAuB,KAAvB,CADF,CAAP,CARyD;KAA3D;AAWA,aAAS,iBAAT,CAA2B,KAA3B,EAAkC,KAAlC,EAAyC;AACvC,aAAO,EAAE,OAAF,CAAU,KAAV,EACL,WAAW,KAAX,EACA,UAAU,KAAV,CAFK,CAAP,CADuC;KAAzC;AAMA,aAAS,gBAAT,CAA0B,KAA1B,EAAiC,KAAjC,EAAwC;AACtC,aAAO,EAAE,OAAF,CAAU,MAAM,KAAN,CAAV,CACL,WAAW,KAAX,CAAiB,KAAjB,CADK,EAEL,UAAU,KAAV,CAFK,CAAP,CADsC;KAAxC;AAMA,aAAS,QAAT,CAAkB,KAAlB,EAAyB,KAAzB,EAAgC;AAC9B,YAAM,KAAN,GAAc,KAAd,CAD8B;AAE9B,YAAM,iBAAN,CAAwB,cAAxB,EAF8B;KAAhC;GA7DF;CATD,CAAD","file":"modes.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('stateModes', stateModesModelFactory);\n\n  stateModesModelFactory.$inject = [\n    'modes',\n    'game',\n    'allModes',\n  ];\n  function stateModesModelFactory(modesModel,\n                                  gameModel) {\n    const stateModesModel = {\n      create: stateModesCreate,\n      save: stateModesSave,\n      onModesSwitchTo: stateModesOnSwitchTo,\n      onModesCurrentAction: stateModesOnCurrentAction,\n      onModesReset: stateModesOnReset,\n      onModesExit: stateModesOnExit\n    };\n\n    const setModes$ = R.curry(setModes);\n\n    R.curryService(stateModesModel);\n    return stateModesModel;\n\n    function stateModesCreate(state) {\n      state.modes = {};\n\n      state.onEvent('Modes.switchTo',\n                    stateModesModel.onModesSwitchTo$(state));\n      state.onEvent('Modes.current.action',\n                    stateModesModel.onModesCurrentAction$(state));\n      state.onEvent('Modes.reset',\n                    stateModesModel.onModesReset$(state));\n      state.onEvent('Modes.exit',\n                    stateModesModel.onModesExit$(state));\n      return state;\n    }\n    function stateModesSave(state) {\n      return state;\n    }\n    function stateModesOnSwitchTo(state, event, to) {\n      return R.threadP(state.modes)(\n        modesModel.switchToModeP$(to, state),\n        setModes$(state)\n      ).catch(gameModel.actionError$(state));\n    }\n    function stateModesOnCurrentAction(state, e, action, args) {\n      const res = modesModel\n              .currentModeActionP(action, [state, ...args], state.modes);\n      const event = R.last(args);\n      if(R.exists(R.prop('preventDefault', event))) {\n        event.preventDefault();\n      }\n\n      return self.Promise.resolve(res)\n        .catch(gameModel.actionError$(state));\n    }\n    function stateModesOnReset(state, event) {\n      return R.threadP(state)(\n        modesModel.initP,\n        setModes$(state)\n      );\n    }\n    function stateModesOnExit(state, event) {\n      return R.threadP(state.modes)(\n        modesModel.exit$(state),\n        setModes$(state)\n      );\n    }\n    function setModes(state, modes) {\n      state.modes = modes;\n      state.queueChangeEventP('Modes.change');\n    }\n  }\n})();\n"]}