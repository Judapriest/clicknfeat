{"version":3,"sources":["game.es6"],"names":[],"mappings":"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","file":"game.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('stateGame', stateGameModelFactory);\n\n  stateGameModelFactory.$inject = [\n    'fileExport',\n    'appState',\n    'state',\n    'modes',\n    'games',\n    'game',\n    // 'gameBoard',\n    'gameConnection',\n    // 'gameFactions',\n    // 'gameModels',\n    // 'gameModelSelection',\n    // 'gameScenario',\n    // 'gameTerrains',\n    // 'gameTemplates',\n    // 'gameTemplateSelection',\n    // 'fileImport',\n    'allCommands',\n    // 'allTemplates',\n  ];\n  function stateGameModelFactory(fileExportService,\n                                 appStateService,\n                                 stateModel,\n                                 modesModel,\n                                 gamesModel,\n                                 gameModel,\n                                 // gameBoardModel,\n                                 gameConnectionModel) {\n                                 // gameFactionsModel,\n                                 // gameModelsModel,\n                                 // gameModelSelectionModel,\n                                 // gameScenarioModel,\n                                 // gameTerrainsModel,\n                                 // gameTemplatesModel,\n                                 // gameTemplateSelectionModel,\n                                 // fileImportService) {\n    const GAME_LENS = R.lensProp('game');\n    const UI_STATE_LENS = R.lensProp('ui_state');\n    const stateGameModel = {\n      create: stateGamesCreate,\n      onSet: stateGameOnSet,\n      onLoad: stateGameOnLoad,\n      onLoadDataReady: stateGameOnLoadDataReady,\n      onLoadDataLoaded: stateGameOnLoadDataLoaded,\n      onLoadGameLoaded: stateGameOnLoadGameLoaded,\n      onConnectionClose: stateGameOnConnectionClose,\n      onCommandExecute: stateGameOnCommandExecute,\n      onCommandUndo: stateGameOnCommandUndo,\n      onCommandUndoLast: stateGameOnCommandUndoLast,\n      onCommandReplay: stateGameOnCommandReplay,\n      onCommandReplayNext: stateGameOnCommandReplayNext,\n      onCommandReplayBatch: stateGameOnCommandReplayBatch,\n      onSetCmds: stateGameOnSetCmds,\n      onSetPlayers: stateGameOnSetPlayers,\n      onNewChatMsg: stateGameOnNewChatMsg,\n      onUiStateFlip: stateGameOnUiStateFlip,\n      // onUpdate: stateGameOnUpdate,\n      // onInvitePlayer: stateGameOnInvitePlayer,\n      // onModelCreate: stateGameOnModelCreate,\n      // onModelCopy: stateGameOnModelCopy,\n      // onModelImportList: stateGameOnModelImportList,\n      // onModelImportFile: stateGameOnModelImportFile,\n      // onModelSelectionLocalChange: stateGameOnModelSelectionLocalChange,\n      // onTemplateCreate: stateGameOnTemplateCreate,\n      // onTemplateSelectionLocalChange: stateGameOnTemplateSelectionLocalChange,\n      // onTerrainCreate: stateGameOnTerrainCreate,\n      // onTerrainReset: stateGameOnTerrainReset,\n      // onBoardSet: stateGameOnBoardSet,\n      // onBoardSetRandom: stateGameOnBoardSetRandom,\n      // onBoardImportFile: stateGameOnBoardImportFile,\n      // onScenarioSet: stateGameOnScenarioSet,\n      // onScenarioSetRandom: stateGameOnScenarioSetRandom,\n      // onScenarioRefresh: stateGameOnScenarioRefresh,\n      // onScenarioGenerateObjectives: stateGameOnScenarioGenerateObjectives,\n      // onSelectionLocalChange: stateGameOnSelectionLocalChange,\n      updateExport: stateGameUpdateExport,\n      saveCurrent: stateGameSaveCurrent\n    };\n    // const exportCurrentGame = stateExportsModel\n    //         .exportP$('game', R.prop('game'));\n    // const exportCurrentBoard = stateExportsModel\n    //         .exportP$('board', exportBoardData);\n    R.curryService(stateGameModel);\n    stateModel.register(stateGameModel);\n    return stateGameModel;\n\n    function stateGamesCreate(state) {\n      appStateService\n        .addReducer('Game.set'                 , stateGameModel.onSet)\n        .addReducer('Game.load'                , stateGameModel.onLoad)\n        .addReducer('Game.load.dataReady'      , stateGameModel.onLoadDataReady)\n        .addReducer('Game.load.dataLoaded'     , stateGameModel.onLoadDataLoaded)\n        .addReducer('Game.load.gameLoaded'     , stateGameModel.onLoadGameLoaded)\n        .addReducer('Game.connection.close'    , stateGameModel.onConnectionClose)\n        .addReducer('Game.command.execute'     , stateGameModel.onCommandExecute)\n        .addReducer('Game.command.undo'        , stateGameModel.onCommandUndo)\n        .addReducer('Game.command.replay'      , stateGameModel.onCommandReplay)\n        .addReducer('Game.command.replayBatch' , stateGameModel.onCommandReplayBatch)\n        .addReducer('Game.command.undoLast'    , stateGameModel.onCommandUndoLast)\n        .addReducer('Game.command.replayNext'  , stateGameModel.onCommandReplayNext)\n        .addReducer('Game.setCmds'             , stateGameModel.onSetCmds)\n        .addReducer('Game.setPlayers'          , stateGameModel.onSetPlayers)\n        .addReducer('Game.newChatMsg'          , stateGameModel.onNewChatMsg)\n        .addReducer('Game.uiState.flip'        , stateGameModel.onUiStateFlip)\n        .addListener('Game.change'             , stateGameModel.saveCurrent);\n        // .addReducer('Game.invitePlayer'        , stateGameModel.onInvitePlayer)\n        // .addReducer('Game.model.create'        , stateGameModel.onModelCreate)\n        // .addReducer('Game.model.copy'          , stateGameModel.onModelCopy)\n        // .addReducer('Game.model.importList'    , stateGameModel.onModelImportList)\n        // .addReducer('Game.model.importFile'    , stateGameModel.onModelImportFile)\n        // .addReducer('Game.template.create'     , stateGameModel.onTemplateCreate)\n        // .addReducer('Game.terrain.create'      , stateGameModel.onTerrainCreate)\n        // .addReducer('Game.terrain.reset'       , stateGameModel.onTerrainReset)\n        // .addReducer('Game.board.set'           , stateGameModel.onBoardSet)\n        // .addReducer('Game.board.setRandom'     , stateGameModel.onBoardSetRandom)\n        // .addReducer('Game.board.importFile'    , stateGameModel.onBoardImportFile)\n        // .addReducer('Game.scenario.set'        , stateGameModel.onScenarioSet)\n        // .addReducer('Game.scenario.setRandom'  , stateGameModel.onScenarioSetRandom)\n        // .addReducer('Game.scenario.refresh'    , stateGameModel.onScenarioRefresh)\n        // .addReducer('Game.scenario.generateObjectives',\n        //             stateGameModel.onScenarioGenerateObjectives)\n        // .addListener('Game.model.selection.local.change',\n        //              stateGameModel.onModelSelectionLocalChange)\n        // .addListener('Game.template.selection.local.change',\n        //              stateGameModel.onGameTemplateSelectionLocalChange)\n        // .addListener('Game.selection.local.change',\n        //              stateGameModel.onGameSelectionLocalChange);\n\n      appStateService\n        .onChange('AppState.change',\n                  'Game.change',\n                  R.view(GAME_LENS));\n      const game_export_cell = appStateService\n        .cell('Game.change',\n              stateGameModel.updateExport,\n              {});\n      appStateService\n        .onChange('Game.change',\n                  'Game.layers.change',\n                  R.pipe(R.defaultTo({}), R.prop('layers')));\n      appStateService\n        .onChange('AppState.change',\n                  'Modes.change',\n                  R.path(['modes','current','name']));\n      appStateService\n        .onChange('Game.change',\n                  'Game.command.change',\n                  [ R.prop('commands'),\n                    R.prop('commands_log'),\n                    R.prop('undo'),\n                    R.prop('undo_log')\n                  ]);\n      appStateService\n        .onChange('AppState.change',\n                  'Game.view.flipMap',\n                  R.pipe(R.view(UI_STATE_LENS), R.prop('flipped')));\n\n      return R.thread(state)(\n        R.set(UI_STATE_LENS, { flipped: false }),\n        R.set(GAME_LENS, {}),\n        R.assocPath(['exports', 'game'], game_export_cell)\n      );\n    }\n    // function stateGameSave(state) {\n    //   return R.thread()(\n    //     () => exportCurrentModelSelectionP(state),\n    //     () => exportCurrentBoard(state)\n    //   );\n    // }\n    function stateGameOnSet(state, _event_, [game]) {\n      return R.set(GAME_LENS, game, state);\n    }\n    function stateGameOnLoad(state, _event_, [is_online, is_private, id]) {\n      return waitForDataReady()\n        .then(() => appStateService\n              .reduce('Game.load.dataReady', is_online, is_private, id));\n\n      function waitForDataReady() {\n        return R.allP([\n          state.data_ready,\n          state.user_ready,\n          state.games_ready\n        ]);\n      }\n    }\n    function stateGameOnLoadDataReady(state, _event_, [is_online, is_private, id]) {\n      return R.threadP()(\n        R.ifElse(\n          () => is_online,\n          () => gamesModel.loadOnlineGameP(is_private, id),\n          () => gamesModel.loadLocalGameP(id, state.local_games)\n        ),\n        (data) => appStateService\n          .reduce('Game.load.dataLoaded', data)\n      );\n    }\n    function stateGameOnLoadDataLoaded(state, _event_, [data]) {\n      appStateService.emit('Game.loading');\n      R.threadP(data)(\n        gameModel.loadP,\n        (game) => appStateService\n          .reduce('Game.load.gameLoaded', game)\n      );\n      return R.assoc('modes', modesModel.init(), state);\n    }\n    function stateGameOnLoadGameLoaded(state, _event_, [game]) {\n      appStateService.emit('Game.loaded');\n      const user = R.path(['user','state','name'], state);\n      return R.threadP(game)(\n        R.when(\n          gameModel.isOnline,\n          gameConnectionModel.openP$(user)\n        ),\n        (game) => appStateService\n          .reduce('Game.set', game)\n      );\n    }\n    function stateGameOnConnectionClose(state, _event_) {\n      return R.over(\n        GAME_LENS,\n        gameConnectionModel.cleanup,\n        state\n      );\n    }\n    function stateGameOnCommandExecute(state, _event_, [cmd, args]) {\n      return R.threadP(state.game)(\n        gameModel.executeCommandP$(cmd, args),\n        (game) => appStateService.reduce('Game.set', game)\n      ).catch((error) => appStateService.emit('Game.error', error));\n    }\n    function stateGameOnCommandUndo(state, _event_, [cmd]) {\n      return R.threadP(state.game)(\n        gameModel.undoCommandP$(cmd),\n        (game) => appStateService.reduce('Game.set', game)\n      ).catch((error) => appStateService.emit('Game.error', error));\n    }\n    function stateGameOnCommandUndoLast(state, _event_) {\n      return R.threadP(state.game)(\n        gameModel.undoLastCommandP,\n        (game) => appStateService.reduce('Game.set', game)\n      ).catch((error) => appStateService.emit('Game.error', error));\n    }\n    function stateGameOnCommandReplay(state, _event_, [cmd]) {\n      return R.threadP(state.game)(\n        gameModel.replayCommandP$(cmd),\n        (game) => appStateService.reduce('Game.set', game)\n      ).catch((error) => appStateService.emit('Game.error', error));\n    }\n    function stateGameOnCommandReplayBatch(state, _event_, [cmds]) {\n      return R.threadP(state.game)(\n        gameModel.replayCommandsBatchP$(cmds),\n        (game) => appStateService.reduce('Game.set', game)\n      ).catch((error) => appStateService.emit('Game.error', error));\n    }\n    function stateGameOnCommandReplayNext(state, _event_) {\n      return R.threadP(state.game)(\n        gameModel.replayNextCommandP,\n        (game) => appStateService.reduce('Game.set', game)\n      ).catch((error) => appStateService.emit('Game.error', error));\n    }\n    function stateGameOnSetCmds(state, _event_, [set]) {\n      return R.over(\n        GAME_LENS,\n        R.assoc(set.where, set.cmds),\n        state\n      );\n    }\n    function stateGameOnSetPlayers(state, _event_, [players]) {\n      return R.over(\n        GAME_LENS,\n        R.assoc('players', players),\n        state\n      );\n    }\n    function stateGameOnNewChatMsg(state, _event_, [msg]) {\n      return R.over(\n        GAME_LENS,\n        R.over(R.lensProp('chat'),\n               R.compose(R.append(msg.chat), R.defaultTo([]))),\n        state\n      );\n    }\n    function stateGameOnUiStateFlip(state) {\n      return R.over(\n        UI_STATE_LENS,\n        R.over(R.lensProp('flipped'), R.not),\n        state\n      );\n    }\n    // function stateGameOnUpdate(state, _event_, [lens, update]) {\n    //   return R.over(\n    //     GAME_LENS,\n    //     R.over(lens, update),\n    //     state\n    //   );\n    // }\n    // function stateGameOnInvitePlayer(state, _event_, to) {\n    //   const msg = [\n    //     s.capitalize(R.pathOr('Unknown', ['user','state','name'], state)),\n    //     'has invited you to join a game'\n    //   ].join(' ');\n    //   const link = self.window.location.hash;\n    //   console.log('Invite player', to, msg, link);\n\n    //   return state.eventP('User.sendChatMsg',\n    //                       { to: [to], msg: msg, link: link });\n    // }\n    // function stateGameOnModelCreate(state, _event_, model_path, repeat) {\n    //   state.create = {\n    //     base: { x: 240, y: 240, r: 0 },\n    //     models: R.times((i) => ({\n    //       info: model_path,\n    //       x: 20*i, y: 0, r: 0\n    //     }), R.defaultTo(1, repeat))\n    //   };\n    //   return state.eventP('Modes.switchTo', 'CreateModel');\n    // }\n    // function stateGameOnModelCopy(state, _event_, create) {\n    //   state.create = create;\n    //   return state.eventP('Modes.switchTo', 'CreateModel');\n    // }\n    // function stateGameOnModelImportList(state, _event_, list) {\n    //   const user = R.pathOr('Unknown', ['user','state','name'], state);\n    //   state.create = gameFactionsModel\n    //     .buildModelsList(list, user, state.factions.references);\n    //   console.info('doImportList', list, state.create);\n    //   return state.eventP('Modes.switchTo', 'CreateModel');\n    // }\n    // function stateGameOnModelImportFile(state, _event_, file) {\n    //   return R.threadP(file)(\n    //     fileImportService.readP$('json'),\n    //     (create) => {\n    //       state.create = create;\n    //       return state.eventP('Modes.switchTo', 'CreateModel');\n    //     }\n    //   ).catch(gameModel.actionError$(state));\n    // }\n    // function stateGameOnModelSelectionLocalChange(state, _event_) {\n    //   // console.warn('onModelSelectionLocalChange', arguments);\n    //   const local_model_selection = gameModelSelectionModel\n    //           .get('local', state.game.model_selection);\n    //   const length = R.length(local_model_selection);\n    //   const previous_selection = R.path(['_model_selection_listener','stamp'], state);\n    //   if(length === 1 &&\n    //      local_model_selection[0] === previous_selection) {\n    //     return;\n    //   }\n    //   cleanupModelSelectionListener(state);\n    //   if(length === 1) {\n    //     setupModelSelectionListener(local_model_selection[0], state);\n    //   }\n    //   else {\n    //     state.queueChangeEventP('Game.model.selection.local.updateSingle',\n    //                             null, null);\n    //   }\n    // }\n    // function setupModelSelectionListener(stamp, state) {\n    //   // console.warn('setupModelSelectionListener', arguments);\n    //   state._model_selection_listener = {\n    //     stamp: stamp,\n    //     unsubscribe: state\n    //       .onChangeEvent(`Game.model.change.${stamp}`,\n    //                      onModelSelectionChange(stamp, state))\n    //   };\n    // }\n    // function onModelSelectionChange(stamp, state) {\n    //   return () => {\n    //     // console.warn('onModelSelectionChange', arguments);\n    //     return R.threadP(state.game)(\n    //       R.prop('models'),\n    //       gameModelsModel.findStampP$(stamp),\n    //       (model) => {\n    //         state.queueChangeEventP('Game.model.selection.local.updateSingle',\n    //                                 stamp, model);\n    //       }\n    //     );\n    //   };\n    // }\n    // function cleanupModelSelectionListener(state) {\n    //   // console.warn('cleanupModelSelectionListener', arguments);\n    //   const unsubscribe = R.thread(state)(\n    //     R.path(['_model_selection_listener','unsubscribe']),\n    //     R.defaultTo(() => {})\n    //   );\n    //   unsubscribe();\n    //   state._model_selection_listener = {};\n    // }\n    // function stateGameOnTemplateCreate(state, _event_, type) {\n    //   state.create = {\n    //     base: { x: 240, y: 240, r: 0 },\n    //     templates: [ { type: type, x: 0, y: 0, r: 0 } ]\n    //   };\n    //   return state.eventP('Modes.switchTo', 'CreateTemplate');\n    // }\n    // function stateGameOnTemplateSelectionLocalChange(state, _event_) {\n    //   console.warn('onTemplateSelectionLocalChange', arguments);\n    //   const local_template_selection = gameTemplateSelectionModel\n    //           .get('local', state.game.template_selection);\n    //   const length = R.length(local_template_selection);\n    //   const previous_selection =\n    //           R.path(['_template_selection_listener','stamp'], state);\n    //   if(length === 1 &&\n    //      local_template_selection[0] === previous_selection) {\n    //     return;\n    //   }\n    //   cleanupTemplateSelectionListener(state);\n    //   if(length === 1) {\n    //     setupTemplateSelectionListener(local_template_selection[0], state);\n    //   }\n    //   else {\n    //     state.queueChangeEventP('Game.template.selection.local.updateSingle',\n    //                             null, null);\n    //   }\n    // }\n    // function setupTemplateSelectionListener(stamp, state) {\n    //   console.warn('setupTemplateSelectionListener', arguments);\n    //   state._template_selection_listener = {\n    //     stamp: stamp,\n    //     unsubscribe: state\n    //       .onChangeEvent(`Game.template.change.${stamp}`,\n    //                      onTemplateSelectionChange(stamp, state))\n    //   };\n    // }\n    // function onTemplateSelectionChange(stamp, state) {\n    //   return () => {\n    //     console.warn('onTemplateSelectionChange', arguments);\n    //     return R.threadP(state.game)(\n    //       R.prop('templates'),\n    //       gameTemplatesModel.findStampP$(stamp),\n    //       (template) => {\n    //         state.queueChangeEventP('Game.template.selection.local.updateSingle',\n    //                                 stamp, template);\n    //       }\n    //     );\n    //   };\n    // }\n    // function cleanupTemplateSelectionListener(state) {\n    //   console.warn('cleanupTemplateSelectionListener', arguments);\n    //   const unsubscribe = R.thread(state)(\n    //     R.path(['_template_selection_listener','unsubscribe']),\n    //     R.defaultTo(() => {})\n    //   );\n    //   unsubscribe();\n    //   state._template_selection_listener = {};\n    // }\n    // function stateGameOnTerrainCreate(state, _event_, path) {\n    //   state.create = {\n    //     base: { x: 240, y: 240, r: 0 },\n    //     terrains: [ {\n    //       info: path,\n    //       x: 0, y: 0, r: 0\n    //     } ]\n    //   };\n    //   return state.eventP('Modes.switchTo', 'CreateTerrain');\n    // }\n    // function stateGameOnTerrainReset(state, _event_) {\n    //   return R.threadP(state.game)(\n    //     R.prop('terrains'),\n    //     gameTerrainsModel.all,\n    //     R.pluck('state'),\n    //     R.pluck('stamp'),\n    //     (stamps) => state.eventP('Game.command.execute',\n    //                              'deleteTerrain', [stamps])\n    //   ).catch(gameModel.actionError$(state));\n    // }\n    // function stateGameOnBoardSet(state, _event_, name) {\n    //   let board = gameBoardModel.forName(name, state.boards);\n    //   return state.eventP('Game.command.execute',\n    //                       'setBoard', [board]);\n    // }\n    // function stateGameOnBoardSetRandom(state, _event_) {\n    //   let board, name = gameBoardModel.name(state.game.board);\n    //   while(name === gameBoardModel.name(state.game.board)) {\n    //     board = state.boards[R.randomRange(0, state.boards.length-1)];\n    //     name = gameBoardModel.name(board);\n    //   }\n    //   return state.eventP('Game.command.execute',\n    //                       'setBoard', [board]);\n    // }\n    // function stateGameOnBoardImportFile(state, _event_, file) {\n    //   return R.threadP(file)(\n    //     fileImportService.readP$('json'),\n    //     (data) => R.threadP(data)(\n    //       R.prop('board'),\n    //       R.rejectIfP(R.isNil, 'No board'),\n    //       () => state.eventP('Game.command.execute',\n    //                          'setBoard', [data.board]),\n    //       R.always(data),\n    //       R.path(['terrain', 'terrains']),\n    //       R.rejectIfP(R.isEmpty, 'No terrain'),\n    //       () => state.eventP('Game.terrain.reset'),\n    //       () => state.eventP('Game.command.execute',\n    //                          'createTerrain', [data.terrain, false])\n    //     )\n    //   ).catch(R.spyAndDiscardError('Import board file'));\n    // }\n    // function stateGameOnScenarioSet(state, _event_, name, group) {\n    //   const scenario = gameScenarioModel.forName(name, group);\n    //   return state.eventP('Game.command.execute',\n    //                       'setScenario', [scenario]);\n    // }\n    // function stateGameOnScenarioSetRandom(state, _event_) {\n    //   const group = gameScenarioModel.group('SR15', state.scenarios);\n    //   let scenario, name = gameScenarioModel.name(state.game.scenario);\n    //   while(name === gameScenarioModel.name(state.game.scenario)) {\n    //     scenario = group[1][R.randomRange(0, group[1].length-1)];\n    //     name = gameScenarioModel.name(scenario);\n    //   }\n    //   return state.eventP('Game.command.execute',\n    //                       'setScenario', [scenario]);\n    // }\n    // function stateGameOnScenarioRefresh(state, _event_) {\n    //   state.queueChangeEventP('Game.scenario.refresh');\n    // }\n    // function stateGameOnScenarioGenerateObjectives(state, _event_) {\n    //   return R.threadP(state.game)(\n    //     deleteCurrentObjectivesP,\n    //     () => gameScenarioModel\n    //       .createObjectivesP(state.game.scenario),\n    //     (objectives) => {\n    //       const is_flipped = R.path(['ui_state','flip_map'], state);\n    //       return state.eventP('Game.command.execute',\n    //                           'createModel',\n    //                           [objectives, is_flipped]);\n    //     }\n    //   ).catch(gameModel.actionError$(state));\n\n    //   function deleteCurrentObjectivesP(game) {\n    //     return R.threadP(game)(\n    //       R.prop('models'),\n    //       gameModelsModel.all,\n    //       R.filter(R.pipe(\n    //         R.path(['state','info']),\n    //         R.head,\n    //         R.equals('scenario')\n    //       )),\n    //       R.map(R.path(['state','stamp'])),\n    //       R.unless(\n    //         R.isEmpty,\n    //         (stamps) => state.eventP('Game.command.execute',\n    //                                  'deleteModel', [stamps])\n    //       )\n    //     );\n    //   }\n    // }\n    // function stateGameOnSelectionLocalChange(state, _event_) {\n    //   state.queueEventP('Modes.switchTo', 'Default');\n    // }\n    function stateGameUpdateExport(exp, current_game) {\n      fileExportService.cleanup(exp.url);\n      return {\n        name: 'clicknfeat_game.json',\n        url: fileExportService.generate('json', current_game)\n      };\n    }\n    function stateGameSaveCurrent(_event_, [game]) {\n      if(R.isNil(R.prop('local_stamp', R.defaultTo({}, game)))) {\n        return;\n      }\n      self.window.requestAnimationFrame(() => {\n        appStateService.reduce('Games.local.update', game);\n      });\n    }\n    // function exportCurrentModelSelectionP(state) {\n    //   return stateExportsModel\n    //     .exportP('models', (state) => R.threadP(state)(\n    //       R.path(['game','model_selection']),\n    //       R.rejectIfP(R.isNil, 'selection is nil'),\n    //       gameModelSelectionModel.get$('local'),\n    //       R.rejectIfP(R.isEmpty, 'selection is empty'),\n    //       (stamps) => gameModelsModel\n    //         .copyStampsP(stamps, R.path(['game', 'models'], state)),\n    //       R.rejectIfP(R.isEmpty, 'selection models not found')\n    //     ), state);\n    // }\n    // function exportBoardData(state) {\n    //   return R.thread(state)(\n    //     R.prop('game'),\n    //     (game) => ({\n    //       board: game.board,\n    //       terrain: {\n    //         base: { x: 0, y: 0, r: 0 },\n    //         terrains: R.thread(game.terrains)(\n    //           gameTerrainsModel.all,\n    //           R.pluck('state'),\n    //           R.map(R.pick(['x','y','r','info','lk']))\n    //         )\n    //       }\n    //     })\n    //   );\n    // }\n  }\n})();\n"]}