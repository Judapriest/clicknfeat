{"version":3,"sources":["game.es6"],"names":[],"mappings":"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","file":"game.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('stateGame', stateGameModelFactory);\n\n  stateGameModelFactory.$inject = [\n    'games',\n    'game',\n    'gameBoard',\n    // 'gameConnection',\n    // 'gameFactions',\n    // 'gameModels',\n    // 'gameModelSelection',\n    // 'gameScenario',\n    // 'gameTerrains',\n    // 'fileImport',\n    'stateExports',\n    'allCommands',\n    // 'allTemplates',\n  ];\n  function stateGameModelFactory(gamesModel,\n                                 gameModel,\n                                 gameBoardModel,\n                                 // gameConnectionModel,\n                                 // gameFactionsModel,\n                                 // gameModelsModel,\n                                 // gameModelSelectionModel,\n                                 // gameScenarioModel,\n                                 // gameTerrainsModel,\n                                 // fileImportModel,\n                                 stateExportsModel) {\n    const stateGameModel = {\n      create: stateGamesCreate,\n      save: stateGameSave,\n      onGameLoad: stateGameOnLoad,\n      // onGameConnectionClose: stateGameOnConnectionClose,\n      onGameCommandExecute: stateGameOnCommandExecute,\n      // onGameCommandUndo: stateGameOnCommandUndo,\n      onGameCommandUndoLast: stateGameOnCommandUndoLast,\n      // onGameCommandReplay: stateGameOnCommandReplay,\n      onGameCommandReplayNext: stateGameOnCommandReplayNext,\n      // onGameCommandReplayBatch: stateGameOnCommandReplayBatch,\n      // onGameSetCmds: stateGameOnSetCmds,\n      // onGameSetPlayers: stateGameOnSetPlayers,\n      // onGameNewChatMsg: stateGameOnNewChatMsg,\n      // onGameUpdate: stateGameOnUpdate,\n      // onGameInvitePlayer: stateGameOnInvitePlayer,\n      // onGameModelCreate: stateGameOnModelCreate,\n      // onGameModelImportList: stateGameOnModelImportList,\n      // onGameModelImportFile: stateGameOnModelImportFile,\n      // onGameTemplateCreate: stateGameOnModelCreate,\n      // onGameTerrainCreate: stateGameOnTerrainCreate,\n      // onGameTerrainReset: stateGameOnTerrainReset,\n      onGameBoardSet: stateGameOnBoardSet,\n      onGameBoardSetRandom: stateGameOnBoardSetRandom,\n      // onGameBoardImportFile: stateGameOnBoardImportFile,\n      // onGameScenarioSet: stateGameOnScenarioSet,\n      // onGameScenarioSetRandom: stateGameOnScenarioSetRandom,\n      // onGameScenarioGenerateObjectives: stateGameOnScenarioGenerateObjectives,\n    };\n\n    var setGame$ = R.curry(setGame);\n    var exportCurrentGame = stateExportsModel\n          .exportP$('game', R.prop('game'));\n    // var exportCurrentBoard = stateExportsModel\n    //       .export$('board', exportBoardData);\n\n    R.curryService(stateGameModel);\n    return stateGameModel;\n\n    function stateGamesCreate(state) {\n      state.game = null;\n\n      state.onEvent('Game.load',\n                    stateGameModel.onGameLoad$(state));\n      // state.onEvent('Game.connection.close',\n      //               stateGameModel.onGameConnectionClose$(state));\n      state.onEvent('Game.command.execute',\n                    stateGameModel.onGameCommandExecute$(state));\n      // state.onEvent('Game.command.undo',\n      //               stateGameModel.onGameCommandUndo$(state));\n      // state.onEvent('Game.command.replay',\n      //               stateGameModel.onGameCommandReplay$(state));\n      // state.onEvent('Game.command.replayBatch',\n      //               stateGameModel.onGameCommandReplayBatch$(state));\n      state.onEvent('Game.command.undoLast',\n                    stateGameModel.onGameCommandUndoLast$(state));\n      state.onEvent('Game.command.replayNext',\n                    stateGameModel.onGameCommandReplayNext$(state));\n      // state.onEvent('Game.setCmds',\n      //               stateGameModel.onGameSetCmds$(state));\n      // state.onEvent('Game.setPlayers',\n      //               stateGameModel.onGameSetPlayers$(state));\n      // state.onEvent('Game.newChatMsg',\n      //               stateGameModel.onGameNewChatMsg$(state));\n      // state.onEvent('Game.update',\n      //               stateGameModel.onGameUpdate$(state));\n      // state.onEvent('Game.invitePlayer',\n      //               stateGameModel.onGameInvitePlayer$(state));\n      // state.onEvent('Game.model.create',\n      //               stateGameModel.onGameModelCreate$(state));\n      // state.onEvent('Game.model.copy',\n      //               stateGameModel.onGameModelCopy$(state));\n      // state.onEvent('Game.model.importList',\n      //               stateGameModel.onGameModelImportList$(state));\n      // state.onEvent('Game.model.importFile',\n      //               stateGameModel.onGameModelImportFile$(state));\n      // state.onEvent('Game.template.create',\n      //               stateGameModel.onGameTemplateCreate$(state));\n      // state.onEvent('Game.terrain.create',\n      //               stateGameModel.onGameTerrainCreate$(state));\n      // state.onEvent('Game.terrain.reset',\n      //               stateGameModel.onGameTerrainReset$(state));\n      state.onEvent('Game.board.set',\n                    stateGameModel.onGameBoardSet$(state));\n      state.onEvent('Game.board.setRandom',\n                    stateGameModel.onGameBoardSetRandom$(state));\n      // state.onEvent('Game.board.importFile',\n      //               stateGameModel.onGameBoardImportFile$(state));\n      // state.onEvent('Game.scenario.set',\n      //               stateGameModel.onGameScenarioSet$(state));\n      // state.onEvent('Game.scenario.setRandom',\n      //               stateGameModel.onGameScenarioSetRandom$(state));\n      // state.onEvent('Game.scenario.generateObjectives',\n      //               stateGameModel.onGameScenarioGenerateObjectives$(state));\n\n      return state;\n    }\n    function stateGameSave(state) {\n      return R.thread()(\n        R.always(saveCurrentGame(state)),\n        R.always(exportCurrentGame(state))\n      //   R.always(exportCurrentModelSelection(state)),\n      //   R.always(exportCurrentBoard(state))\n      );\n    }\n    function stateGameOnLoad(state, event, is_online, is_private, id) {\n      return R.threadP(waitForDataReady())(\n        loadStoredGameData,\n        broadcast('Game.loading'),\n        setGame$(state),\n        resetModes,\n        gameModel.loadP$(state),\n        // (game) => {\n        //   return new self.Promise((resolve, reject) => {\n        //     setTimeout(resolve, 3000);\n        //   });\n        // },\n        (game) => {\n          state.queueChangeEventP('Game.loaded');\n          return game;\n        },\n        // connectOnlineGame,\n        setGame$(state),\n        broadcast('Game.load.success')\n      ).catch(onError);\n\n      function waitForDataReady() {\n        return self.Promise.all([\n          state.data_ready,\n          state.user_ready,\n          state.games_ready\n        ]);\n      }\n      function loadStoredGameData() {\n        return ( is_online\n                 ? gamesModel.loadOnlineGame(is_private, id)\n                 : gamesModel.loadLocalGameP(id, state.local_games)\n               );\n      }\n      function broadcast(event) {\n        return (game) => {\n          state.changeEventP(event);\n          return game;\n        };\n      }\n      function resetModes(game) {\n        return state.eventP('Modes.reset')\n          .then(R.always(game));\n      }\n      // function connectOnlineGame(game) {\n      //   if(!is_online) return game;\n\n      //   return gameConnectionModel\n      //     .open$(R.path(['user','state','name'], state), state, game);\n      // }\n      function onError(error) {\n        state.changeEventP('Game.load.error', error);\n      }\n    }\n    // function stateGameOnConnectionClose(state, event) {\n    //   event = event;\n    //   return R.pipe(\n    //     gameConnectionModel.cleanup,\n    //     setGame$(state)\n    //   )(state.game);\n    // }\n    function stateGameOnCommandExecute(state, event, cmd, args) {\n      return R.threadP(state.game)(\n        gameModel.executeCommandP$(cmd, args, state),\n        setGame$(state)\n      ).catch(gameModel.actionError$(state));\n    }\n    // function stateGameOnCommandUndo(state, event, cmd) {\n    //   return R.pipeP(\n    //     gameModel.undoCommand$(cmd, state),\n    //     setGame$(state)\n    //   )(state.game);\n    // }\n    function stateGameOnCommandUndoLast(state, event) {\n      event = event;\n      return R.threadP(state.game)(\n        gameModel.undoLastCommandP$(state),\n        setGame$(state)\n      ).catch(gameModel.actionError$(state));\n    }\n    // function stateGameOnCommandReplay(state, event, cmd) {\n    //   return R.pipeP(\n    //     gameModel.replayCommand$(cmd, state),\n    //     setGame$(state)\n    //   )(state.game);\n    // }\n    // function stateGameOnCommandReplayBatch(state, event, cmds) {\n    //   return R.pipeP(\n    //     gameModel.replayCommandsBatch$(cmds, state),\n    //     setGame$(state)\n    //   )(state.game);\n    // }\n    function stateGameOnCommandReplayNext(state, event) {\n      event = event;\n      return R.threadP(state.game)(\n        gameModel.replayNextCommandP$(state),\n        setGame$(state)\n      ).catch(gameModel.actionError$(state));\n    }\n    // function stateGameOnSetCmds(state, event, set) {\n    //   return R.pipe(\n    //     R.assoc(set.where, set.cmds),\n    //     setGame$(state)\n    //   )(state.game);\n    // }\n    // function stateGameOnSetPlayers(state, event, players) {\n    //   return R.pipe(\n    //     R.assoc('players', players),\n    //     setGame$(state)\n    //   )(state.game);\n    // }\n    // function stateGameOnNewChatMsg(state, event, msg) {\n    //   return R.pipe(\n    //     R.over(R.lensProp('chat'),\n    //            R.compose(R.append(msg.chat), R.defaultTo([]))),\n    //     setGame$(state),\n    //     () => { state.changeEvent('Game.chat'); }\n    //   )(state.game);\n    // }\n    // function stateGameOnUpdate(state, event, lens, update) {\n    //   return R.pipe(\n    //     R.over(lens, update),\n    //     setGame$(state)\n    //   )(state.game);\n    // }\n    // function stateGameOnInvitePlayer(state, event, to) {\n    //   var msg = [\n    //     s.capitalize(R.pathOr('Unknown', ['user','state','name'], state)),\n    //     'has invited you to join a game'\n    //   ].join(' ');\n    //   var link = $window.location.hash;\n    //   console.log('Invite player', to, msg, link);\n\n    //   return state.event('User.sendChatMsg',\n    //                      { to: to, msg: msg, link: link });\n    // }\n    // function stateGameOnModelCreate(state, event, model_path, repeat = 1) {\n    //   state.create = R.assoc('model', {\n    //     base: { x: 240, y: 240, r: 0 },\n    //     models: R.times((i) => {\n    //       return {\n    //         info: model_path,\n    //         x: 20*i, y: 0, r: 0\n    //       };\n    //     }, repeat)\n    //   }, R.defaultTo({}, state.create));\n    //   return state.event('Modes.switchTo', 'CreateModel');\n    // }\n    // function stateGameOnModelCopy(state, event, create) {\n    //   state.create = R.assoc('model', create, state.create);\n    //   return state.event('Modes.switchTo', 'CreateModel');\n    // }\n    // function stateGameOnModelImportList(state, event, list) {\n    //   let user = R.pathOr('Unknown', ['user','state','name'], state);\n    //   state.create = R.assoc(\n    //     'model',\n    //     gameFactionsModel\n    //       .buildModelsList(list, user, state.factions.references),\n    //     state.create\n    //   );\n    //   console.info('doImportList', list, state.create.model);\n    //   return state.event('Modes.switchTo', 'CreateModel');\n    // }\n    // function stateGameOnModelImportFile(state, event, file) {\n    //   return R.pipeP(\n    //     fileImportModel.read$('json'),\n    //     (create) => {\n    //       state.create = R.assoc('model', create, state.create);\n    //       return state.event('Modes.switchTo', 'CreateModel');\n    //     }\n    //   )(file).catch(gameActionError$(state));\n    // }\n    // function stateGameOnModelCreate(state, event, type) {\n    //   state.create = R.assoc('template', {\n    //     base: { x: 240, y: 240, r: 0 },\n    //     templates: [ { type: type, x: 0, y: 0, r: 0 } ]\n    //   }, R.defaultTo({}, state.create));\n    //   return state.event('Modes.switchTo', 'CreateTemplate');\n    // }\n    // function stateGameOnTerrainCreate(state, event, path) {\n    //   state.create = R.assoc('terrain', {\n    //     base: { x: 240, y: 240, r: 0 },\n    //     terrains: [ {\n    //       info: path,\n    //       x: 0, y: 0, r: 0\n    //     } ]\n    //   }, R.defaultTo({}, state.create));\n    //   return state.event('Modes.switchTo', 'CreateTerrain');\n    // }\n    // function stateGameOnTerrainReset(state, event) {\n    //   event = event;\n    //   return R.pipePromise(\n    //     () => {\n    //       return gameTerrainsModel.all(state.game.terrains);\n    //     },\n    //     R.pluck('state'),\n    //     R.pluck('stamp'),\n    //     (stamps) => {\n    //       return state.event('Game.command.execute',\n    //                          'deleteTerrain', [stamps]);\n    //     }\n    //   )().catch(gameActionError$(state));\n    // }\n    function stateGameOnBoardSet(state, event, name) {\n      let board = gameBoardModel.forName(name, state.boards);\n      return state.eventP('Game.command.execute',\n                          'setBoard', [board]);\n    }\n    function stateGameOnBoardSetRandom(state, event) {\n      event = event;\n      let board, name = gameBoardModel.name(state.game.board);\n      while(name === gameBoardModel.name(state.game.board)) {\n        board = state.boards[R.randomRange(0, state.boards.length-1)];\n        name = gameBoardModel.name(board);\n      }\n      return state.eventP('Game.command.execute',\n                          'setBoard', [board]);\n    }\n    // function stateGameOnBoardImportFile(state, event, file) {\n    //   return R.pipeP(\n    //     fileImportModel.read$('json'),\n    //     (board_info) => {\n    //       return R.pipePromise(\n    //         () => {\n    //           if(!board_info.board) return self.Promise.reject();\n\n    //           return state.event('Game.command.execute',\n    //                              'setBoard', [board_info.board]);\n    //         },\n    //         () => {\n    //           if(R.isEmpty(R.pathOr([], ['terrain','terrains'], board_info))) {\n    //             return self.Promise.reject();\n    //           }\n\n    //           return state.event('Game.terrain.reset');\n    //         },\n    //         () => {\n    //           return state.event('Game.command.execute',\n    //                              'createTerrain', [board_info.terrain, false]);\n    //         }\n    //       )();\n    //     }\n    //   )(file).catch(R.always(null));\n    // }\n    // function stateGameOnScenarioSet(state, event, name, group) {\n    //   let scenario = gameScenarioModel.forName(name, group);\n    //   return state.event('Game.command.execute',\n    //                      'setScenario', [scenario]);\n    // }\n    // function stateGameOnScenarioSetRandom(state, event) {\n    //   event = event;\n    //   var group = gameScenarioModel.group('SR15', state.scenarios);\n    //   var scenario, name = gameScenarioModel.name(state.game.scenario);\n    //   while(name === gameScenarioModel.name(state.game.scenario)) {\n    //     scenario = group[1][R.randomRange(0, group[1].length-1)];\n    //     name = gameScenarioModel.name(scenario);\n    //   }\n    //   return state.event('Game.command.execute',\n    //                      'setScenario', [scenario]);\n    // }\n    // function stateGameOnScenarioGenerateObjectives(state, event) {\n    //   event = event;\n    //   return R.pipePromise(\n    //     () => {\n    //       return gameModelsModel.all(state.game.models);\n    //     },\n    //     R.filter(R.pipe(\n    //       R.path(['state','info']),\n    //       R.head,\n    //       R.equals('scenario')\n    //     )),\n    //     R.map(R.path(['state','stamp'])),\n    //     (stamps) => {\n    //       return state.event('Game.command.execute',\n    //                          'deleteModel', [stamps]);\n    //     },\n    //     () => {\n    //       return gameScenarioModel\n    //         .createObjectives(state.game.scenario);\n    //     },\n    //     (objectives) => {\n    //       var is_flipped = R.path(['ui_state','flip_map'], state);\n    //       return state.event('Game.command.execute',\n    //                          'createModel', [objectives, is_flipped]);\n    //     }\n    //   )();\n    // }\n    function setGame(state, game) {\n      state.game = game;\n      console.log('stateGame', state.game);\n      state.queueChangeEventP('Game.change');\n      return game;\n    }\n    function saveCurrentGame(state) {\n      if(state._game === state.game) return null;\n      state._game = state.game;\n\n      if(R.isNil(R.path(['game','local_stamp'], state))) {\n        return null;\n      }\n      return R.thread(state.local_games)(\n        gamesModel.updateLocalGame$(state.game),\n        (games) => {\n          state.local_games = games;\n          console.log('stateSetLocalGames', state.local_games);\n          state.queueChangeEventP('Games.local.change');\n        }\n      );\n    }\n    // function exportCurrentModelSelection(state) {\n    //   return stateExportsModel\n    //     .export('models', R.pipePromise(\n    //       R.path(['game','model_selection']),\n    //       stateExportsModel.rejectIf$(R.isNil),\n    //       gameModelSelectionModel.get$('local'),\n    //       stateExportsModel.rejectIf$(R.isEmpty),\n    //       (stamps) => {\n    //         return gameModelsModel\n    //           .copyStamps(stamps, R.path(['game', 'models'], state));\n    //       },\n    //       stateExportsModel.rejectIf$(R.isEmpty)\n    //     ), state);\n    // }\n    // function exportBoardData(state) {\n    //   return R.threadP(state)(\n    //     R.prop('game'),\n    //     stateExportsModel.rejectIf$(R.isNil),\n    //     (game) => {\n    //       return {\n    //         board: game.board,\n    //         terrain: {\n    //           base: { x: 0, y: 0, r: 0 },\n    //           terrains: R.pipe(\n    //             gameTerrainsModel.all,\n    //             R.pluck('state'),\n    //             R.map(R.pick(['x','y','r','info','lk']))\n    //           )(game.terrains)\n    //         }\n    //       };\n    //     }\n    //   );\n    // }\n  }\n})();\n"]}