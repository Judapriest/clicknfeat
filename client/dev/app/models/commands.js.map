{"version":3,"sources":["commands.es6"],"names":[],"mappings":"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","file":"commands.js","sourcesContent":["angular.module('clickApp.services')\n  .factory('commands', [\n    function commandsServiceFactory() {\n      let CMD_REGS = {};\n      let commandsService = {\n        registerCommand: function commandsRegister(name, command) {\n          console.log('register command', name, command);\n          CMD_REGS[name] = command;\n        },\n        execute: function commandsExecute(name, args, state, game) {\n          return R.pipePromise(\n            R.prop(name),\n            R.rejectIf(R.isNil, `execute unknown command \"${name}\"`),\n            (cmd) => {\n              return cmd.execute.apply(null, [...args, state, game]);\n            },\n            ([ctxt, game]) => {\n              return [ R.assoc('type', name, ctxt),\n                       game\n                     ];\n            }\n          )(CMD_REGS);\n        },\n        undo: function commandsUndo(ctxt, state, game) {\n          return R.pipePromise(\n            R.prop(ctxt.type),\n            R.rejectIf(R.isNil, `undo unknown command \"${ctxt.type}\"`),\n            (cmd) => {\n              return cmd.undo(ctxt, state, game);\n            }\n          )(CMD_REGS);\n        },\n        replay: function commandsReplay(ctxt, state, game) {\n          return R.pipePromise(\n            R.prop(ctxt.type),\n            R.rejectIf(R.isNil, `replay unknown command ${ctxt.type}`),\n            (cmd) => {\n              return cmd.replay(ctxt, state, game);\n            }\n          )(CMD_REGS);\n        },\n        replayBatch: function commandsReplayBatch(commands, state, game) {\n          return R.pipePromise(\n            () => {\n              if(R.isEmpty(commands)) return game;\n\n              return R.pipeP(\n                (game) => {\n                  return commandsService.replay(commands[0], state, game)\n                    .catch(R.always(game));\n                },\n                commandsService.replayBatch$(R.tail(commands), state)\n              )(game);\n            }\n          )();\n        }\n      };\n      R.curryService(commandsService);\n      return commandsService;\n    }\n  ])\n  .factory('allCommands', [\n    'createModelCommand',\n    'deleteModelCommand',\n    'setModelSelectionCommand',\n    'lockModelsCommand',\n    'onModelsCommand',\n    'createTemplateCommand',\n    'deleteTemplatesCommand',\n    'lockTemplatesCommand',\n    'onTemplatesCommand',\n    'createTerrainCommand',\n    'deleteTerrainCommand',\n    'lockTerrainsCommand',\n    'onTerrainsCommand',\n    'rollDiceCommand',\n    'rollDeviationCommand',\n    'setBoardCommand',\n    'setLayersCommand',\n    'setLosCommand',\n    'setRulerCommand',\n    'setScenarioCommand',\n    () => ({ })\n  ]);\n"]}