{"version":3,"sources":["commands.es6"],"names":[],"mappings":"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","file":"commands.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('commands', commandsModelFactory)\n    .factory('allCommands', [\n      // 'createModelCommand',\n      // 'deleteModelCommand',\n      // 'setModelSelectionCommand',\n      // 'lockModelsCommand',\n      // 'onModelsCommand',\n      // 'createTemplateCommand',\n      // 'deleteTemplateCommand',\n      // 'lockTemplatesCommand',\n      // 'onTemplatesCommand',\n      'createTerrainCommand',\n      'deleteTerrainCommand',\n      'lockTerrainsCommand',\n      'onTerrainsCommand',\n      'rollDiceCommand',\n      // 'rollDeviationCommand',\n      'setBoardCommand',\n      'setLayersCommand',\n      // 'setLosCommand',\n      // 'setRulerCommand',\n      'setScenarioCommand',\n      () => ({ })\n    ]);\n\n  commandsModelFactory.$inject = [];\n  function commandsModelFactory() {\n    const CMDS_REG = {};\n    const commandsModel = {\n      registerCommand: commandsRegister,\n      executeP: commandsExecuteP,\n      undoP: commandsUndoP,\n      replayP: commandsReplayP,\n      replayBatchP: commandsReplayBatchP\n    };\n    R.curryService(commandsModel);\n    return commandsModel;\n\n    function commandsRegister(name, command) {\n      console.log('register command', name, command);\n      CMDS_REG[name] = command;\n    }\n    function commandsExecuteP(name, args, game) {\n      return R.threadP(name)(\n        findTypeP,\n        (cmd) => cmd.executeP\n          .apply(cmd, [...args, game]),\n        updateCommandType\n      );\n\n      function updateCommandType([ctxt, game]) {\n        return [ R.assoc('type', name, ctxt),\n                 game\n               ];\n      }\n    }\n    function commandsUndoP(ctxt, game) {\n      return R.threadP(ctxt)(\n        findCtxtTypeP,\n        (cmd) => cmd.undoP(ctxt, game)\n      );\n    }\n    function commandsReplayP(ctxt, game) {\n      return R.threadP(ctxt)(\n        findCtxtTypeP,\n        (cmd) => cmd.replayP(ctxt, game)\n      );\n    }\n    function findTypeP(type) {\n      return R.threadP(CMDS_REG)(\n        R.prop(type),\n        R.rejectIfP(R.isNil, `Game: unknown command \"${type}\"`)\n      );\n    }\n    function findCtxtTypeP(ctxt) {\n      return R.threadP(ctxt)(\n        R.prop('type'),\n        findTypeP\n      );\n    }\n    function commandsReplayBatchP(commands, game) {\n      if(R.isEmpty(commands)) {\n        return R.resolveP(game);\n      }\n      return R.threadP(game)(\n        replayNextCommand,\n        recurP\n      );\n\n      function replayNextCommand(game) {\n        return commandsModel.replayP(commands[0], game)\n          .catch(() => game);\n      }\n      function recurP(game) {\n        return commandsReplayBatchP(R.tail(commands), game);\n      }\n    }\n  }\n})();\n"]}