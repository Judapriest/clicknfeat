{"version":3,"sources":["commands.es6"],"names":[],"mappings":";;;;;;AAAA,CAAC,YAAW;AACV,UAAQ,MAAR,CAAe,mBAAf,EACG,OADH,CACW,UADX,EACuB,oBADvB,EAEG,OAFH,CAEW,aAFX,EAE0B;;;;;;;;;;;;;;;;;AAiBtB,oBAjBsB;;;;AAqBtB;WAAO;GAAP,CAvBJ,EADU;;AA2BV,uBAAqB,OAArB,GAA+B,EAA/B,CA3BU;AA4BV,WAAS,oBAAT,GAAgC;AAC9B,QAAM,WAAW,EAAX,CADwB;AAE9B,QAAM,gBAAgB;AACpB,uBAAiB,gBAAjB;AACA,gBAAU,gBAAV;;AAEA,eAAS,eAAT;AACA,oBAAc,oBAAd;KALI,CAFwB;AAS9B,MAAE,YAAF,CAAe,aAAf,EAT8B;AAU9B,WAAO,aAAP,CAV8B;;AAY9B,aAAS,gBAAT,CAA0B,IAA1B,EAAgC,OAAhC,EAAyC;AACvC,cAAQ,GAAR,CAAY,kBAAZ,EAAgC,IAAhC,EAAsC,OAAtC,EADuC;AAEvC,eAAS,IAAT,IAAiB,OAAjB,CAFuC;KAAzC;AAIA,aAAS,gBAAT,CAA0B,IAA1B,EAAgC,IAAhC,EAAsC,KAAtC,EAA6C,IAA7C,EAAmD;AACjD,aAAO,EAAE,OAAF,CAAU,QAAV,EACL,EAAE,IAAF,CAAO,IAAP,CADK,EAEL,EAAE,QAAF,CAAW,EAAE,KAAF,sCAA2C,UAAtD,CAFK,EAGL,UAAC,GAAD,EAAS;AACP,eAAO,IAAI,QAAJ,CACJ,KADI,CACE,IADF,+BACY,QAAM,OAAO,MADzB,CAAP,CADO;OAAT,EAIA,iBAPK,CAAP,CADiD;;AAWjD,eAAS,iBAAT,OAAyC;;;YAAb,gBAAa;YAAP,gBAAO;;AACvC,eAAO,CAAE,EAAE,KAAF,CAAQ,MAAR,EAAgB,IAAhB,EAAsB,IAAtB,CAAF,EACE,IADF,CAAP,CADuC;OAAzC;KAXF;;;;;;;;;;AAhB8B,aA0CrB,eAAT,CAAyB,IAAzB,EAA+B,KAA/B,EAAsC,IAAtC,EAA4C;AAC1C,aAAO,EAAE,OAAF,CAAU,aAAV,EACL,EAAE,QAAF,CAAW,EAAE,KAAF,qCAA0C,KAAK,IAAL,MAArD,CADK,EAEL,UAAC,GAAD,EAAS;AACP,eAAO,IAAI,OAAJ,CAAY,IAAZ,EAAkB,KAAlB,EAAyB,IAAzB,CAAP,CADO;OAAT,CAFF,CAD0C;;AAQ1C,eAAS,WAAT,GAAuB;AACrB,eAAO,EAAE,IAAF,CAAO,KAAK,IAAL,EAAW,QAAlB,CAAP,CADqB;OAAvB;KARF;AAYA,aAAS,oBAAT,CAA8B,QAA9B,EAAwC,KAAxC,EAA+C,IAA/C,EAAqD;AACnD,UAAG,EAAE,OAAF,CAAU,QAAV,CAAH,EAAwB;AACtB,eAAO,KAAK,OAAL,CAAa,OAAb,CAAqB,IAArB,CAAP,CADsB;OAAxB;AAGA,aAAO,EAAE,OAAF,CAAU,IAAV,EACL,iBADK,EAEL,MAFK,CAAP,CAJmD;;AASnD,eAAS,iBAAT,CAA2B,IAA3B,EAAiC;AAC/B,eAAO,cAAc,OAAd,CAAsB,SAAS,CAAT,CAAtB,EAAmC,KAAnC,EAA0C,IAA1C,EACJ,KADI,CACE,EAAE,MAAF,CAAS,IAAT,CADF,CAAP,CAD+B;OAAjC;AAIA,eAAS,MAAT,CAAgB,IAAhB,EAAsB;AACpB,eAAO,qBAAqB,EAAE,IAAF,CAAO,QAAP,CAArB,EAAuC,KAAvC,EAA8C,IAA9C,CAAP,CADoB;OAAtB;KAbF;GAtDF;CA5BD,CAAD","file":"commands.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('commands', commandsModelFactory)\n    .factory('allCommands', [\n      // 'createModelCommand',\n      // 'deconsteModelCommand',\n      // 'setModelSelectionCommand',\n      // 'lockModelsCommand',\n      // 'onModelsCommand',\n      // 'createTemplateCommand',\n      // 'deconsteTemplatesCommand',\n      // 'lockTemplatesCommand',\n      // 'onTemplatesCommand',\n      // 'createTerrainCommand',\n      // 'deconsteTerrainCommand',\n      // 'lockTerrainsCommand',\n      // 'onTerrainsCommand',\n      // 'rollDiceCommand',\n      // 'rollDeviationCommand',\n      // 'setBoardCommand',\n      'setLayersCommand',\n      // 'setLosCommand',\n      // 'setRulerCommand',\n      // 'setScenarioCommand',\n      () => ({ })\n    ]);\n\n  commandsModelFactory.$inject = [];\n  function commandsModelFactory() {\n    const CMDS_REG = {};\n    const commandsModel = {\n      registerCommand: commandsRegister,\n      executeP: commandsExecuteP,\n      // undoP: commandsUndoP,\n      replayP: commandsReplayP,\n      replayBatchP: commandsReplayBatchP\n    };\n    R.curryService(commandsModel);\n    return commandsModel;\n\n    function commandsRegister(name, command) {\n      console.log('register command', name, command);\n      CMDS_REG[name] = command;\n    }\n    function commandsExecuteP(name, args, state, game) {\n      return R.threadP(CMDS_REG)(\n        R.prop(name),\n        R.rejectIf(R.isNil, `Game: execute unknown command \"${name}\"`),\n        (cmd) => {\n          return cmd.executeP\n            .apply(null, [...args, state, game]);\n        },\n        updateCommandType\n      );\n\n      function updateCommandType([ctxt, game]) {\n        return [ R.assoc('type', name, ctxt),\n                 game\n               ];\n      }\n    }\n    // function commandsUndoP(ctxt, state, game) {\n    //   return R.pipePromise(\n    //     R.prop(ctxt.type),\n    //     R.rejectIf(R.isNil, `undo unknown command \"${ctxt.type}\"`),\n    //     (cmd) => {\n    //       return cmd.undo(ctxt, state, game);\n    //     }\n    //   )(CMD_REGS);\n    // }\n    function commandsReplayP(ctxt, state, game) {\n      return R.threadP(findCmdType())(\n        R.rejectIf(R.isNil, `Game: replay unknown command \"${ctxt.type}\"`),\n        (cmd) => {\n          return cmd.replayP(ctxt, state, game);\n        }\n      );\n\n      function findCmdType() {\n        return R.prop(ctxt.type, CMDS_REG);\n      }\n    }\n    function commandsReplayBatchP(commands, state, game) {\n      if(R.isEmpty(commands)) {\n        return self.Promise.resolve(game);\n      }\n      return R.threadP(game)(\n        replayNextCommand,\n        recurP\n      );\n\n      function replayNextCommand(game) {\n        return commandsModel.replayP(commands[0], state, game)\n          .catch(R.always(game));\n      }\n      function recurP(game) {\n        return commandsReplayBatchP(R.tail(commands), state, game);\n      }\n    }\n  }\n})();\n"]}