{"version":3,"sources":["damage.es6"],"names":[],"mappings":"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","file":"damage.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('modelDamage', modelDamageModelFactory);\n\n  modelDamageModelFactory.$inject = [\n    'gameFactions',\n  ];\n  function modelDamageModelFactory(gameFactionsModel) {\n    return () => {\n      const modelDamageModel = {\n        resetDamage: modelResetDamage,\n        setWarriorDamageP: modelSetWarriorDamageP,\n        setFieldDamageP: modelSetFieldDamageP,\n        setGridDamageP: modelSetGridDamageP,\n        setGridColDamageP: modelSetGridColDamageP\n      };\n      return modelDamageModel;\n\n      function modelResetDamage(model) {\n        return R.over(R.lensPath(['state','dmg']), R.pipe(\n          R.keys,\n          R.reduce(resetDamageEntry, {})\n        ), model);\n\n        function resetDamageEntry(mem, key) {\n          let value = model.state.dmg[key];\n          if('Array' === R.type(value)) {\n            value = R.map(R.always(0), value);\n          }\n          else {\n            value = 0;\n          }\n          return R.assoc(key, value, mem);\n        }\n      }\n      function modelSetWarriorDamageP(factions, i, model) {\n        return R.threadP(factions)(\n          gameFactionsModel.getModelInfoP$(model.state.info),\n          (info) => {\n            let value = R.defaultTo(0, model.state.dmg.n);\n            value = (value === i) ? 0 : i;\n            value = Math.min(value, info.damage.n);\n            return R.over(R.lensPath(['state','dmg']), R.pipe(\n              R.assoc('n', value),\n              R.assoc('t', value)\n            ), model);\n          }\n        );\n      }\n      function modelSetFieldDamageP(factions, i, model) {\n        return R.threadP(factions)(\n          gameFactionsModel.getModelInfoP$(model.state.info),\n          (info) => {\n            let value = R.defaultTo(0, model.state.dmg.f);\n            value = (value === i) ? 0 : i;\n            value = Math.min(value, info.damage.field);\n            return R.assocPath(['state','dmg','f'], value, model);\n          }\n        );\n      }\n      function modelSetGridDamageP(factions, line, col, model) {\n        return R.threadP(factions)(\n          gameFactionsModel.getModelInfoP$(model.state.info),\n          (info) => {\n            let value = model.state.dmg[col][line];\n            value = (value === 0) ? 1 : 0;\n            value = R.exists(info.damage[col][line]) ? value : 0;\n            return R.over(R.lensPath(['state','dmg']), R.pipe(\n              R.over(R.lensProp(col), R.update(line, value)),\n              (dmg) => R.assoc('t', computeTotalGridDamage(dmg), dmg)\n            ), model);\n          }\n        );\n      }\n      function modelSetGridColDamageP(factions, col, model) {\n        return R.threadP(factions)(\n          gameFactionsModel.getModelInfoP$(model.state.info),\n          (info) => {\n            const full = R.thread(model.state.dmg[col])(\n              R.addIndex(R.filter)((_val_, line) => R.exists(info.damage[col][line])),\n              R.reject(R.equals(1)),\n              R.isEmpty\n            );\n            const value = full ? 0 : 1;\n            return R.over(R.lensPath(['state','dmg']), R.pipe(\n              R.over(R.lensProp(col),\n                     R.addIndex(R.map)((_val_, line) => {\n                       return R.exists(info.damage[col][line]) ? value : 0;\n                     })\n                    ),\n              (dmg) => R.assoc('t', computeTotalGridDamage(dmg), dmg)\n            ), model);\n          }\n        );\n      }\n      function computeTotalGridDamage(damage) {\n        return R.thread(damage)(\n          R.keys,\n          R.reject(R.equals('t')),\n          R.reject(R.equals('f')),\n          R.reject(R.equals('n')),\n          R.reduce((mem, col) => {\n            return mem + R.reduce(R.add, 0, damage[col]);\n          }, 0)\n        );\n      }\n    };\n  }\n})();\n"]}