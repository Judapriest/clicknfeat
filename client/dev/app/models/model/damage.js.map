{"version":3,"sources":["damage.es6"],"names":[],"mappings":"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","file":"damage.js","sourcesContent":["angular.module('clickApp.services')\n  .factory('modelDamage', [\n    'gameFactions',\n    function modelDamageServiceFactory(gameFactionsService) {\n      return function(/*modelService*/) {\n        var modelDamageService = {\n          resetDamage: function modelResetDamage(model) {\n            return R.over(R.lensPath(['state','dmg']), R.pipe(\n              R.keys,\n              R.reduce((mem, key) => {\n                var value = model.state.dmg[key];\n                if('Array' === R.type(value)) {\n                  value = R.map(R.always(0), value);\n                }\n                else {\n                  value = 0;\n                }\n                return R.assoc(key, value, mem);\n              }, {})\n            ), model);\n          },\n          setWarriorDamage: function modelSetWarriorDamage(factions, i, model) {\n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                var value = R.defaultTo(0, model.state.dmg.n);\n                value = (value === i) ? 0 : i;\n                value = Math.min(value, info.damage.n);\n                return R.over(R.lensPath(['state','dmg']), R.pipe(\n                  R.assoc('n', value),\n                  R.assoc('t', value)\n                ), model);\n              }\n            )(factions);\n          },\n          setFieldDamage: function modelSetFieldDamage(factions, i, model) {\n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                var value = R.defaultTo(0, model.state.dmg.f);\n                value = (value === i) ? 0 : i;\n                value = Math.min(value, info.damage.field);\n                return R.assocPath(['state','dmg','f'], value, model);\n              }\n            )(factions);\n          },\n          setGridDamage: function modelSetGridDamage(factions, line, col, model) {\n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                var value = model.state.dmg[col][line];\n                value = (value === 0) ? 1 : 0;\n                value = R.exists(info.damage[col][line]) ? value : 0;\n                return R.over(R.lensPath(['state','dmg']), R.pipe(\n                  R.over(R.lensProp(col), R.update(line, value)),\n                  (dmg) => {\n                    return R.assoc('t', computeTotalGridDamage(dmg), dmg);\n                  }\n                ), model);\n              }\n            )(factions);\n          },\n          setGridColDamage: function modelSetGridColDamage(factions, col, model) {\n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                var full = R.pipe(\n                  R.addIndex(R.filter)((val, line) => {\n                    return R.exists(info.damage[col][line]);\n                  }),\n                  R.reject(R.equals(1)),\n                  R.isEmpty\n                )(model.state.dmg[col]);\n                var value = full ? 0 : 1;\n                return R.over(R.lensPath(['state','dmg']), R.pipe(\n                  R.over(R.lensProp(col), R.addIndex(R.map)((val, line) => {\n                    return R.exists(info.damage[col][line]) ? value : 0;\n                  })),\n                  (dmg) => {\n                    return R.assoc('t', computeTotalGridDamage(dmg), dmg);\n                  }\n                ), model);\n              }\n            )(factions);\n          }\n        };\n        function computeTotalGridDamage(damage) {\n          return R.pipe(\n            R.keys,\n            R.reject(R.equals('t')),\n            R.reject(R.equals('f')),\n            R.reject(R.equals('n')),\n            R.reduce(function(mem, col) {\n              return mem + R.reduce(R.add, 0, damage[col]);\n            }, 0)\n          )(damage);\n        }\n        return modelDamageService;\n      };\n    }\n  ]);\n"]}