{"version":3,"sources":["move.es6"],"names":[],"mappings":"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","file":"move.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('modelMove', modelMoveModelFactory);\n\n  modelMoveModelFactory.$inject = [\n    'point',\n  ];\n  function modelMoveModelFactory(pointModel) {\n    const STATE_LENS = R.lensProp('state');\n    const X_LENS = R.lensPath(['state','x']);\n    const Y_LENS = R.lensPath(['state','y']);\n    return (MOVES, modelModel) => {\n      const modelMoveModel = {\n        setPositionP: moveModel(modelSetPosition, true),\n        setPositionP_: modelSetPositionP_,\n        shiftPositionP: moveModel(modelShiftPosition, true),\n        setOrientationP: moveModel(modelSetOrientation, false),\n        orientToP: moveModel(modelOrientTo, false),\n        moveFrontP: moveModel(modelMoveFront, false),\n        moveBackP: moveModel(modelMoveBack, false),\n        rotateLeftP: moveModel(modelRotateLeft, false),\n        rotateRightP: moveModel(modelRotateRight, false),\n        shiftLeftP: moveModel(modelShiftLeft, false),\n        shiftRightP: moveModel(modelShiftRight, false),\n        shiftUpP: moveModel(modelShiftUp, false),\n        shiftDownP: moveModel(modelShiftDown, false)\n      };\n      return modelMoveModel;\n\n      function moveModel(move, withTarget) {\n        return function(...args) {\n          const model = R.last(args);\n          const target = (withTarget ? R.head(args) : null);\n          return R.threadP(model)(\n            R.rejectIfP(modelModel.isLocked,\n                       'Model is locked'),\n            () => move.apply(this, args),\n            modelModel.checkState$(target)\n          );\n        };\n      }\n      function modelSetPosition(_target_, pos, model) {\n        return R.pipe(\n          R.set(X_LENS, pos.x),\n          R.set(Y_LENS, pos.y)\n        )(model);\n      }\n      function modelSetPositionP_(target, pos, model) {\n        return R.threadP(model)(\n          R.rejectIfP(modelModel.isLocked,\n                     'Model is locked'),\n          R.set(X_LENS, pos.x),\n          R.set(Y_LENS, pos.y),\n          modelModel.checkState$(target),\n          (check) => {\n            model.state = check.state;\n            return model;\n          }\n        );\n      }\n      function modelShiftPosition(_target_, shift, model) {\n        return R.pipe(\n          R.over(X_LENS, R.add(shift.x)),\n          R.over(Y_LENS, R.add(shift.y))\n        )(model);\n      }\n      function modelSetOrientation(orientation, model) {\n        return R.assocPath(['state','r'], orientation, model);\n      }\n      function modelOrientTo(other, model) {\n        return R.assocPath(['state','r'],\n                           pointModel.directionTo(other.state, model.state),\n                           model);\n      }\n      function modelMoveFront(small, model) {\n        const dist = MOVES[small ? 'MoveSmall' : 'Move'];\n        return R.over(\n          STATE_LENS,\n          pointModel.moveFront$(dist),\n          model\n        );\n      }\n      function modelMoveBack(small, model) {\n        const dist = MOVES[small ? 'MoveSmall' : 'Move'];\n        return R.over(\n          STATE_LENS,\n          pointModel.moveBack$(dist),\n          model\n        );\n      }\n      function modelRotateLeft(small, model) {\n        const angle = MOVES[small ? 'RotateSmall' : 'Rotate'];\n        return R.over(\n          STATE_LENS,\n          pointModel.rotateLeft$(angle),\n          model\n        );\n      }\n      function modelRotateRight(small, model) {\n        const angle = MOVES[small ? 'RotateSmall' : 'Rotate'];\n        return R.over(\n          STATE_LENS,\n          pointModel.rotateRight$(angle),\n          model\n        );\n      }\n      function modelShiftLeft(small, model) {\n        const dist = MOVES[small ? 'ShiftSmall' : 'Shift'];\n        return R.over(\n          STATE_LENS,\n          pointModel.shiftLeft$(dist),\n          model\n        );\n      }\n      function modelShiftRight(small, model) {\n        const dist = MOVES[small ? 'ShiftSmall' : 'Shift'];\n        return R.over(\n          STATE_LENS,\n          pointModel.shiftRight$(dist),\n          model\n        );\n      }\n      function modelShiftUp(small, model) {\n        const dist = MOVES[small ? 'ShiftSmall' : 'Shift'];\n        return R.over(\n          STATE_LENS,\n          pointModel.shiftUp$(dist),\n          model\n        );\n      }\n      function modelShiftDown(small, model) {\n        const dist = MOVES[small ? 'ShiftSmall' : 'Shift'];\n        return R.over(\n          STATE_LENS,\n          pointModel.shiftDown$(dist),\n          model\n        );\n      }\n    };\n  }\n})();\n"]}