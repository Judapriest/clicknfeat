{"version":3,"sources":["effect.es6"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AACV,UAAQ,MAAR,CAAe,mBAAf,EACG,OADH,CACW,aADX,EAC0B,yBAD1B,EADU;;AAIV,4BAA0B,OAA1B,GAAoC,EAApC,CAJU;AAKV,WAAS,yBAAT,GAAqC;AACnC,QAAM,cAAc,EAAE,QAAF,CAAW,CAAC,OAAD,EAAS,KAAT,CAAX,CAAd,CAD6B;AAEnC,WAAO,UAAC,YAAD,EAAkB;AACvB,UAAM,qBAAqB;AACzB,2BAAmB,sBAAnB;AACA,0BAAkB,qBAAlB;AACA,6BAAqB,wBAArB;OAHI,CADiB;AAMvB,aAAO,kBAAP,CANuB;;AAQvB,eAAS,sBAAT,CAAgC,MAAhC,EAAwC,KAAxC,EAA+C;AAC7C,eAAO,CAAC,CAAC,EAAE,IAAF,CAAO,EAAE,MAAF,CAAS,MAAT,CAAP,EAAyB,EAAE,MAAF,CAAS,EAAT,EAAa,WAAb,EAA0B,KAA1B,CAAzB,CAAD,CADqC;OAA/C;AAGA,eAAS,qBAAT,CAA+B,MAA/B,EAAuC,GAAvC,EAA4C,KAA5C,EAAmD;AACjD,YAAM,SAAW,MACE,EAAE,OAAF,CAAU,EAAE,IAAF,EAAQ,EAAE,MAAF,CAAS,MAAT,CAAlB,EAAoC,EAAE,SAAF,CAAY,EAAZ,CAApC,CADF,GAEE,EAAE,OAAF,CAAU,EAAE,MAAF,CAAS,EAAE,MAAF,CAAS,MAAT,CAAT,CAAV,EAAsC,EAAE,SAAF,CAAY,EAAZ,CAAtC,CAFF,CADgC;AAKjD,eAAO,EAAE,IAAF,CAAO,WAAP,EAAoB,MAApB,EAA4B,KAA5B,CAAP,CALiD;OAAnD;AAOA,eAAS,wBAAT,CAAkC,MAAlC,EAA0C,KAA1C,EAAiD;AAC/C,YAAM,SAAW,aAAa,iBAAb,CAA+B,MAA/B,EAAuC,KAAvC,IACE,EAAE,OAAF,CAAU,EAAE,MAAF,CAAS,EAAE,MAAF,CAAS,MAAT,CAAT,CAAV,EAAsC,EAAE,SAAF,CAAY,EAAZ,CAAtC,CADF,GAEE,EAAE,OAAF,CAAU,EAAE,MAAF,CAAS,MAAT,CAAV,EAA4B,EAAE,SAAF,CAAY,EAAZ,CAA5B,CAFF,CAD8B;AAK/C,eAAO,EAAE,IAAF,CAAO,WAAP,EAAoB,MAApB,EAA4B,KAA5B,CAAP,CAL+C;OAAjD;KAlBK,CAF4B;GAArC;CALD,CAAD","file":"effect.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('modelEffect', modelEffectServiceFactory);\n\n  modelEffectServiceFactory.$inject = [];\n  function modelEffectServiceFactory() {\n    const EFFECT_LENS = R.lensPath(['state','eff']);\n    return (modelService) => {\n      const modelEffectService = {\n        isEffectDisplayed: modelIsEffectDisplayed,\n        setEffectDisplay: modelSetEffectDisplay,\n        toggleEffectDisplay: modelToggleEffectDisplay\n      };\n      return modelEffectService;\n\n      function modelIsEffectDisplayed(effect, model) {\n        return !!R.find(R.equals(effect), R.viewOr([], EFFECT_LENS, model));\n      }\n      function modelSetEffectDisplay(effect, set, model) {\n        const update = ( set\n                         ? R.compose(R.uniq, R.append(effect), R.defaultTo([]))\n                         : R.compose(R.reject(R.equals(effect)), R.defaultTo([]))\n                       );\n        return R.over(EFFECT_LENS, update, model);\n      }\n      function modelToggleEffectDisplay(effect, model) {\n        const update = ( modelService.isEffectDisplayed(effect, model)\n                         ? R.compose(R.reject(R.equals(effect)), R.defaultTo([]))\n                         : R.compose(R.append(effect), R.defaultTo([]))\n                       );\n        return R.over(EFFECT_LENS, update, model);\n      }\n    };\n  }\n})();\n"]}