{"version":3,"sources":["wreck.es6"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AACV,UAAQ,MAAR,CAAe,mBAAf,EACG,OADH,CACW,YADX,EACyB,sBADzB,EADU;;AAIV,yBAAuB,OAAvB,GAAiC,CAC/B,cAD+B,CAAjC,CAJU;AAOV,WAAS,sBAAT,CAAgC,iBAAhC,EAAmD;AACjD,QAAM,WAAW,EAAE,QAAF,CAAW,CAAC,OAAD,EAAS,KAAT,CAAX,CAAX,CAD2C;AAEjD,WAAO,UAAC,UAAD,EAAgB;AACrB,UAAM,kBAAkB;AACtB,0BAAkB,qBAAlB;AACA,uBAAe,kBAAf;AACA,yBAAiB,oBAAjB;AACA,4BAAoB,uBAApB;OAJI,CADe;AAOrB,aAAO,eAAP,CAPqB;;AASrB,eAAS,qBAAT,CAA+B,KAA/B,EAAsC;AACpC,eAAO,CAAC,CAAC,EAAE,IAAF,CAAO,EAAE,MAAF,CAAS,GAAT,CAAP,EAAsB,EAAE,MAAF,CAAS,EAAT,EAAa,QAAb,EAAuB,KAAvB,CAAtB,CAAD,CAD4B;OAAtC;AAGA,eAAS,kBAAT,CAA4B,QAA5B,EAAsC,KAAtC,EAA6C;AAC3C,eAAO,EAAE,MAAF,CAAS,QAAT,EACL,kBAAkB,aAAlB,CAAgC,MAAM,KAAN,CAAY,IAAZ,CAD3B,EAEL,EAAE,IAAF,CAAO,KAAP,CAFK,EAGL,UAAC,QAAD;iBAAc,EAAE,MAAF,CAAS,QAAT,EACZ,EAAE,IAAF,CAAO,EAAE,MAAF,CAAS,MAAT,EAAgB,OAAhB,CAAP,CADY,EAEZ,EAAE,SAAF,CAAY,EAAE,MAAF,CAAS,QAAT,EACV,EAAE,IAAF,CAAO,EAAE,MAAF,CAAS,MAAT,EAAgB,SAAhB,CAAP,CADU,EAEV,EAAE,SAAF,CAAY,EAAZ,CAFU,EAGV,EAAE,KAAF,CAAQ,MAAR,EAAgB,IAAhB,CAHU,CAAZ,CAFY;SAAd,EAQA,UAAC,GAAD,EAAS;AACP,cAAM,OAAO,WAAW,gBAAX,CAA4B,KAA5B,IAAqC,IAAI,IAAJ,GAAW,IAAhD,CADN;AAEP,iBAAO,EAAE,KAAF,CAAQ,MAAR,EAAgB,IAAhB,EAAsB,GAAtB,CAAP,CAFO;SAAT,CAXF,CAD2C;OAA7C;AAkBA,eAAS,oBAAT,CAA8B,GAA9B,EAAmC,KAAnC,EAA0C;AACxC,YAAM,SAAW,MACE,EAAE,OAAF,CAAU,EAAE,IAAF,EAAQ,EAAE,MAAF,CAAS,GAAT,CAAlB,CADF,GAEE,EAAE,MAAF,CAAS,EAAE,MAAF,CAAS,GAAT,CAAT,CAFF,CADuB;AAKxC,eAAO,EAAE,IAAF,CAAO,QAAP,EAAiB,MAAjB,EAAyB,KAAzB,CAAP,CALwC;OAA1C;AAOA,eAAS,uBAAT,CAAiC,KAAjC,EAAwC;AACtC,YAAM,SAAW,WAAW,gBAAX,CAA4B,KAA5B,IACE,EAAE,MAAF,CAAS,EAAE,MAAF,CAAS,GAAT,CAAT,CADF,GAEE,EAAE,MAAF,CAAS,GAAT,CAFF,CADqB;AAKtC,eAAO,EAAE,IAAF,CAAO,QAAP,EAAiB,MAAjB,EAAyB,KAAzB,CAAP,CALsC;OAAxC;KArCK,CAF0C;GAAnD;CAPD,CAAD","file":"wreck.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('modelWreck', modelWreckModelFactory);\n\n  modelWreckModelFactory.$inject = [\n    'gameFactions',\n  ];\n  function modelWreckModelFactory(gameFactionsModel) {\n    const DSP_LENS = R.lensPath(['state','dsp']);\n    return (modelModel) => {\n      const modelWreckModel = {\n        isWreckDisplayed: modelIsWreckDisplayed,\n        getWreckImage: modelGetWreckImage,\n        setWreckDisplay: modelSetWreckDisplay,\n        toggleWreckDisplay: modelToggleWreckDisplay\n      };\n      return modelWreckModel;\n\n      function modelIsWreckDisplayed(model) {\n        return !!R.find(R.equals('w'), R.viewOr([], DSP_LENS, model));\n      }\n      function modelGetWreckImage(factions, model) {\n        return R.thread(factions)(\n          gameFactionsModel.getModelInfo$(model.state.info),\n          R.prop('img'),\n          (info_img) => R.thread(info_img)(\n            R.find(R.propEq('type','wreck')),\n            R.defaultTo(R.thread(info_img)(\n              R.find(R.propEq('type','default')),\n              R.defaultTo({}),\n              R.assoc('link', null)\n            ))\n          ),\n          (img) => {\n            const link = modelModel.isImageDisplayed(model) ? img.link : null;\n            return R.assoc('link', link, img);\n          }\n        );\n      }\n      function modelSetWreckDisplay(set, model) {\n        const update = ( set\n                         ? R.compose(R.uniq, R.append('w'))\n                         : R.reject(R.equals('w'))\n                       );\n        return R.over(DSP_LENS, update, model);\n      }\n      function modelToggleWreckDisplay(model) {\n        const update = ( modelModel.isWreckDisplayed(model)\n                         ? R.reject(R.equals('w'))\n                         : R.append('w')\n                       );\n        return R.over(DSP_LENS, update, model);\n      }\n    };\n  }\n})();\n"]}