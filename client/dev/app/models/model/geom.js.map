{"version":3,"sources":["geom.es6"],"names":[],"mappings":"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","file":"geom.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('modelGeom', modelGeomModelFactory);\n\n  modelGeomModelFactory.$inject = [\n    'point',\n    'gameFactions',\n  ];\n  function modelGeomModelFactory(pointModel,\n                                 gameFactionsModel) {\n    return (modelModel) => {\n      const modelGeomModel = {\n        isBetweenPoints: modelIsBetweenPoints,\n        shortestLineToP: modelShortestLineToP,\n        baseEdgeInDirectionP: modelBaseEdgeInDirectionP,\n        distanceToP: modelDistanceToP,\n        distanceToAoEP: modelDistanceToAoEP,\n        setB2BP: modelSetB2BP\n      };\n      return modelGeomModel;\n\n      function modelIsBetweenPoints(top_left, bottom_right, model) {\n        const x = R.path(['state','x'], model);\n        const y = R.path(['state','y'], model);\n        return ( top_left.x <= x && x <= bottom_right.x &&\n                 top_left.y <= y && y <= bottom_right.y\n               );\n      }\n      function modelShortestLineToP(factions, other, model) {\n        const direction = pointModel.directionTo(other.state, model.state);\n        return R.threadP(factions)(\n          gameFactionsModel.getModelInfoP$(model.state.info),\n          (info) => {\n            const start = pointModel.translateInDirection(info.base_radius,\n                                                            direction,\n                                                            model.state);\n            return R.threadP(factions)(\n              gameFactionsModel.getModelInfoP$(other.state.info),\n              (other_info) => {\n                const end = pointModel.translateInDirection(other_info.base_radius,\n                                                              direction+180,\n                                                              other.state);\n                return { start: R.pick(['x','y'], start),\n                         end: R.pick(['x','y'], end)\n                       };\n              }\n            );\n          }\n        );\n      }\n      function modelBaseEdgeInDirectionP(factions, dir, model) {\n        return R.threadP(factions)(\n          gameFactionsModel.getModelInfoP$(model.state.info),\n          (info) => R.thread(model.state)(\n            pointModel.translateInDirection$(info.base_radius, dir),\n            R.pick(['x','y'])\n          )\n        );\n      }\n      function modelDistanceToP(factions, other, model) {\n        return R.threadP(factions)(\n          gameFactionsModel.getModelInfoP$(model.state.info),\n          (info) => R.threadP(factions)(\n            gameFactionsModel.getModelInfoP$(other.state.info),\n            (other_info) => {\n              return ( pointModel.distanceTo(other.state, model.state) -\n                       info.base_radius -\n                       other_info.base_radius\n                     );\n            }\n          )\n        );\n      }\n      function modelDistanceToAoEP(factions, aoe, model) {\n        return R.threadP(factions)(\n          gameFactionsModel.getModelInfoP$(model.state.info),\n          (info) => {\n            const aoe_size = aoe.state.s;\n            return ( pointModel.distanceTo(aoe.state, model.state) -\n                     info.base_radius -\n                     aoe_size\n                   );\n          }\n        );\n      }\n      function modelSetB2BP(factions, other, model) {\n        return R.threadP(model)(\n          R.rejectIf(modelModel.isLocked,\n                     'Model is locked'),\n          (model) => {\n            const direction = pointModel.directionTo(model.state, other.state);\n            return R.threadP(factions)(\n              gameFactionsModel.getModelInfoP$(model.state.info),\n              (info) => R.threadP(factions)(\n                gameFactionsModel.getModelInfoP$(other.state.info),\n                (other_info) => {\n                  const distance = info.base_radius + other_info.base_radius;\n                  const position = pointModel.translateInDirection(distance, direction,\n                                                                     other.state);\n                  return R.thread(model)(\n                    R.assocPath(['state','x'], position.x),\n                    R.assocPath(['state','y'], position.y)\n                  );\n                },\n                modelModel.checkStateP$(factions, null)\n              )\n            );\n          }\n        );\n      }\n    };\n  }\n})();\n"]}