{"version":3,"sources":["geom.es6"],"names":[],"mappings":"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","file":"geom.js","sourcesContent":["angular.module('clickApp.services')\n  .factory('modelGeom', [\n    'point',\n    'gameFactions',\n    function modelGeomServiceFactory(pointService,\n                                     gameFactionsService) {\n      return function(modelService) {\n        var modelGeomService = {\n          isBetweenPoints: function modelIsBetweenPoints(top_left, bottom_right, model) {\n            var x = R.path(['state','x'], model);\n            var y = R.path(['state','y'], model);\n            return ( top_left.x <= x && x <= bottom_right.x &&\n                     top_left.y <= y && y <= bottom_right.y\n                   );\n          },\n          shortestLineTo: function modelShortestLineTo(factions, other, model) {\n            var direction = pointService.directionTo(other.state, model.state);\n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                var start = pointService.translateInDirection(info.base_radius,\n                                                              direction,\n                                                              model.state);\n                return R.pipeP(\n                  gameFactionsService.getModelInfo$(other.state.info),\n                  (other_info) => {\n                    var end = pointService.translateInDirection(other_info.base_radius,\n                                                                direction+180,\n                                                                other.state);\n                    return { start: R.pick(['x','y'], start),\n                             end: R.pick(['x','y'], end)\n                           };\n                  }\n                )(factions);\n              }\n            )(factions);\n          },\n          baseEdgeInDirection: function modelBaseEdgeInDirection(factions, dir, model) {\n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                return R.pipe(\n                  pointService.translateInDirection$(info.base_radius, dir),\n                  R.pick(['x','y'])\n                )(model.state);\n              }\n            )(factions);\n          },\n          distanceTo: function modelDistanceTo(factions, other, model) {\n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                return R.pipeP(\n                  gameFactionsService.getModelInfo$(other.state.info),\n                  (other_info) => {\n                    return ( pointService.distanceTo(other.state, model.state) -\n                             info.base_radius -\n                             other_info.base_radius\n                           );\n                  }\n                )(factions);\n              }\n            )(factions);\n          },\n          distanceToAoE: function modelDistanceToAoE(factions, aoe, model) {\n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                var aoe_size = aoe.state.s;\n                return ( pointService.distanceTo(aoe.state, model.state) -\n                         info.base_radius -\n                         aoe_size\n                       );\n              }\n            )(factions);\n          },\n          setB2B: function modelSetB2B(factions, other, model) {\n            if(modelService.isLocked(model)) {\n              return self.Promise.reject('Model is locked');\n            }\n            var direction = pointService.directionTo(model.state, other.state); \n            return R.pipeP(\n              gameFactionsService.getModelInfo$(model.state.info),\n              (info) => {\n                return R.pipeP(\n                  gameFactionsService.getModelInfo$(other.state.info),\n                  (other_info) => {\n                    var distance = info.base_radius + other_info.base_radius;\n                    var position = pointService.translateInDirection(distance, direction,\n                                                                     other.state);\n                    model = R.pipe(\n                      R.assocPath(['state','x'], position.x),\n                      R.assocPath(['state','y'], position.y)\n                    )(model);\n                    return modelService.checkState(factions, null, model);\n                  }\n                )(factions);\n              }\n            )(factions);\n          }\n        };\n        return modelGeomService;\n      };\n    }\n  ]);\n"]}