{"version":3,"sources":["state.es6"],"names":[],"mappings":";;;;;;AAAA,CAAC,YAAW;AACV,UAAQ,MAAR,CAAe,mBAAf,EACG,OADH,CACW,OADX,EACoB,mBADpB,EADU;;AAIV,sBAAoB,OAApB,GAA8B,CAC5B,QAD4B;;;;AAK5B,aAL4B,CAA9B,CAJU;;;;;AAcV,WAAS,mBAAT,CAA6B,aAA7B;;;;AAI6B,kBAJ7B,EAI+C;;;;;AAK7C,QAAM,eAAe;AACnB,YAAM,SAAN;AACA,kBAAY,eAAZ;AACA,qBAAe,kBAAf;AACA,sBAAgB,mBAAhB;KAJI,CALuC;AAW7C,MAAE,YAAF,CAAe,YAAf,EAX6C;AAY7C,WAAO,YAAP,CAZ6C;;AAc7C,aAAS,SAAT,GAAqB;AACnB,UAAI,QAAQ,cAAc,IAAd,CAAmB;AAC7B,qBAAa,EAAb;AACA,iBAAS,OAAT;AACA,gBAAQ,cAAc,IAAd,CAAmB,EAAnB,EAAuB,cAAvB,CAAR;AACA,4BAAoB,EAApB;AACA,0BAAkB,gBAAlB;OALU,EAMT,OANS,CAAR,CADe;;AASnB,cAAQ,EAAE,IAAF;;;AAGN,uBAAiB,IAAjB;;;;AAHM,QAON,KAPM,CAAR;;;AATmB,qBAmBnB,CAAgB,CAAC,YAAD,CAAhB,EAAgC,KAAhC,EAnBmB;AAoBnB,aAAO,KAAP,CApBmB;;AAsBnB,eAAS,OAAT,GAA0B;0CAAN;;SAAM;;AACxB,eAAO,cAAc,SAAd,CACJ,KADI,CACE,IADF,YACY,OAAM,OADlB,CAAP,CADwB;OAA1B;AAIA,eAAS,gBAAT,GAAmC;2CAAN;;SAAM;;AACjC,eAAO,IAAI,KAAK,OAAL,CAAa,UAAC,OAAD,EAAa;AACnC,kBAAQ,IAAR,CAAa,kBAAb,EAAiC,KAAK,CAAL,CAAjC,EAA0C,EAAE,IAAF,CAAO,IAAP,CAA1C,EADmC;AAEnC,gBAAM,kBAAN,GAA2B,EAAE,MAAF,CAAS,CAClC,OADkC,EACzB,IADyB,CAAT,EAExB,MAAM,kBAAN,CAFH,CAFmC;SAAb,CAAxB,CADiC;OAAnC;;;;;;;;;;AA1BmB,KAArB;AA4CA,aAAS,eAAT,CAAyB,IAAzB,EAA+B,KAA/B,EAAsC;AACpC,aAAO,IAAI,KAAK,OAAL,CAAa,UAAC,OAAD,EAAa;AACnC,gBAAQ,IAAR,CAAa,kBAAb,EAAiC,KAAK,CAAL,CAAjC,EAA0C,EAAE,IAAF,CAAO,IAAP,CAA1C,EADmC;AAEnC,cAAM,WAAN,GAAoB,EAAE,MAAF,CAAS,CAC3B,OAD2B,EAClB,IADkB,CAAT,EAEjB,MAAM,WAAN,CAFH,CAFmC;AAKnC,kCAA0B,KAA1B,EALmC;OAAb,CAAxB,CADoC;KAAtC;AASA,aAAS,yBAAT,CAAmC,KAAnC,EAA0C;AACxC,UAAG,MAAM,sBAAN,EAA8B,OAAjC;AACA,YAAM,sBAAN,GAA+B,IAA/B,CAFwC;AAGxC,WAAK,OAAL,CAAa,OAAb,CAAqB,iBAAiB,KAAjB,CAArB,EACG,IADH,CACQ,YAAM;AAAE,cAAM,sBAAN,GAA+B,KAA/B,CAAF;OAAN,CADR,CAHwC;KAA1C;AAMA,aAAS,gBAAT,CAA0B,KAA1B,EAAiC;AAC/B,UAAG,EAAE,OAAF,CAAU,MAAM,WAAN,CAAb,EAAiC,OAAO,IAAP,CAAjC;;oBAE0B,EAAE,IAAF,CAAO,MAAM,WAAN,EAHF;;;;UAGvB,sBAHuB;UAGd,mBAHc;;AAI/B,cAAQ,IAAR,CAAa,kBAAb,EAAiC,KAAK,CAAL,CAAjC,EAA0C,EAAE,IAAF,CAAO,IAAP,CAA1C,EAJ+B;AAK/B,aAAO,EAAE,KAAF,CACL,EAAE,MAAF,CAAS,WAAW,IAAX,EAAiB,KAAjB,CAAT,CADK;;AAGL,kBAAM;AAAE,eAAO,iBAAiB,IAAjB,CAAsB,KAAtB,CAAP,CAAF;OAAN;;;;;AAKA,kBAAM;AAAE,eAAO,uBAAuB,KAAvB,CAAP,CAAF;OAAN,CARK,GASH,KATG,CASG,EAAE,MAAF,CAAS,IAAT,CATH,EAUJ,IAVI,CAUC,YAAM;AACV,cAAM,WAAN,GAAoB,EAAE,IAAF,CAAO,MAAM,WAAN,CAA3B,CADU;AAEV,kBAFU;AAGV,eAAO,iBAAiB,KAAjB,CAAP,CAHU;OAAN,CAVR,CAL+B;KAAjC;AAqBA,aAAS,sBAAT,CAAgC,KAAhC,EAAuC;AACrC,UAAG,EAAE,OAAF,CAAU,MAAM,kBAAN,CAAb,EAAwC,OAAO,IAAP,CAAxC;;AAEA,YAAM,kBAAN,GAA2B,EAAE,MAAF,CAAS,EAAE,OAAF,CAAU,EAAE,IAAF,EAAQ,EAAE,GAAF,CAAM,CAAN,CAAlB,CAAT,EACS,MAAM,kBAAN,CADpC,CAHqC;;qBAKb,EAAE,IAAF,CAAO,MAAM,kBAAN,EALM;;;;UAK/B,sBAL+B;UAKtB,mBALsB;;AAMrC,cAAQ,GAAR,CAAY,kBAAZ,EAAgC,EAAE,IAAF,CAAO,IAAP,CAAhC,EAA8C,EAAE,IAAF,CAAO,IAAP,CAA9C,EANqC;AAOrC,aAAO,cAAc,OAAd,CACJ,KADI,CACE,IADF,+BACY,QAAM,MAAM,MAAN,EADlB,EAEJ,IAFI,CAEC,YAAM;AACV,cAAM,kBAAN,GAA2B,EAAE,IAAF,CAAO,MAAM,kBAAN,CAAlC,CADU;AAEV,kBAFU;AAGV,eAAO,uBAAuB,KAAvB,CAAP,CAHU;OAAN,CAFR,CAPqC;KAAvC;AAeA,aAAS,UAAT,CAAoB,IAApB,EAA0B,KAA1B,EAAiC;AAC/B,aAAO,cAAc,OAAd,CACJ,KADI,CACE,IADF,+BACY,QAAM,OADlB,CAAP,CAD+B;KAAjC;AAIA,aAAS,kBAAT,CAA4B,KAA5B,EAAmC,QAAnC,EAA6C,KAA7C,EAAoD;AAClD,aAAO,cAAc,SAAd,CAAwB,KAAxB,EAA+B,QAA/B,EAAyC,MAAM,MAAN,CAAhD,CADkD;KAApD;AAGA,aAAS,mBAAT,CAA6B,KAA7B,EAAoC,KAApC,EAA2C,IAA3C,EAAiD;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAjD,GAxHF;CAdD,CAAD","file":"state.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('state', stateServiceFactory);\n\n  stateServiceFactory.$inject = [\n    'pubSub',\n    // 'fileImport',\n    // 'stateExports',\n    // 'stateData',\n    'stateUser',\n    // 'stateGame',\n    // 'stateGames',\n    // 'stateModes',\n  ];\n  function stateServiceFactory(pubSubService,\n                               // fileImportService,\n                               // stateExportsService,\n                               // stateDataService,\n                               stateUserService) {\n    // stateGameService,\n    // stateGamesService,\n    // stateModesService\n    // ) {\n    const stateService = {\n      init: stateInit,\n      queueEvent: stateQueueEvent,\n      onChangeEvent: stateOnChangeEvent,\n      onLoadDumpFile: stateOnLoadDumpFile\n    };\n    R.curryService(stateService);\n    return stateService;\n\n    function stateInit() {\n      let state = pubSubService.init({\n        event_queue: [],\n        onEvent: onEvent,\n        change: pubSubService.init({}, 'State.Change'),\n        change_event_queue: [],\n        queueChangeEvent: queueChangeEvent\n      }, 'State');\n\n      state = R.pipe(\n        // starting here State is mutable\n        // stateDataService.init,\n        stateUserService.init\n        // stateGameService.init,\n        // stateGamesService.init,\n        // stateModesService.init,\n      )(state);\n\n      // exportCurrentDumpFile(state);\n      stateQueueEvent(['State.init'], state);\n      return state;\n\n      function onEvent(...args) {\n        return pubSubService.subscribe\n          .apply(null, [...args, state]);\n      }\n      function queueChangeEvent(...args) {\n        return new self.Promise((resolve) => {\n          console.info('StateChange <---', args[0], R.tail(args));\n          state.change_event_queue = R.append([\n            resolve, args\n          ], state.change_event_queue);\n        });\n      }\n      // state.event = (...args) => {\n      //   return stateService.event\n      //     .apply(null, [...args, state]);\n      // };\n      // state.changeEventUnbuffered = (...args) => {\n      //   console.info('State <---[U] ChangeEvent', args[0], R.tail(args));\n      //   return pubSubService.publish\n      //     .apply(null, [...args, state.change]);\n      // };\n    }\n    function stateQueueEvent(args, state) {\n      return new self.Promise((resolve) => {\n        console.info('State ---> Event', args[0], R.tail(args));\n        state.event_queue = R.append([\n          resolve, args\n        ], state.event_queue);\n        startEventQueueProcessing(state);\n      });\n    }\n    function startEventQueueProcessing(state) {\n      if(state.processing_event_queue) return;\n      state.processing_event_queue = true;\n      self.Promise.resolve(processNextEvent(state))\n        .then(() => { state.processing_event_queue = false; });\n    }\n    function processNextEvent(state) {\n      if(R.isEmpty(state.event_queue)) return null;\n\n      const [ resolve, args ] = R.head(state.event_queue);\n      console.info('State ===> Event', args[0], R.tail(args));\n      return R.pipeP(\n        R.always(stateEvent(args, state)),\n        // () => { return stateDataService.save(state); },\n        () => { return stateUserService.save(state); },\n        // () => { return stateGameService.save(state); },\n        // () => { return stateGamesService.save(state); },\n        // () => { return stateModesService.save(state); },\n        // () => { return exportCurrentDumpFile(state); },\n        () => { return processNextChangeEvent(state); }\n      )().catch(R.always(null))\n        .then(() => {\n          state.event_queue = R.tail(state.event_queue);\n          resolve();\n          return processNextEvent(state);\n        });\n    }\n    function processNextChangeEvent(state) {\n      if(R.isEmpty(state.change_event_queue)) return null;\n\n      state.change_event_queue = R.uniqBy(R.compose(R.head, R.nth(1)),\n                                          state.change_event_queue);\n      let [ resolve, args ] = R.head(state.change_event_queue);\n      console.log('StateChange <===', R.head(args), R.tail(args));\n      return pubSubService.publish\n        .apply(null, [...args, state.change])\n        .then(() => {\n          state.change_event_queue = R.tail(state.change_event_queue);\n          resolve();\n          return processNextChangeEvent(state);\n        });\n    }\n    function stateEvent(args, state) {\n      return pubSubService.publish\n        .apply(null, [...args, state]);\n    }\n    function stateOnChangeEvent(event, listener, state) {\n      return pubSubService.subscribe(event, listener, state.change);\n    }\n    function stateOnLoadDumpFile(state, event, file) {\n        // return R.pipeP(\n        //   fileImportService.read$('json'),\n        //   (data) => {\n        //     return R.pipeP(\n        //       () => {\n        //         return stateDataService\n        //           .onSettingsReset(state, event, data.settings);\n        //       },\n        //       () => {\n        //         return stateGamesService\n        //           .loadNewLocalGame(state, data.game);\n        //       },\n        //       () => {\n        //         state.changeEvent('State.loadDumpFile', 'File loaded');\n        //       }\n        //     )();\n        //   }\n        // )(file).catch((error) => {\n        //   state.changeEvent('State.loadDumpFile', error);\n        // });\n    }\n    // const exportCurrentDumpFile = stateExportsService\n    //         .export$('dump', (state) => {\n    //           return { settings: R.pathOr({}, ['settings','current'], state),\n    //                    game: R.propOr({}, 'game', state)\n    //                  };\n    //         });\n  }\n})();\n"]}