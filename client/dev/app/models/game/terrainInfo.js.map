{"version":3,"sources":["terrainInfo.es6"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AACV,UAAQ,MAAR,CAAe,mBAAf,EACG,OADH,CACW,iBADX,EAC8B,2BAD9B,EADU;;AAIV,8BAA4B,OAA5B,GAAsC,CACpC,MADoC,CAAtC,CAJU;AAOV,WAAS,2BAAT,CAAqC,WAArC,EAAkD;AAChD,QAAM,uBAAuB;AAC3B,aAAO,oBAAP;AACA,eAAS,sBAAT;KAFI,CAD0C;;AAMhD,MAAE,YAAF,CAAe,oBAAf,EANgD;AAOhD,WAAO,oBAAP,CAPgD;;AAShD,aAAS,oBAAT,GAAgC;AAC9B,aAAO,YACJ,IADI,CACC,qBADD,EAEJ,KAFI,CAEE,UAAC,KAAD,EAAW;AAChB,UAAE,QAAF,CAAW,6BAAX,EAA0C,KAA1C,EADgB;AAEhB,eAAO,EAAP,CAFgB;OAAX,CAFF,CAMJ,IANI,CAMC,cAND,CAAP,CAD8B;KAAhC;AASA,aAAS,sBAAT,CAAgC,IAAhC,EAAsC,KAAtC,EAA6C;AAC3C,aAAO,EAAE,MAAF,CAAS,IAAT,EAAe,IAAf,EAAqB,KAArB,CAAP,CAD2C;KAA7C;AAGA,aAAS,cAAT,CAAwB,QAAxB,EAAkC;AAChC,aAAO,EAAE,MAAF,CAAS,QAAT,EACL,EAAE,IAAF,EACA,EAAE,MAAF,CAAS,EAAE,QAAF,CAFJ,EAGL,EAAE,MAAF,CAAS,UAAC,GAAD,EAAM,GAAN,EAAc;AACrB,YAAI,GAAJ,IAAW,eAAe,SAAS,GAAT,CAAf,CAAX,CADqB;AAErB,eAAO,GAAP,CAFqB;OAAd,EAGN,EAHH,CAHK,CAAP,CADgC;KAAlC;AAUA,aAAS,cAAT,CAAwB,QAAxB,EAAkC;AAChC,aAAO,EAAE,MAAF,CAAS,QAAT,EACL,EAAE,IAAF,EACA,EAAE,MAAF,CAAS,EAAE,QAAF,CAFJ,EAGL,EAAE,MAAF,CAAS,UAAC,GAAD,EAAM,GAAN,EAAc;AACrB,YAAI,GAAJ,IAAW,WAAW,SAAS,GAAT,CAAX,CAAX,CADqB;AAErB,eAAO,GAAP,CAFqB;OAAd,EAGN,EAHH,CAHK,CAAP,CADgC;KAAlC;AAUA,aAAS,UAAT,CAAoB,IAApB,EAA0B;AACxB,aAAO,EAAE,MAAF,CAAS,IAAT,EACL,EAAE,IAAF,EACA,EAAE,MAAF,CAAS,EAAE,QAAF,CAFJ,EAGL,EAAE,MAAF,CAAS,UAAC,GAAD,EAAM,GAAN,EAAc;AACrB,YAAI,GAAJ,IAAW,cAAc,KAAK,GAAL,CAAd,CAAX,CADqB;AAErB,eAAO,GAAP,CAFqB;OAAd,EAGN,EAHH,CAHK,CAAP,CADwB;KAA1B;AAUA,aAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC9B,aAAO,EAAE,MAAF,CAAS,OAAT,EACL,EAAE,IAAF,CAAO,EAAE,QAAF,CAAW,CAAC,KAAD,EAAO,OAAP,CAAX,CAAP,EAAoC,EAAE,MAAF,CAAS,EAAE,EAAF,EAAM,CAAf,CAApC,CADK,EAEL,EAAE,IAAF,CAAO,EAAE,QAAF,CAAW,CAAC,KAAD,EAAO,QAAP,CAAX,CAAP,EAAqC,EAAE,MAAF,CAAS,EAAE,EAAF,EAAM,CAAf,CAArC,CAFK,CAAP,CAD8B;KAAhC;GAnDF;CAPD,CAAD","file":"terrainInfo.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('gameTerrainInfo', gameTerrainInfoModelFactory);\n\n  gameTerrainInfoModelFactory.$inject = [\n    'http',\n  ];\n  function gameTerrainInfoModelFactory(httpService) {\n    const gameTerrainInfoModel = {\n      initP: gameTerrainInfoInitP,\n      getInfo: gameTerrainInfoGetInfo\n    };\n\n    R.curryService(gameTerrainInfoModel);\n    return gameTerrainInfoModel;\n\n    function gameTerrainInfoInitP() {\n      return httpService\n        .getP('/data/terrains.json')\n        .catch((error) => {\n          R.spyError('Error getting terrains.json')(error);\n          return [];\n        })\n        .then(updateTerrains);\n    }\n    function gameTerrainInfoGetInfo(path, infos) {\n      return R.pathOr(null, path, infos);\n    }\n    function updateTerrains(terrains) {\n      return R.thread(terrains)(\n        R.keys,\n        R.sortBy(R.identity),\n        R.reduce((mem, key) => {\n          mem[key] = updateAmbiance(terrains[key]);\n          return mem;\n        }, {})\n      );\n    }\n    function updateAmbiance(ambiance) {\n      return R.thread(ambiance)(\n        R.keys,\n        R.sortBy(R.identity),\n        R.reduce((mem, key) => {\n          mem[key] = updateType(ambiance[key]);\n          return mem;\n        }, {})\n      );\n    }\n    function updateType(type) {\n      return R.thread(type)(\n        R.keys,\n        R.sortBy(R.identity),\n        R.reduce((mem, key) => {\n          mem[key] = updateTerrain(type[key]);\n          return mem;\n        }, {})\n      );\n    }\n    function updateTerrain(terrain) {\n      return R.thread(terrain)(\n        R.over(R.lensPath(['img','width']), R.divide(R.__, 3)),\n        R.over(R.lensPath(['img','height']), R.divide(R.__, 3))\n      );\n    }\n  }\n})();\n"]}