{"version":3,"sources":["connection.es6"],"names":[],"mappings":"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","file":"connection.js","sourcesContent":["(function() {\n  angular.module('clickApp.models')\n    .factory('userConnection', userConnectionServiceFactory);\n\n  userConnectionServiceFactory.$inject = [\n    'websocket',\n  ];\n  function userConnectionServiceFactory(websocketService) {\n    const userConnectionService = {\n      init: userConnectionInit,\n      openP: userConnectionOpenP,\n      close: userConnectionClose,\n      active: userConnectionActive,\n      sendChatP: userConnectionSendChatP,\n      userNameForStamp: userNameForStamp,\n      usersNamesForStamps: usersNamesForStamps\n    };\n    const userForStamp$ = R.curry(userForStamp);\n    const usersForStamps$ = R.curry(usersForStamps);\n    R.curryService(userConnectionService);\n    return userConnectionService;\n\n    function userConnectionInit(user) {\n      const connection = {\n        state: { socket: null }\n      };\n      return R.assoc('connection', connection, user);\n    }\n    function userConnectionOpenP(user) {\n      if(userConnectionService.active(user)) {\n        return R.resolveP(user);\n      }\n\n      const actions = {\n        close: 'User.connection.close',\n        users: 'User.connection.users',\n        games: 'User.connection.games',\n        chat: 'User.connection.chat'\n      };\n\n      user = R.assocPath(['connection','state','socket'], null, user);\n      return R.threadP()(\n        () => websocketService\n          .createP(`/api/users/${user.state.stamp}`, actions),\n        R.assocPath(['connection','state','socket'], R.__, user)\n      );\n    }\n    function userConnectionClose(user) {\n      if(userConnectionService.active(user)) {\n        websocketService\n          .close(user.connection.state.socket);\n      }\n      return R.over(R.lensProp('connection'),\n                    cleanupConnection, user);\n    }\n    function userConnectionActive(user) {\n      return R.thread(user)(\n        R.path(['connection','state','socket']),\n        R.exists\n      );\n    }\n    function userConnectionSendChatP(chat, user) {\n      return R.threadP(user)(\n        R.rejectIfP(R.complement(userConnectionService.active),\n                    'Not active'),\n        (user) => R.thread(chat)(\n          R.assoc('type', 'chat'),\n          R.assoc('from', user.state.stamp)\n        ),\n        (chat) => websocketService\n          .send(chat, user.connection.state.socket)\n      );\n    }\n    function userNameForStamp(stamp, user) {\n      return R.thread(user)(\n        R.prop('connection'),\n        userForStamp$(stamp),\n        R.defaultTo({ name: 'Unknown' }),\n        R.prop('name'),\n        normalizeUserName\n      );\n    }\n    function usersNamesForStamps(stamps, user) {\n      return R.thread(user)(\n        R.defaultTo({}),\n        R.propOr({}, 'connection'),\n        usersForStamps$(R.defaultTo([], stamps)),\n        R.pluck('name'),\n        R.when(\n          R.isEmpty,\n          () => ([ 'Unknown' ])\n        ),\n        R.map(normalizeUserName)\n      );\n    }\n    function normalizeUserName(name) {\n      return s(name).trim().capitalize().value();\n    }\n    function cleanupConnection(connection) {\n      return R.thread(connection)(\n        R.assocPath(['state','socket'], null),\n        R.assoc('users', [])\n      );\n    }\n    function userForStamp(stamp, connection) {\n      return R.thread(connection)(\n        R.prop('users'),\n        R.find(R.propEq('stamp', stamp))\n      );\n    }\n    function usersForStamps(stamps, connection) {\n      return R.thread(stamps)(\n        R.map(userForStamp$(R.__, connection)),\n        R.reject(R.isNil)\n      );\n    }\n  }\n})();\n"]}