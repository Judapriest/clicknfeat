{"version":3,"sources":["ruler.es6"],"names":[],"mappings":"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","file":"ruler.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('rulerMode', rulerModeModelFactory);\n\n  rulerModeModelFactory.$inject = [\n    'appAction',\n    'appState',\n    'segmentMode',\n    'gameRuler',\n    'prompt',\n  ];\n  function rulerModeModelFactory(appActionService,\n                                 appStateService,\n                                 segmentModeModel,\n                                 gameRulerModel,\n                                 promptModel) {\n    const MODELS_LENS = R.lensPath(['game','models']);\n    const RULER_LENS = R.lensPath(['game','ruler']);\n    const ruler_default_bindings = {\n      exitRulerMode: 'ctrl+r',\n      setMaxLength: 'shift+r',\n      setOriginModel: 'ctrl+clickModel',\n      setTargetModel: 'shift+clickModel',\n      createAoEOnTarget: 'ctrl+a'\n    };\n\n    const ruler_mode =\n            segmentModeModel('ruler', gameRulerModel, ruler_default_bindings);\n    ruler_mode.actions.setOriginModel = rulerSetOriginModel;\n    ruler_mode.actions.setTargetModel = rulerSetTargetModel;\n    ruler_mode.actions.setMaxLength = rulerSetMaxLength;\n    ruler_mode.actions.createAoEOnTarget = rulerCreateAoEOnTarget;\n\n    ruler_mode.buttons = R.concat(ruler_mode.buttons, [\n      [ 'Set Max Len.', 'setMaxLength' ],\n      [ 'AoE on Target', 'createAoEOnTarget' ],\n    ]);\n    // const baseOnEnter = ruler_mode.onEnter;\n    // ruler_mode.onEnter = rulerOnEnter;\n\n    return ruler_mode;\n\n    function rulerSetOriginModel(state, event) {\n      return appStateService\n        .onAction(state, [\n          'Game.command.execute',\n          'setRuler', [\n            'setOrigin',\n            [event['click#'].target, R.view(MODELS_LENS, state)]\n          ]\n        ]);\n    }\n    function rulerSetTargetModel(state, event) {\n      return appStateService\n        .onAction(state, [\n          'Game.command.execute',\n          'setRuler', [\n            'setTarget',\n            [event['click#'].target, R.view(MODELS_LENS, state)]\n          ]\n        ]);\n    }\n    function rulerSetMaxLength(state) {\n      return R.threadP()(\n        () => promptModel\n          .promptP('prompt', 'Set ruler max length :',\n                   gameRulerModel.maxLength(R.view(RULER_LENS, state)))\n          .catch(R.always(null)),\n        (value) => (value === 0) ? null : value,\n        (value) => R.threadP()(\n          () => {\n            appActionService\n              .do('Game.command.execute',\n                  'setRuler', [\n                    'setMaxLength', [value, R.view(MODELS_LENS, state)]\n                  ]);\n          },\n          () => {\n            const origin = gameRulerModel.origin(R.view(RULER_LENS, state));\n            if(R.isNil(origin)) return;\n\n            appActionService\n              .defer('Game.command.execute',\n                     'onModels', [\n                       'setRulerMaxLength',\n                       [value],\n                       [origin]\n                     ]);\n          }\n        )\n      );\n    }\n    function rulerCreateAoEOnTarget(state) {\n      return R.thread(state.game.ruler)(\n        gameRulerModel.targetAoEPosition$(R.view(MODELS_LENS, state)),\n        (position) => ({\n          base: { x: 0, y: 0, r: 0 },\n          templates: [ R.assoc('type', 'aoe', position) ]\n        }),\n        (create) => {\n          appStateService\n            .onAction(state, [\n              'Game.command.execute',\n              'createTemplate', [\n                create, false\n              ]\n            ]);\n        }\n      );\n    }\n    // function rulerOnEnter() {\n    //   const state = appStateService.current();\n    //   return R.threadP()(\n    //     () => baseOnEnter(state),\n    //     () => updateMaxLengthButton(state)\n    //   );\n    // }\n    // function updateMaxLengthButton(state) {\n    //   const max = gameRulerModel.maxLength(R.view(RULER_LENS, state));\n    //   ruler_mode.buttons[0][0] = `Set Max Len. (${max})`;\n    //   appStateService.emit('Modes.buttons.update');\n    // }\n  }\n})();\n"]}