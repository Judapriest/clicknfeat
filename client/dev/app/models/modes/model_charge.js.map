{"version":3,"sources":["model_charge.es6"],"names":[],"mappings":"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","file":"model_charge.js","sourcesContent":["angular.module('clickApp.services')\n  .factory('modelChargeMode', [\n    'modes',\n    'settings',\n    'modelsMode',\n    'modelBaseMode',\n    'model',\n    'game',\n    'gameModels',\n    'gameModelSelection',\n    function modelChargeModeServiceFactory(modesService,\n                                           settingsService,\n                                           modelsModeService,\n                                           modelBaseModeService,\n                                           modelService,\n                                           gameService,\n                                           gameModelsService,\n                                           gameModelSelectionService) {\n      let charge_actions = Object.create(modelBaseModeService.actions);\n      charge_actions.endCharge = (state) => {\n        let stamps = gameModelSelectionService\n              .get('local', state.game.model_selection);\n        return R.pipePromise(\n          () => {\n            return state.event('Game.command.execute',\n                               'onModels', ['endCharge', [], stamps]);\n          },\n          () => {\n            return state.event('Modes.switchTo', 'Model');\n          }\n        )();\n      };\n      charge_actions.setTargetModel = (state, event) => {\n        let stamps = gameModelSelectionService\n              .get('local', state.game.model_selection);\n        return R.pipeP(\n          gameModelsService.findStamp$(stamps[0]),\n          (model) => {\n            return R.pipeP(\n              () => {\n                return modelService\n                  .chargeTarget(model)\n                  .catch(R.always(null));\n              },\n              (target_stamp) => {\n                return ( target_stamp === event['click#'].target.state.stamp ?\n                         null :\n                         event['click#'].target\n                       );\n              },\n              (set_target) => {\n                if(R.exists(set_target) &&\n                   model.state.stamp === set_target.state.stamp) return null;\n\n                return state.event('Game.command.execute',\n                                   'onModels', [ 'setChargeTarget',\n                                                  [state.factions, set_target],\n                                                 stamps\n                                               ]);\n              }\n            )();\n          }\n        )(state.game.models);\n      };\n      let moves = [\n        ['moveFront', 'up', 'moveFront'],\n        ['moveBack', 'down', 'moveBack'],\n        ['rotateLeft', 'left', 'rotateLeft'],\n        ['rotateRight', 'right', 'rotateRight'],\n        ['shiftUp', 'ctrl+up', 'shiftDown'],\n        ['shiftDown', 'ctrl+down', 'shiftUp'],\n        ['shiftLeft', 'ctrl+left', 'shiftRight'],\n        ['shiftRight', 'ctrl+right', 'shiftLeft'],\n      ];\n      var buildChargeMove$ = R.curry((move, flip_move, small, state) => {\n        let stamps = gameModelSelectionService\n              .get('local', state.game.model_selection);\n        let _move = ( R.path(['ui_state','flip_map'], state) ?\n                      flip_move :\n                      move\n                    );\n        return R.pipeP(\n          gameModelsService.findStamp$(stamps[0]),\n          (model) => {\n            return modelService\n              .chargeTarget(model)\n              .catch(R.always(null));\n          },\n          (target_stamp) => {\n            return ( R.exists(target_stamp) ?\n                     gameModelsService.findStamp(target_stamp, state.game.models) :\n                     null\n                   );\n          },\n          (target_model) => {\n            return state.event('Game.command.execute',\n                               'onModels', [ _move+'Charge',\n                                             [state.factions, target_model, small],\n                                             stamps\n                                           ]);\n          }\n        )(state.game.models);\n      });\n      R.forEach(([move, keys, flip_move]) => {\n        keys = keys;\n        charge_actions[move] = buildChargeMove$(move, flip_move, false);\n        charge_actions[move+'Small'] = buildChargeMove$(move, flip_move, true);\n      }, moves);\n\n      let charge_default_bindings = {\n        'endCharge': 'c',\n        'setTargetModel': 'shift+clickModel'\n      };\n      let charge_bindings = R.extend(Object.create(modelBaseModeService.bindings),\n                                     charge_default_bindings);\n      let charge_buttons = modelsModeService.buildButtons({ single: true,\n                                                            end_charge: true\n                                                          });\n      let charge_mode = {\n        onEnter: () => { },\n        onLeave: () => { },\n        name: 'ModelCharge',\n        actions: charge_actions,\n        buttons: charge_buttons,\n        bindings: charge_bindings\n      };\n      modesService.registerMode(charge_mode);\n      settingsService.register('Bindings',\n                               charge_mode.name,\n                               charge_default_bindings,\n                               (bs) => {\n                                 R.extend(charge_mode.bindings, bs);\n                               });\n      return charge_mode;\n    }\n  ]);\n"]}