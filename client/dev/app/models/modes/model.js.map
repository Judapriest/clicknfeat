{"version":3,"sources":["model.es6"],"names":[],"mappings":";;AAAA,QAAQ,MAAR,CAAe,mBAAf,EACG,OADH,CACW,WADX,EACwB,CACpB,OADoB,EAEpB,UAFoB,EAGpB,YAHoB,EAIpB,eAJoB,EAKpB,OALoB,EAMpB,MANoB,EAOpB,YAPoB,EAQpB,oBARoB,EASpB,SAAS,uBAAT,CAAiC,YAAjC,EACiC,eADjC,EAEiC,iBAFjC,EAGiC,oBAHjC,EAIiC,YAJjC,EAKiC,WALjC,EAMiC,iBANjC,EAOiC,yBAPjC,EAO4D;AAC1D,MAAI,gBAAgB,OAAO,MAAP,CAAc,qBAAqB,OAArB,CAA9B,CADsD;AAE1D,gBAAc,WAAd,GAA4B,UAAC,KAAD,EAAW;AACrC,QAAI,SAAS,0BACN,GADM,CACF,OADE,EACO,MAAM,IAAN,CAAW,eAAX,CADhB,CADiC;AAGrC,WAAO,EAAE,WAAF,CACL,YAAW;AACT,aAAO,MAAM,KAAN,CAAY,sBAAZ,EACY,UADZ,EACwB,CAAC,aAAD,EAAgB,EAAhB,EAAoB,MAApB,CADxB,CAAP,CADS;KAAX,EAIA,YAAW;AACT,aAAO,MAAM,KAAN,CAAY,gBAAZ,EAA8B,aAA9B,CAAP,CADS;KAAX,CALK,EAAP,CAHqC;GAAX,CAF8B;AAe1D,gBAAc,UAAd,GAA2B,UAAC,KAAD,EAAW;AACpC,QAAI,SAAS,0BACN,GADM,CACF,OADE,EACO,MAAM,IAAN,CAAW,eAAX,CADhB,CADgC;AAGpC,WAAO,EAAE,WAAF,CACL,YAAW;AACT,aAAO,MAAM,KAAN,CAAY,sBAAZ,EACY,UADZ,EACwB,CAAE,YAAF,EAAgB,EAAhB,EAAoB,MAApB,CADxB,CAAP,CADS;KAAX,EAIA,YAAW;AACT,aAAO,MAAM,KAAN,CAAY,gBAAZ,EAA8B,YAA9B,CAAP,CADS;KAAX,CALK,EAAP,CAHoC;GAAX,CAf+B;;AA6B1D,MAAI,yBAAyB;AAC3B,mBAAe,GAAf;AACA,kBAAc,GAAd;GAFE,CA7BsD;AAiC1D,MAAI,iBAAiB,EAAE,MAAF,CAAS,OAAO,MAAP,CAAc,qBAAqB,QAArB,CAAvB,EACS,sBADT,CAAjB,CAjCsD;AAmC1D,MAAI,gBAAgB,kBAAkB,YAAlB,CAA+B,EAAE,QAAQ,IAAR;AACA,kBAAc,IAAd;AACA,iBAAa,IAAb;GAFjC,CAAhB,CAnCsD;AAuC1D,MAAI,aAAa;AACf,aAAS,mBAAM,EAAN;AACT,aAAS,mBAAM,EAAN;AACT,UAAM,OAAN;AACA,aAAS,aAAT;AACA,aAAS,aAAT;AACA,cAAU,cAAV;GANE,CAvCsD;AA+C1D,eAAa,YAAb,CAA0B,UAA1B,EA/C0D;AAgD1D,kBAAgB,QAAhB,CAAyB,UAAzB,EACyB,WAAW,IAAX,EACA,sBAFzB,EAGyB,UAAC,EAAD,EAAQ;AACN,MAAE,MAAF,CAAS,WAAW,QAAX,EAAqB,EAA9B,EADM;GAAR,CAHzB,CAhD0D;AAsD1D,SAAO,UAAP,CAtD0D;CAP5D,CAVJ","file":"model.js","sourcesContent":["angular.module('clickApp.services')\n  .factory('modelMode', [\n    'modes',\n    'settings',\n    'modelsMode',\n    'modelBaseMode',\n    'model',\n    'game',\n    'gameModels',\n    'gameModelSelection',\n    function modelModeServiceFactory(modesService,\n                                     settingsService,\n                                     modelsModeService,\n                                     modelBaseModeService,\n                                     modelService,\n                                     gameService,\n                                     gameModelsService,\n                                     gameModelSelectionService) {\n      let model_actions = Object.create(modelBaseModeService.actions);\n      model_actions.startCharge = (state) => {\n        let stamps = gameModelSelectionService\n              .get('local', state.game.model_selection);\n        return R.pipePromise(\n          function() {\n            return state.event('Game.command.execute',\n                               'onModels', ['startCharge', [], stamps]);\n          },\n          function() {\n            return state.event('Modes.switchTo', 'ModelCharge');\n          }\n        )();\n      };\n      model_actions.startPlace = (state) => {\n        let stamps = gameModelSelectionService\n              .get('local', state.game.model_selection);\n        return R.pipePromise(\n          function() {\n            return state.event('Game.command.execute',\n                               'onModels', [ 'startPlace', [], stamps]);\n          },\n          function() {\n            return state.event('Modes.switchTo', 'ModelPlace');\n          }\n        )();\n      };\n\n      let model_default_bindings = {\n        'startCharge': 'c',\n        'startPlace': 'p'\n      };\n      let model_bindings = R.extend(Object.create(modelBaseModeService.bindings),\n                                    model_default_bindings);\n      let model_buttons = modelsModeService.buildButtons({ single: true,\n                                                           start_charge: true,\n                                                           start_place: true\n                                                         });\n      let model_mode = {\n        onEnter: () => { },\n        onLeave: () => { },\n        name: 'Model',\n        actions: model_actions,\n        buttons: model_buttons,\n        bindings: model_bindings\n      };\n      modesService.registerMode(model_mode);\n      settingsService.register('Bindings',\n                               model_mode.name,\n                               model_default_bindings,\n                               (bs) => {\n                                 R.extend(model_mode.bindings, bs);\n                               });\n      return model_mode;\n    }\n  ]);\n"]}