{"version":3,"sources":["terrain.es6"],"names":[],"mappings":";;;;AAAA,QAAQ,MAAR,CAAe,mBAAf,EACG,OADH,CACW,aADX,EAC0B,CACtB,OADsB,EAEtB,UAFsB,EAGtB,aAHsB,EAItB,SAJsB,EAKtB,MALsB,EAMtB,cANsB,EAOtB,sBAPsB,EAQtB,SAAS,yBAAT,CAAmC,YAAnC,EACmC,eADnC,EAEmC,kBAFnC,EAGmC,cAHnC,EAImC,WAJnC,EAKmC,mBALnC,EAMmC,2BANnC,EAMgE;AAC9D,MAAI,kBAAkB,OAAO,MAAP,CAAc,mBAAmB,OAAnB,CAAhC,CAD0D;AAE9D,WAAS,qBAAT,CAA+B,KAA/B,EAAsC;AACpC,WAAO,MAAM,KAAN,CAAY,aAAZ,EAA2B,EAAE,QAAF,CAAW,mBAAX,CAA3B,EACY,4BAA4B,MAA5B,CAAmC,OAAnC,EAA4C,KAA5C,CADZ,CAAP,CADoC;GAAtC;AAIA,kBAAgB,iBAAhB,GAAoC,qBAApC,CAN8D;AAO9D,kBAAgB,QAAhB,GAA2B,qBAA3B,CAP8D;AAQ9D,kBAAgB,aAAhB,GAAgC,qBAAhC,CAR8D;AAS9D,kBAAgB,aAAhB,GAAgC,UAAC,KAAD,EAAW;AACzC,QAAI,SAAS,4BACN,GADM,CACF,OADE,EACO,MAAM,IAAN,CAAW,iBAAX,CADhB,CADqC;AAGzC,WAAO,EAAE,KAAF,CACL,oBAAoB,WAApB,CAAgC,MAAhC,CADK,EAEL,UAAC,IAAD,EAAU;AACR,YAAM,MAAN,CAAa,OAAb,GAAuB,IAAvB,CADQ;AAER,aAAO,MAAM,KAAN,CAAY,gBAAZ,EAA6B,eAA7B,CAAP,CAFQ;KAAV,CAFK,CAML,MAAM,IAAN,CAAW,QAAX,CANF,CAHyC;GAAX,CAT8B;AAoB9D,kBAAgB,MAAhB,GAAyB,UAAC,KAAD,EAAW;AAClC,QAAI,SAAS,4BACN,GADM,CACF,OADE,EACO,MAAM,IAAN,CAAW,iBAAX,CADhB,CAD8B;AAGlC,WAAO,MAAM,KAAN,CAAY,sBAAZ,EACY,eADZ,EAC6B,CAAC,MAAD,CAD7B,CAAP,CAHkC;GAAX,CApBqC;AA0B9D,kBAAgB,UAAhB,GAA6B,UAAC,KAAD,EAAW;AACtC,QAAI,SAAS,4BACN,GADM,CACF,OADE,EACO,MAAM,IAAN,CAAW,iBAAX,CADhB,CADkC;AAGtC,WAAO,EAAE,KAAF,CACL,YAAM;AACJ,aAAO,oBACJ,SADI,CACM,OAAO,CAAP,CADN,EACiB,MAAM,IAAN,CAAW,QAAX,CADxB,CADI;KAAN,EAIA,UAAC,OAAD,EAAa;AACX,UAAI,YAAY,eAAe,QAAf,CAAwB,OAAxB,CAAZ,CADO;;AAGX,aAAO,MAAM,KAAN,CAAY,sBAAZ,EACY,cADZ,EAC4B,CAAC,CAAC,SAAD,EAAY,MAAb,CAD5B,CAAP,CAHW;KAAb,CALK,EAAP,CAHsC;GAAX,CA1BiC;AA0C9D,MAAI,QAAQ,CACV,CAAC,WAAD,EAAc,IAAd,CADU,EAEV,CAAC,UAAD,EAAa,MAAb,CAFU,EAGV,CAAC,YAAD,EAAe,MAAf,CAHU,EAIV,CAAC,aAAD,EAAgB,OAAhB,CAJU,CAAR,CA1C0D;AAgD9D,IAAE,OAAF,CAAU,gBAAY;;;QAAV,gBAAU;;AACpB,oBAAgB,IAAhB,IAAwB,UAAC,KAAD,EAAW;AACjC,UAAI,SAAS,4BACN,GADM,CACF,OADE,EACO,MAAM,IAAN,CAAW,iBAAX,CADhB,CAD6B;AAGjC,aAAO,MAAM,KAAN,CAAY,sBAAZ,EACY,YADZ,EAC0B,CAAE,IAAF,EAAQ,CAAC,KAAD,CAAR,EAAiB,MAAjB,CAD1B,CAAP,CAHiC;KAAX,CADJ;AAOpB,oBAAgB,OAAK,OAAL,CAAhB,GAAgC,UAAC,KAAD,EAAW;AACzC,UAAI,SAAS,4BACN,GADM,CACF,OADE,EACO,MAAM,IAAN,CAAW,iBAAX,CADhB,CADqC;AAGzC,aAAO,MAAM,KAAN,CAAY,sBAAZ,EACY,YADZ,EAC0B,CAAE,IAAF,EAAQ,CAAC,IAAD,CAAR,EAAgB,MAAhB,CAD1B,CAAP,CAHyC;KAAX,CAPZ;GAAZ,EAaP,KAbH,EAhD8D;AA8D9D,MAAI,SAAS,CACX,CAAC,SAAD,EAAY,SAAZ,EAAuB,WAAvB,CADW,EAEX,CAAC,WAAD,EAAc,WAAd,EAA2B,SAA3B,CAFW,EAGX,CAAC,WAAD,EAAc,WAAd,EAA2B,YAA3B,CAHW,EAIX,CAAC,YAAD,EAAe,YAAf,EAA6B,WAA7B,CAJW,CAAT,CA9D0D;AAoE9D,IAAE,OAAF,CAAU,iBAA8B;;;QAA5B,iBAA4B;QAArB,eAAqB;QAAhB,sBAAgB;;AACtC,UAAM,GAAN,CADsC;AAEtC,oBAAgB,KAAhB,IAAyB,UAAC,KAAD,EAAW;AAClC,UAAI,SAAS,4BACN,GADM,CACF,OADE,EACO,MAAM,IAAN,CAAW,iBAAX,CADhB,CAD8B;AAGlC,UAAI,gBAAkB,EAAE,IAAF,CAAO,CAAC,UAAD,EAAa,UAAb,CAAP,EAAiC,KAAjC,IACA,UADA,GAEA,KAFA,CAHY;AAOlC,aAAO,MAAM,KAAN,CAAY,sBAAZ,EACY,YADZ,EAC0B,CAAE,aAAF,EAAiB,CAAC,KAAD,CAAjB,EAA0B,MAA1B,CAD1B,CAAP,CAPkC;KAAX,CAFa;AAYtC,oBAAgB,QAAM,OAAN,CAAhB,GAAiC,UAAC,KAAD,EAAW;AAC1C,UAAI,SAAS,4BACN,GADM,CACF,OADE,EACO,MAAM,IAAN,CAAW,iBAAX,CADhB,CADsC;AAG1C,UAAI,gBAAkB,EAAE,IAAF,CAAO,CAAC,UAAD,EAAa,UAAb,CAAP,EAAiC,KAAjC,IACA,UADA,GAEA,KAFA,CAHoB;AAO1C,aAAO,MAAM,KAAN,CAAY,sBAAZ,EACY,YADZ,EAC0B,CAAE,aAAF,EAAiB,CAAC,IAAD,CAAjB,EAAyB,MAAzB,CAD1B,CAAP,CAP0C;KAAX,CAZK;GAA9B,EAsBP,MAtBH,EApE8D;;AA4F9D,GAAC,YAAM;AACL,QAAI,oCAAJ,CADK;AAEL,aAAS,oBAAT,CAA8B,KAA9B,EAAqC,KAArC,EAA4C;AAC1C,UAAI,KAAK,MAAM,GAAN,CAAU,CAAV,GAAc,MAAM,KAAN,CAAY,CAAZ,CADmB;AAE1C,UAAI,KAAK,MAAM,GAAN,CAAU,CAAV,GAAc,MAAM,KAAN,CAAY,CAAZ,CAFmB;AAG1C,YAAM,CAAN,GAAU,yBAAyB,CAAzB,GAA6B,EAA7B,CAHgC;AAI1C,YAAM,CAAN,GAAU,yBAAyB,CAAzB,GAA6B,EAA7B,CAJgC;KAA5C;AAMA,oBAAgB,gBAAhB,GAAmC,UAAC,KAAD,EAAQ,KAAR,EAAkB;AACnD,UAAG,eAAe,QAAf,CAAwB,MAAM,MAAN,CAA3B,EAA0C;AACxC,eAAO,KAAK,OAAL,CAAa,MAAb,CAAoB,mBAApB,CAAP,CADwC;OAA1C;;AAIA,iCAA2B,EAAE,KAAF,CAAQ,MAAM,MAAN,CAAa,KAAb,CAAnC,CALmD;AAMnD,sBAAgB,WAAhB,CAA4B,KAA5B,EAAmC,KAAnC,EANmD;AAOnD,aAAO,MACJ,KADI,CACE,aADF,EACiB,EAAE,QAAF,CAAW,mBAAX,CADjB,EAEE,4BAA4B,IAA5B,CAAiC,OAAjC,EAA0C,CAAC,MAAM,MAAN,CAAa,KAAb,CAAmB,KAAnB,CAA3C,EAAsE,KAAtE,CAFF,CAAP,CAPmD;KAAlB,CAR9B;AAmBL,uBAAmB,OAAnB,CAA2B,gBAA3B,GAA8C,gBAAgB,gBAAhB,CAnBzC;AAoBL,oBAAgB,WAAhB,GAA8B,UAAC,KAAD,EAAQ,KAAR,EAAkB;AAC9C,UAAG,eAAe,QAAf,CAAwB,MAAM,MAAN,CAA3B,EAA0C;AACxC,eAAO,KAAK,OAAL,CAAa,MAAb,CAAoB,mBAApB,CAAP,CADwC;OAA1C;;AAIA,2BAAqB,KAArB,EAA4B,MAAM,MAAN,CAAa,KAAb,CAA5B,CAL8C;AAM9C,YAAM,WAAN,0BAAyC,MAAM,MAAN,CAAa,KAAb,CAAmB,KAAnB,CAAzC,CAN8C;AAO9C,aAAO,IAAP,CAP8C;KAAlB,CApBzB;AA6BL,oBAAgB,cAAhB,GAAiC,UAAC,KAAD,EAAQ,KAAR,EAAkB;AACjD,UAAG,eAAe,QAAf,CAAwB,MAAM,MAAN,CAA3B,EAA0C;AACxC,eAAO,KAAK,OAAL,CAAa,MAAb,CAAoB,mBAApB,CAAP,CADwC;OAA1C;;AAIA,YAAM,MAAN,CAAa,KAAb,GAAqB,EAAE,KAAF,CAAQ,wBAAR,CAArB,CALiD;AAMjD,UAAI,YAAY,EAAE,KAAF,CAAQ,wBAAR,CAAZ,CAN6C;AAOjD,2BAAqB,KAArB,EAA4B,SAA5B,EAPiD;AAQjD,aAAO,MAAM,KAAN,CAAY,sBAAZ,EACY,YADZ,EAC0B,CAAE,aAAF,EACE,CAAC,SAAD,CADF,EAEE,CAAC,MAAM,MAAN,CAAa,KAAb,CAAmB,KAAnB,CAFH,CAD1B,CAAP,CARiD;KAAlB,CA7B5B;GAAN,CAAD,GA5F8D;;AAyI9D,MAAI,2BAA2B;AAC7B,gBAAY,UAAZ;AACA,qBAAiB,eAAjB;AACA,qBAAiB,QAAjB;AACA,cAAU,KAAV;AACA,kBAAc,GAAd;GALE,CAzI0D;AAgJ9D,IAAE,OAAF,CAAU,iBAAkB;;;QAAhB,gBAAgB;QAAV,gBAAU;;AAC1B,6BAAyB,IAAzB,IAAiC,IAAjC,CAD0B;AAE1B,6BAAyB,OAAK,OAAL,CAAzB,GAAyC,WAAS,IAAT,CAFf;GAAlB,EAGP,KAHH,EAhJ8D;AAoJ9D,IAAE,OAAF,CAAU,iBAAmB;;;QAAjB,iBAAiB;QAAV,gBAAU;;AAC3B,6BAAyB,KAAzB,IAAkC,IAAlC,CAD2B;AAE3B,6BAAyB,QAAM,OAAN,CAAzB,GAA0C,WAAS,IAAT,CAFf;GAAnB,EAGP,MAHH,EApJ8D;AAwJ9D,MAAI,mBAAmB,EAAE,MAAF,CAAS,OAAO,MAAP,CAAc,mBAAmB,QAAnB,CAAvB,EACU,wBADV,CAAnB,CAxJ0D;AA0J9D,MAAI,kBAAkB,CACpB,CAAE,QAAF,EAAY,QAAZ,CADoB,EAEpB,CAAE,aAAF,EAAiB,YAAjB,CAFoB,CAAlB,CA1J0D;AA8J9D,MAAI,eAAe;AACjB,aAAS,mBAAM,EAAN;AACT,aAAS,mBAAM,EAAN;AACT,UAAM,SAAN;AACA,aAAS,eAAT;AACA,aAAS,eAAT;AACA,cAAU,gBAAV;GANE,CA9J0D;AAsK9D,eAAa,YAAb,CAA0B,YAA1B,EAtK8D;AAuK9D,kBAAgB,QAAhB,CAAyB,UAAzB,EACyB,aAAa,IAAb,EACA,wBAFzB,EAGyB,UAAC,EAAD,EAAQ;AACN,MAAE,MAAF,CAAS,aAAa,QAAb,EAAuB,EAAhC,EADM;GAAR,CAHzB,CAvK8D;AA6K9D,SAAO,YAAP,CA7K8D;CANhE,CATJ","file":"terrain.js","sourcesContent":["angular.module('clickApp.services')\n  .factory('terrainMode', [\n    'modes',\n    'settings',\n    'defaultMode',\n    'terrain',\n    'game',\n    'gameTerrains',\n    'gameTerrainSelection',\n    function terrainModeServiceFactory(modesService,\n                                       settingsService,\n                                       defaultModeService,\n                                       terrainService,\n                                       gameService,\n                                       gameTerrainsService,\n                                       gameTerrainSelectionService) {\n      let terrain_actions = Object.create(defaultModeService.actions);\n      function clearTerrainSelection(state) {\n        return state.event('Game.update', R.lensProp('terrain_selection'),\n                           gameTerrainSelectionService.clear$('local', state));\n      }\n      terrain_actions.modeBackToDefault = clearTerrainSelection;\n      terrain_actions.clickMap = clearTerrainSelection;\n      terrain_actions.rightClickMap = clearTerrainSelection;\n      terrain_actions.copySelection = (state) => {\n        let stamps = gameTerrainSelectionService\n              .get('local', state.game.terrain_selection);\n        return R.pipeP(\n          gameTerrainsService.copyStamps$(stamps),\n          (copy) => {\n            state.create.terrain = copy;\n            return state.event('Modes.switchTo','CreateTerrain');\n          }\n        )(state.game.terrains);\n      };\n      terrain_actions.delete = (state) => {\n        let stamps = gameTerrainSelectionService\n              .get('local', state.game.terrain_selection);\n        return state.event('Game.command.execute',\n                           'deleteTerrain', [stamps]);\n      };\n      terrain_actions.toggleLock = (state) => {\n        let stamps = gameTerrainSelectionService\n              .get('local', state.game.terrain_selection);\n        return R.pipeP(\n          () => {\n            return gameTerrainsService\n              .findStamp(stamps[0], state.game.terrains);\n          },\n          (terrain) => {\n            let is_locked = terrainService.isLocked(terrain);\n        \n            return state.event('Game.command.execute',\n                               'lockTerrains', [!is_locked, stamps]);\n          }\n        )();\n      };\n      let moves = [\n        ['moveFront', 'up'],\n        ['moveBack', 'down'],\n        ['rotateLeft', 'left'],\n        ['rotateRight', 'right'],\n      ];\n      R.forEach(([move]) => {\n        terrain_actions[move] = (state) => {\n          let stamps = gameTerrainSelectionService\n                .get('local', state.game.terrain_selection);\n          return state.event('Game.command.execute',\n                             'onTerrains', [ move, [false], stamps ]);\n        };\n        terrain_actions[move+'Small'] = (state) => {\n          let stamps = gameTerrainSelectionService\n                .get('local', state.game.terrain_selection);\n          return state.event('Game.command.execute',\n                             'onTerrains', [ move, [true], stamps ]);\n        };\n      }, moves);\n      let shifts = [\n        ['shiftUp', 'ctrl+up', 'shiftDown'],\n        ['shiftDown', 'ctrl+down', 'shiftUp'],\n        ['shiftLeft', 'ctrl+left', 'shiftRight'],\n        ['shiftRight', 'ctrl+right', 'shiftLeft'],\n      ];\n      R.forEach(([shift, key, flip_shift]) => {\n        key = key;\n        terrain_actions[shift] = (state) => {\n          let stamps = gameTerrainSelectionService\n                .get('local', state.game.terrain_selection);\n          let terrain_shift = ( R.path(['ui_state', 'flip_map'], state) ?\n                                flip_shift :\n                                shift\n                              );\n          return state.event('Game.command.execute',\n                             'onTerrains', [ terrain_shift, [false], stamps ]);\n        };\n        terrain_actions[shift+'Small'] = (state) => {\n          let stamps = gameTerrainSelectionService\n                .get('local', state.game.terrain_selection);\n          let terrain_shift = ( R.path(['ui_state', 'flip_map'], state) ?\n                                flip_shift :\n                                shift\n                              );\n          return state.event('Game.command.execute',\n                             'onTerrains', [ terrain_shift, [true], stamps ]);\n        };\n      }, shifts);\n\n      (() => {\n        let drag_terrain_start_state;\n        function updateStateWithDelta(event, state) {\n          let dx = event.now.x - event.start.x;\n          let dy = event.now.y - event.start.y;\n          state.x = drag_terrain_start_state.x + dx;\n          state.y = drag_terrain_start_state.y + dy;\n        }\n        terrain_actions.dragStartTerrain = (state, event) => {\n          if(terrainService.isLocked(event.target)) {\n            return self.Promise.reject('Terrain is locked');\n          }\n\n          drag_terrain_start_state = R.clone(event.target.state);\n          terrain_actions.dragTerrain(state, event);\n          return state\n            .event('Game.update', R.lensProp('terrain_selection'),\n                   gameTerrainSelectionService.set$('local', [event.target.state.stamp], state));\n        };\n        defaultModeService.actions.dragStartTerrain = terrain_actions.dragStartTerrain;\n        terrain_actions.dragTerrain = (state, event) => {\n          if(terrainService.isLocked(event.target)) {\n            return self.Promise.reject('Terrain is locked');\n          }\n\n          updateStateWithDelta(event, event.target.state);\n          state.changeEvent(`Game.terrain.change.${event.target.state.stamp}`);\n          return null;\n        };\n        terrain_actions.dragEndTerrain = (state, event) => {\n          if(terrainService.isLocked(event.target)) {\n            return self.Promise.reject('Terrain is locked');\n          }\n\n          event.target.state = R.clone(drag_terrain_start_state);\n          let end_state = R.clone(drag_terrain_start_state);\n          updateStateWithDelta(event, end_state);\n          return state.event('Game.command.execute',\n                             'onTerrains', [ 'setPosition',\n                                             [end_state],\n                                             [event.target.state.stamp]\n                                           ]);\n        };\n      })();\n\n      let terrain_default_bindings = {\n        'clickMap': 'clickMap',\n        'rightClickMap': 'rightClickMap',\n        'copySelection': 'ctrl+c',\n        'delete': 'del',\n        'toggleLock': 'l'\n      };\n      R.forEach(([move, keys]) => {\n        terrain_default_bindings[move] = keys;\n        terrain_default_bindings[move+'Small'] = 'shift+'+keys;\n      }, moves);\n      R.forEach(([shift, keys]) => {\n        terrain_default_bindings[shift] = keys;\n        terrain_default_bindings[shift+'Small'] = 'shift+'+keys;\n      }, shifts);\n      let terrain_bindings = R.extend(Object.create(defaultModeService.bindings),\n                                       terrain_default_bindings);\n      let terrain_buttons = [\n        [ 'Delete', 'delete' ],\n        [ 'Lock/Unlock', 'toggleLock' ],\n      ];\n      let terrain_mode = {\n        onEnter: () => { },\n        onLeave: () => { },\n        name: 'Terrain',\n        actions: terrain_actions,\n        buttons: terrain_buttons,\n        bindings: terrain_bindings\n      };\n      modesService.registerMode(terrain_mode);\n      settingsService.register('Bindings',\n                               terrain_mode.name,\n                               terrain_default_bindings,\n                               (bs) => {\n                                 R.extend(terrain_mode.bindings, bs);\n                               });\n      return terrain_mode;\n    }\n  ]);\n"]}