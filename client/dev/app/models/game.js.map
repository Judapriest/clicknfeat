{"version":3,"sources":["game.es6"],"names":[],"mappings":"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","file":"game.js","sourcesContent":["(function() {\n  angular.module('clickApp.services')\n    .factory('game', gameModelFactory);\n\n  gameModelFactory.$inject = [\n    'jsonStringifier',\n    'commands',\n    // 'gameConnection',\n    'gameLayers',\n    'gameLos',\n    'gameModels',\n    'gameModelSelection',\n    'gameRuler',\n    'gameTemplates',\n    'gameTemplateSelection',\n    'gameTerrains',\n    'gameTerrainSelection',\n  ];\n  function gameModelFactory(jsonStringifierService,\n                            commandsModel,\n                            // gameConnectionModel,\n                            gameLayersModel,\n                            gameLosModel,\n                            gameModelsModel,\n                            gameModelSelectionModel,\n                            gameRulerModel,\n                            gameTemplatesModel,\n                            gameTemplateSelectionModel,\n                            gameTerrainsModel,\n                            gameTerrainSelectionModel) {\n    const gameModel = {\n      create: gameCreate,\n      loadP: gameLoadP,\n      // pickForJson: gamePickForJson,\n      toJson: gameToJson,\n      description: gameDescription,\n      executeCommandP: gameExecuteCommandP,\n      // undoCommand: gameUndoCommand,\n      undoLastCommandP: gameUndoLastCommandP,\n      // replayCommand: gameReplayCommand,\n      // replayCommandsBatch: gameReplayCommandsBatch,\n      replayNextCommandP: gameReplayNextCommandP,\n      // sendChat: gameSendChat,\n      actionError: gameActionError\n    };\n\n    const GAME_PROTO = {\n      toJSON: function gameToJson() {\n        return gamePickForJson(this);\n      }\n    };\n    const gameReplayAllP$ = R.curry(gameReplayAllP);\n\n    R.curryService(gameModel);\n    return gameModel;\n\n    function gameCreate(player1) {\n      var new_game = {\n        players: {\n          p1: { name: R.propOr('player1', 'name', player1) },\n          p2: { name: null }\n        }\n      };\n      return new_game;\n    }\n    function gameLoadP(state, data) {\n      return R.threadP(Object.create(GAME_PROTO))(\n        extendGameDefaultWithData,\n        // gameConnectionModel.create,\n        gameReplayAllP$(state)\n      );\n\n      function extendGameDefaultWithData(game) {\n        return R.deepExtend(game, defaultGameState(), data);\n      }\n    }\n    function defaultGameState() {\n      return {\n        players: {\n          p1: { name: null },\n          p2: { name: null }\n        },\n        board: {},\n        scenario: {},\n        chat: [],\n        commands: [],\n        commands_log: [],\n        undo: [],\n        undo_log: [],\n        dice: [],\n        ruler: gameRulerModel.create(),\n        los: gameLosModel.create(),\n        models: gameModelsModel.create(),\n        model_selection: gameModelSelectionModel.create(),\n        templates: gameTemplatesModel.create(),\n        template_selection: gameTemplateSelectionModel.create(),\n        terrains: gameTerrainsModel.create(),\n        terrain_selection: gameTerrainSelectionModel.create(),\n        layers: gameLayersModel.create()\n      };\n    }\n    function gamePickForJson(game) {\n      return R.pick([\n        'players', 'commands', 'undo', 'chat',\n        'local_stamp', 'private_stamp', 'public_stamp'\n      ], game);\n    }\n    function gameToJson(game) {\n      return R.thread(game)(\n        gamePickForJson,\n        jsonStringifierService.stringify\n      );\n    }\n    function gamePlayerName(p, game) {\n      return R.pathOr('John Doe', ['players',p,'name'], game);\n    }\n    function gameDescription(game) {\n      return [ s.capitalize(gamePlayerName('p1', game)),\n               'vs',\n               s.capitalize(gamePlayerName('p2', game))\n             ].join(' ');\n    }\n    function gameExecuteCommandP(cmd, args, state, game) {\n      return R.threadP(commandsModel.executeP(cmd, args, state, game))(\n        stampCommand,\n        ([command, game]) => {\n          // if(R.always(gameConnectionModel.active(game))) {\n          //   return gameConnectionModel\n          //     .sendReplayCommand(command, game);\n          // }\n          return logLocalCommand([command, game]);\n        },\n        emitGameEvent\n      );\n\n      function stampCommand([command, game]) {\n        return [ R.thread(command)(\n          R.assoc('user', R.pathOr('Unknown', ['user','state','name'], state)),\n          R.assoc('stamp', R.guid())\n        ), game ];\n      }\n      function logLocalCommand(args) {\n        return R.thread(args)(\n          appendToCommands,\n          updateDice\n        );\n      }\n      function appendToCommands([command, game]) {\n        if(!command.do_not_log) {\n          game = R.over(R.lensProp('commands'),\n                        R.append(command),\n                        game);\n        }\n        return [command, game];\n      }\n      function updateDice([command, game]) {\n        if(command.type === 'rollDice' ||\n           command.type === 'rollDeviation') {\n          game = R.over(R.lensProp('dice'),\n                        R.append(command),\n                        game);\n        }\n        return [command, game];\n      }\n      function emitGameEvent([command, game]) {\n        command = command;\n        state.queueChangeEventP('Game.command.execute');\n        return game;\n      }\n    }\n    // function gameUndoCommand(command, state, game) {\n    //   return R.pipePromise(\n    //     R.propOr([], 'undo_log'),\n    //     R.find(R.propEq('stamp', command.stamp)),\n    //     (log) => {\n    //       if(R.exists(log)) {\n    //         console.log('Game : undoCmd log', command);\n    //         let log = R.propOr([], 'undo_log', game);\n    //         return R.assoc('undo_log',\n    //                        R.reject(R.propEq('stamp', command.stamp), log),\n    //                        game);\n    //       }\n    //       return commandsModel\n    //         .undo(command, state, game);\n    //     },\n    //     (game) => {\n    //       let commands = R.propOr([], 'commands', game);\n    //       let undo = R.propOr([], 'undo', game);\n    //       return R.pipe(\n    //         R.assoc('commands', R.reject(R.propEq('stamp', command.stamp), commands)),\n    //         R.assoc('undo', R.append(command, undo))\n    //       )(game);\n    //     },\n    //     (game) => {\n    //       state.changeEvent('Game.command.undo');\n    //       return game;\n    //     }\n    //   )(game);\n    // }\n    function gameUndoLastCommandP(state, game) {\n      return R.threadP(game)(\n        getLastCommand,\n        undoCommand,\n        updateLogs,\n        sendChangeEvent\n      );\n\n      function getLastCommand(game) {\n        return R.threadP(game)(\n          R.propOr([],'commands'),\n          R.last,\n          R.rejectIf(R.isNil, 'Command history empty')\n        );\n      }\n      function undoCommand(command) {\n        return R.threadP(game)(\n          commandsModel.undoP$(command, state),\n          (game) => { return [command, game]; }\n        );\n      }\n      function updateLogs([command, game]) {\n        return R.threadP(game)(\n          removeFromCommands,\n          (game) => {\n            // if(gameConnectionModel.active(game)) {\n            //   return gameConnectionModel\n            //     .sendUndoCommand(command, game);\n            // }\n            return addToUndo(game);\n          }\n        );\n\n        function removeFromCommands(game) {\n          return R.over(R.lensProp('commands'),\n                        R.init,\n                        game);\n        }\n        function addToUndo(game) {\n          return R.over(R.lensProp('undo'),\n                        R.append(command),\n                        game);\n        }\n      }\n      function sendChangeEvent(game) {\n        state.queueChangeEventP('Game.command.undo');\n        return game;\n      }\n    }\n    // function gameReplayCommand(command, state, game) {\n    //   return R.pipePromise(\n    //     R.propOr([], 'commands_log'),\n    //     R.find(R.propEq('stamp', command.stamp)),\n    //     (log) => {\n    //       if(R.exists(log)) {\n    //         console.log('Game: replayCmd log', command);\n    //         return R.over(R.lensProp('commands_log'),\n    //                       R.reject(R.propEq('stamp', command.stamp)),\n    //                       game);\n    //       }\n    //       return commandsModel\n    //         .replay(command, state, game);\n    //     },\n    //     (game) => {\n    //       return R.pipe(\n    //         R.over(R.lensProp('undo'),\n    //                R.reject(R.propEq('stamp', command.stamp))),\n    //         (game) => {\n    //           if(command.do_not_log) return game;\n\n    //           return R.over(R.lensProp('commands'),\n    //                         R.append(command),\n    //                         game);\n    //         }\n    //       )(game);\n    //     },\n    //     (game) => {\n    //       state.changeEvent('Game.command.replay');\n    //       return game;\n    //     }\n    //   )(game);\n    // }\n    // function gameReplayCommandsBatch(cmds, state, game) {\n    //   return R.pipeP(\n    //     commandsModel.replayBatch$(cmds, state),\n    //     R.over(R.lensProp('commands'),\n    //            R.flip(R.concat)(cmds))\n    //   )(game);\n    // }\n    function gameReplayNextCommandP(state, game) {\n      return R.threadP(game)(\n        getNextUndo,\n        replayCommand,\n        updateLogs,\n        sendChangeEvent\n      );\n\n      function getNextUndo(game) {\n        return R.threadP(game)(\n          R.propOr([], 'undo'),\n          R.last,\n          R.rejectIf(R.isNil, 'Undo history empty')\n        );\n      }\n      function replayCommand(command) {\n        return R.threadP(game)(\n          commandsModel.replayP$(command, state),\n          (game) => { return [command, game]; }\n        );\n      }\n      function updateLogs([command, game]) {\n        return R.threadP(game)(\n          removeFromUndo,\n          (game) => {\n            // if(gameConnectionModel.active(game)) {\n            //   return gameConnectionModel\n            //     .sendReplayCommand(command, game);\n            // }\n            return addToCommands(game);\n          }\n        );\n\n        function removeFromUndo(game) {\n          return R.over(R.lensProp('undo'),\n                        R.init,\n                        game);\n        }\n        function addToCommands(game) {\n          return R.over(R.lensProp('commands'),\n                        R.append(command),\n                        game);\n        }\n      }\n      function sendChangeEvent(game) {\n        state.queueChangeEventP('Game.command.replay');\n        return game;\n      }\n    }\n    // function gameSendChat(from, msg, game) {\n    //   return gameConnectionModel\n    //     .sendEvent({\n    //       type: 'chat',\n    //       chat: {\n    //         from: from,\n    //         msg: msg\n    //       }\n    //     }, game);\n    // }\n    function gameReplayBatchsP(batchs, state, game) {\n      if(R.isEmpty(batchs)) {\n        return self.Promise.resolve(game);\n      }\n\n      console.log('Game: ReplayBatchs:', batchs);\n      return R.threadP(game)(\n        commandsModel.replayBatchP$(batchs[0], state),\n        recurP\n      );\n\n      function recurP(game) {\n        return new self.Promise((resolve) => {\n          self.requestAnimationFrame(() => {\n            resolve(gameReplayBatchsP(R.tail(batchs), state, game));\n          });\n        });\n      }\n    }\n    function gameReplayAllP(state, game) {\n      return new self.Promise((resolve) => {\n        if(R.isEmpty(game.commands)) {\n          resolve(game);\n        }\n\n        var batchs = R.splitEvery(game.commands.length, game.commands);\n        self.requestAnimationFrame(() => {\n          resolve(gameReplayBatchsP(batchs, state, game));\n        });\n      });\n    }\n    function gameActionError(state, error) {\n      state.queueChangeEventP('Game.action.error', error);\n      return null;\n    }\n  }\n})();\n"]}